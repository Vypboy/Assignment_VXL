
Assignment_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f8  080045f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080045f8  080045f8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f8  080045f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000080  08004680  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004680  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108d3  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274d  00000000  00000000  0003097c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00033e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018901  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001181f  00000000  00000000  0004d419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0c6  00000000  00000000  0005ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  000e9d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800457c 	.word	0x0800457c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800457c 	.word	0x0800457c

0800014c <BlinkLed>:
#include "global.h"
#include "Software_timer.h"

//ham BkinkLed() de thuc hien nhap nhau 4 den cung mau trong trang thai MODE
int status1=0;
void BlinkLed(enum TypeLed L){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(timer5_flag==1){
 8000156:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <BlinkLed+0x68>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d126      	bne.n	80001ac <BlinkLed+0x60>
		setTimer5(250);
 800015e:	20fa      	movs	r0, #250	; 0xfa
 8000160:	f000 f95c 	bl	800041c <setTimer5>
		if(status1==1){
 8000164:	4b14      	ldr	r3, [pc, #80]	; (80001b8 <BlinkLed+0x6c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d117      	bne.n	800019c <BlinkLed+0x50>
			if(L == Red){
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d104      	bne.n	800017c <BlinkLed+0x30>
				Display_Led_Red1();
 8000172:	f000 f841 	bl	80001f8 <Display_Led_Red1>
				Display_Led_Red2();
 8000176:	f000 f87b 	bl	8000270 <Display_Led_Red2>
 800017a:	e011      	b.n	80001a0 <BlinkLed+0x54>
			}
			else if(L == Green){
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d104      	bne.n	800018c <BlinkLed+0x40>
				Display_Led_Green1();
 8000182:	f000 f84d 	bl	8000220 <Display_Led_Green1>
				Display_Led_Green2();
 8000186:	f000 f883 	bl	8000290 <Display_Led_Green2>
 800018a:	e009      	b.n	80001a0 <BlinkLed+0x54>
			}
			else if(L == Yellow){
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d106      	bne.n	80001a0 <BlinkLed+0x54>
				Display_Led_Yellow1();
 8000192:	f000 f859 	bl	8000248 <Display_Led_Yellow1>
				Display_Led_Yellow2();
 8000196:	f000 f88b 	bl	80002b0 <Display_Led_Yellow2>
 800019a:	e001      	b.n	80001a0 <BlinkLed+0x54>
			}
		}
		else{
			Display_Init();
 800019c:	f000 f80e 	bl	80001bc <Display_Init>
		}
		status1=1 - status1;
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <BlinkLed+0x6c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f1c3 0301 	rsb	r3, r3, #1
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <BlinkLed+0x6c>)
 80001aa:	6013      	str	r3, [r2, #0]
	}
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	200000c4 	.word	0x200000c4
 80001b8:	2000009c 	.word	0x2000009c

080001bc <Display_Init>:


void Display_Init(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c6:	480a      	ldr	r0, [pc, #40]	; (80001f0 <Display_Init+0x34>)
 80001c8:	f001 fca3 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <Display_Init+0x38>)
 80001d2:	f001 fc9e 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2120      	movs	r1, #32
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <Display_Init+0x38>)
 80001dc:	f001 fc99 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2110      	movs	r1, #16
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <Display_Init+0x38>)
 80001e6:	f001 fc94 	bl	8001b12 <HAL_GPIO_WritePin>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010800 	.word	0x40010800
 80001f4:	40010c00 	.word	0x40010c00

080001f8 <Display_Led_Red1>:


void Display_Led_Red1(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000202:	4805      	ldr	r0, [pc, #20]	; (8000218 <Display_Led_Red1+0x20>)
 8000204:	f001 fc85 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <Display_Led_Red1+0x24>)
 800020e:	f001 fc80 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010800 	.word	0x40010800
 800021c:	40010c00 	.word	0x40010c00

08000220 <Display_Led_Green1>:
void Display_Led_Green1(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <Display_Led_Green1+0x20>)
 800022c:	f001 fc71 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2108      	movs	r1, #8
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <Display_Led_Green1+0x24>)
 8000236:	f001 fc6c 	bl	8001b12 <HAL_GPIO_WritePin>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010800 	.word	0x40010800
 8000244:	40010c00 	.word	0x40010c00

08000248 <Display_Led_Yellow1>:
void Display_Led_Yellow1(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <Display_Led_Yellow1+0x20>)
 8000254:	f001 fc5d 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2108      	movs	r1, #8
 800025c:	4803      	ldr	r0, [pc, #12]	; (800026c <Display_Led_Yellow1+0x24>)
 800025e:	f001 fc58 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	40010c00 	.word	0x40010c00

08000270 <Display_Led_Red2>:

void Display_Led_Red2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2120      	movs	r1, #32
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <Display_Led_Red2+0x1c>)
 800027a:	f001 fc4a 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2110      	movs	r1, #16
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <Display_Led_Red2+0x1c>)
 8000284:	f001 fc45 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010c00 	.word	0x40010c00

08000290 <Display_Led_Green2>:
void Display_Led_Green2(){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2120      	movs	r1, #32
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <Display_Led_Green2+0x1c>)
 800029a:	f001 fc3a 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2110      	movs	r1, #16
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <Display_Led_Green2+0x1c>)
 80002a4:	f001 fc35 	bl	8001b12 <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <Display_Led_Yellow2>:
void Display_Led_Yellow2(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <Display_Led_Yellow2+0x1c>)
 80002ba:	f001 fc2a 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2110      	movs	r1, #16
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <Display_Led_Yellow2+0x1c>)
 80002c4:	f001 fc25 	bl	8001b12 <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <Display_P_Led_Reset>:
//}
//void Display_P_Led_Green1(){
//	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_SET);
//}
void Display_P_Led_Reset(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <Display_P_Led_Reset+0x20>)
 80002dc:	f001 fc19 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e6:	4802      	ldr	r0, [pc, #8]	; (80002f0 <Display_P_Led_Reset+0x20>)
 80002e8:	f001 fc13 	bl	8001b12 <HAL_GPIO_WritePin>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <Display_P_Led_Red1>:
void Display_P_Led_Red1(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <Display_P_Led_Red1+0x20>)
 8000300:	f001 fc07 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <Display_P_Led_Red1+0x20>)
 800030c:	f001 fc01 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010c00 	.word	0x40010c00

08000318 <Display_P_Led_Green1>:
void Display_P_Led_Green1(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <Display_P_Led_Green1+0x20>)
 8000324:	f001 fbf5 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <Display_P_Led_Green1+0x20>)
 8000330:	f001 fbef 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010c00 	.word	0x40010c00

0800033c <setTimer1>:
int timer4_flag = 0;

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer1(int duration){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <setTimer1+0x2c>)
 8000348:	fb82 1203 	smull	r1, r2, r2, r3
 800034c:	1092      	asrs	r2, r2, #2
 800034e:	17db      	asrs	r3, r3, #31
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	4a06      	ldr	r2, [pc, #24]	; (800036c <setTimer1+0x30>)
 8000354:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <setTimer1+0x34>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	66666667 	.word	0x66666667
 800036c:	200000a0 	.word	0x200000a0
 8000370:	200000a4 	.word	0x200000a4

08000374 <setTimer2>:

void setTimer2(int duration){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <setTimer2+0x2c>)
 8000380:	fb82 1203 	smull	r1, r2, r2, r3
 8000384:	1092      	asrs	r2, r2, #2
 8000386:	17db      	asrs	r3, r3, #31
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <setTimer2+0x30>)
 800038c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <setTimer2+0x34>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	66666667 	.word	0x66666667
 80003a4:	200000a8 	.word	0x200000a8
 80003a8:	200000ac 	.word	0x200000ac

080003ac <setTimer3>:

void setTimer3(int duration){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <setTimer3+0x2c>)
 80003b8:	fb82 1203 	smull	r1, r2, r2, r3
 80003bc:	1092      	asrs	r2, r2, #2
 80003be:	17db      	asrs	r3, r3, #31
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <setTimer3+0x30>)
 80003c4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <setTimer3+0x34>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	66666667 	.word	0x66666667
 80003dc:	200000b0 	.word	0x200000b0
 80003e0:	200000b4 	.word	0x200000b4

080003e4 <setTimer4>:

void setTimer4(int duration){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <setTimer4+0x2c>)
 80003f0:	fb82 1203 	smull	r1, r2, r2, r3
 80003f4:	1092      	asrs	r2, r2, #2
 80003f6:	17db      	asrs	r3, r3, #31
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <setTimer4+0x30>)
 80003fc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <setTimer4+0x34>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	66666667 	.word	0x66666667
 8000414:	200000b8 	.word	0x200000b8
 8000418:	200000bc 	.word	0x200000bc

0800041c <setTimer5>:

void setTimer5(int duration){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <setTimer5+0x2c>)
 8000428:	fb82 1203 	smull	r1, r2, r2, r3
 800042c:	1092      	asrs	r2, r2, #2
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <setTimer5+0x30>)
 8000434:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <setTimer5+0x34>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	66666667 	.word	0x66666667
 800044c:	200000c0 	.word	0x200000c0
 8000450:	200000c4 	.word	0x200000c4

08000454 <timerRun>:

void timerRun(){
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <timerRun+0xac>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	dd0b      	ble.n	8000478 <timerRun+0x24>
		timer1_counter--;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <timerRun+0xac>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	4a26      	ldr	r2, [pc, #152]	; (8000500 <timerRun+0xac>)
 8000468:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <timerRun+0xac>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d102      	bne.n	8000478 <timerRun+0x24>
			timer1_flag = 1;
 8000472:	4b24      	ldr	r3, [pc, #144]	; (8000504 <timerRun+0xb0>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <timerRun+0xb4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	dd0b      	ble.n	8000498 <timerRun+0x44>
		timer2_counter--;
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <timerRun+0xb4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a20      	ldr	r2, [pc, #128]	; (8000508 <timerRun+0xb4>)
 8000488:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <timerRun+0xb4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d102      	bne.n	8000498 <timerRun+0x44>
			timer2_flag = 1;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <timerRun+0xb8>)
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <timerRun+0xbc>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	dd0b      	ble.n	80004b8 <timerRun+0x64>
		timer3_counter--;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <timerRun+0xbc>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <timerRun+0xbc>)
 80004a8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <timerRun+0xbc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d102      	bne.n	80004b8 <timerRun+0x64>
			timer3_flag = 1;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <timerRun+0xc0>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <timerRun+0xc4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dd0b      	ble.n	80004d8 <timerRun+0x84>
		timer4_counter--;
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <timerRun+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <timerRun+0xc4>)
 80004c8:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <timerRun+0xc4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <timerRun+0x84>
			timer4_flag = 1;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <timerRun+0xc8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <timerRun+0xcc>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd0b      	ble.n	80004f8 <timerRun+0xa4>
		timer5_counter--;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <timerRun+0xcc>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <timerRun+0xcc>)
 80004e8:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <timerRun+0xcc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <timerRun+0xa4>
			timer5_flag = 1;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <timerRun+0xd0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	200000a0 	.word	0x200000a0
 8000504:	200000a4 	.word	0x200000a4
 8000508:	200000a8 	.word	0x200000a8
 800050c:	200000ac 	.word	0x200000ac
 8000510:	200000b0 	.word	0x200000b0
 8000514:	200000b4 	.word	0x200000b4
 8000518:	200000b8 	.word	0x200000b8
 800051c:	200000bc 	.word	0x200000bc
 8000520:	200000c0 	.word	0x200000c0
 8000524:	200000c4 	.word	0x200000c4

08000528 <ReadButton>:
#include "button.h"
#include "main.h"

//add more case if you have more buttons
int ReadButton(int i){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	d822      	bhi.n	800057c <ReadButton+0x54>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <ReadButton+0x14>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000559 	.word	0x08000559
 8000544:	08000565 	.word	0x08000565
 8000548:	08000571 	.word	0x08000571
	switch(i){
		case 0:
			return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800054c:	2102      	movs	r1, #2
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <ReadButton+0x60>)
 8000550:	f001 fac8 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	e013      	b.n	8000580 <ReadButton+0x58>
		case 1:
			return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000558:	2110      	movs	r1, #16
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <ReadButton+0x60>)
 800055c:	f001 fac2 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	e00d      	b.n	8000580 <ReadButton+0x58>
		case 2:
			return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000564:	2101      	movs	r1, #1
 8000566:	4809      	ldr	r0, [pc, #36]	; (800058c <ReadButton+0x64>)
 8000568:	f001 fabc 	bl	8001ae4 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	e007      	b.n	8000580 <ReadButton+0x58>
		case 3:
			return HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 8000570:	2101      	movs	r1, #1
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <ReadButton+0x60>)
 8000574:	f001 fab6 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	e001      	b.n	8000580 <ReadButton+0x58>
		default:
			break;
 800057c:	bf00      	nop
	}
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <subKeyProcess>:
		KeyReg3[i]= NORMAL_STATE;
		TimeForKeyPress[i]= 200;
	}
}

void subKeyProcess(int i){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <subKeyProcess+0x1c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2101      	movs	r1, #1
 800059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000114 	.word	0x20000114

080005b0 <isButtonPressed>:

int isButtonPressed(int i){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <isButtonPressed+0x30>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d106      	bne.n	80005d2 <isButtonPressed+0x22>
		button_flag[i]=0;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <isButtonPressed+0x30>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2100      	movs	r1, #0
 80005ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <isButtonPressed+0x24>
	}
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000114 	.word	0x20000114

080005e4 <getKeyInput>:


void getKeyInput(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e063      	b.n	80006b8 <getKeyInput+0xd4>
		KeyReg0[i]= KeyReg1[i];
 80005f0:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <getKeyInput+0xe4>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	4934      	ldr	r1, [pc, #208]	; (80006cc <getKeyInput+0xe8>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i]= KeyReg2[i];
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <getKeyInput+0xec>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	492f      	ldr	r1, [pc, #188]	; (80006c8 <getKeyInput+0xe4>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i]= ReadButton(i);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff89 	bl	8000528 <ReadButton>
 8000616:	4602      	mov	r2, r0
 8000618:	492d      	ldr	r1, [pc, #180]	; (80006d0 <getKeyInput+0xec>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <getKeyInput+0xe4>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000628:	4928      	ldr	r1, [pc, #160]	; (80006cc <getKeyInput+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000630:	429a      	cmp	r2, r3
 8000632:	d13e      	bne.n	80006b2 <getKeyInput+0xce>
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <getKeyInput+0xe4>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800063c:	4924      	ldr	r1, [pc, #144]	; (80006d0 <getKeyInput+0xec>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000644:	429a      	cmp	r2, r3
 8000646:	d134      	bne.n	80006b2 <getKeyInput+0xce>
			if (KeyReg3[i] != KeyReg2[i]){
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <getKeyInput+0xf0>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000650:	491f      	ldr	r1, [pc, #124]	; (80006d0 <getKeyInput+0xec>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000658:	429a      	cmp	r2, r3
 800065a:	d016      	beq.n	800068a <getKeyInput+0xa6>
			  KeyReg3[i] = KeyReg2[i];
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <getKeyInput+0xec>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000664:	491b      	ldr	r1, [pc, #108]	; (80006d4 <getKeyInput+0xf0>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <getKeyInput+0xec>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d11c      	bne.n	80006b2 <getKeyInput+0xce>
				  TimeForKeyPress[i] = 200;
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <getKeyInput+0xf4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	21c8      	movs	r1, #200	; 0xc8
 800067e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  //TODO
				  subKeyProcess(i);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff84 	bl	8000590 <subKeyProcess>
 8000688:	e013      	b.n	80006b2 <getKeyInput+0xce>
			  }
			} else {
				TimeForKeyPress[i]--;
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <getKeyInput+0xf4>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	4910      	ldr	r1, [pc, #64]	; (80006d8 <getKeyInput+0xf4>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeForKeyPress[i] == 0){
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <getKeyInput+0xf4>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d104      	bne.n	80006b2 <getKeyInput+0xce>
					//TODO
					KeyReg3[i]= NORMAL_STATE;
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <getKeyInput+0xf0>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2101      	movs	r1, #1
 80006ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	dd98      	ble.n	80005f0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000104 	.word	0x20000104
 80006cc:	200000f4 	.word	0x200000f4
 80006d0:	20000124 	.word	0x20000124
 80006d4:	200000e4 	.word	0x200000e4
 80006d8:	20000134 	.word	0x20000134

080006dc <press_ped_lag>:
#include "fsm_automatic.h"
#include "main.h"
#include <stdio.h>


void press_ped_lag(){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	flag_ped=1;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <press_ped_lag+0x14>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <reset_ped_led>:
void reset_ped_led(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	flag_ped=0;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <reset_ped_led+0x14>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	Display_P_Led_Reset();
 80006fe:	f7ff fde7 	bl	80002d0 <Display_P_Led_Reset>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <fsm_automatic_run>:


void fsm_automatic_run(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	//quan ly den tin hieu hang doc
	switch(status_col){
 8000710:	4b87      	ldr	r3, [pc, #540]	; (8000930 <fsm_automatic_run+0x224>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	2b03      	cmp	r3, #3
 8000718:	f200 809b 	bhi.w	8000852 <fsm_automatic_run+0x146>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm_automatic_run+0x18>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074b 	.word	0x0800074b
 800072c:	080007a3 	.word	0x080007a3
 8000730:	080007fb 	.word	0x080007fb
		case INIT:
			Display_Init();
 8000734:	f7ff fd42 	bl	80001bc <Display_Init>
			//chuyen trang thai ko dk
			status_col=AUTO_RED;
 8000738:	4b7d      	ldr	r3, [pc, #500]	; (8000930 <fsm_automatic_run+0x224>)
 800073a:	2202      	movs	r2, #2
 800073c:	601a      	str	r2, [r3, #0]
			setTimer1(Time_Auto_Red);
 800073e:	4b7d      	ldr	r3, [pc, #500]	; (8000934 <fsm_automatic_run+0x228>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fdfa 	bl	800033c <setTimer1>
			break;
 8000748:	e08a      	b.n	8000860 <fsm_automatic_run+0x154>
		case AUTO_RED:
			Display_Led_Red1();
 800074a:	f7ff fd55 	bl	80001f8 <Display_Led_Red1>
			//dat gia tri bien dem time_value de hien thi tren terminal
			set_time_value(Time_Auto_Red);
 800074e:	4b79      	ldr	r3, [pc, #484]	; (8000934 <fsm_automatic_run+0x228>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f99a 	bl	8000a8c <set_time_value>

			//chuyen trang thai co dk
			if(timer1_flag==1){
 8000758:	4b77      	ldr	r3, [pc, #476]	; (8000938 <fsm_automatic_run+0x22c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d107      	bne.n	8000770 <fsm_automatic_run+0x64>
				status_col=AUTO_GREEN;
 8000760:	4b73      	ldr	r3, [pc, #460]	; (8000930 <fsm_automatic_run+0x224>)
 8000762:	2203      	movs	r2, #3
 8000764:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Green);
 8000766:	4b75      	ldr	r3, [pc, #468]	; (800093c <fsm_automatic_run+0x230>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fde6 	bl	800033c <setTimer1>
			}
			//trang thai mode 2
			if(isButtonPressed(0)==1){
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff1d 	bl	80005b0 <isButtonPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d109      	bne.n	8000790 <fsm_automatic_run+0x84>
				status_col=MAN_RED;
 800077c:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <fsm_automatic_run+0x224>)
 800077e:	220c      	movs	r2, #12
 8000780:	601a      	str	r2, [r3, #0]
				status_row=MAN_RED;
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <fsm_automatic_run+0x234>)
 8000784:	220c      	movs	r2, #12
 8000786:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 8000788:	f643 2098 	movw	r0, #15000	; 0x3a98
 800078c:	f7ff fdd6 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff0d 	bl	80005b0 <isButtonPressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d15c      	bne.n	8000856 <fsm_automatic_run+0x14a>
				press_ped_lag();
 800079c:	f7ff ff9e 	bl	80006dc <press_ped_lag>
			}
			break;
 80007a0:	e059      	b.n	8000856 <fsm_automatic_run+0x14a>
		case AUTO_GREEN:
			Display_Led_Green1();
 80007a2:	f7ff fd3d 	bl	8000220 <Display_Led_Green1>
			//dat gia tri bien dem time_value de hien thi tren terminal
			set_time_value(Time_Auto_Green);
 80007a6:	4b65      	ldr	r3, [pc, #404]	; (800093c <fsm_automatic_run+0x230>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f96e 	bl	8000a8c <set_time_value>
			//chuyen trang thai co dk
			if(timer1_flag==1){
 80007b0:	4b61      	ldr	r3, [pc, #388]	; (8000938 <fsm_automatic_run+0x22c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d107      	bne.n	80007c8 <fsm_automatic_run+0xbc>
				status_col=AUTO_YELLOW;
 80007b8:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <fsm_automatic_run+0x224>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Yellow);
 80007be:	4b61      	ldr	r3, [pc, #388]	; (8000944 <fsm_automatic_run+0x238>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fdba 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(0)==1){
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fef1 	bl	80005b0 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d109      	bne.n	80007e8 <fsm_automatic_run+0xdc>
				status_col=MAN_GREEN;
 80007d4:	4b56      	ldr	r3, [pc, #344]	; (8000930 <fsm_automatic_run+0x224>)
 80007d6:	220d      	movs	r2, #13
 80007d8:	601a      	str	r2, [r3, #0]
				status_row=MAN_GREEN;
 80007da:	4b59      	ldr	r3, [pc, #356]	; (8000940 <fsm_automatic_run+0x234>)
 80007dc:	220d      	movs	r2, #13
 80007de:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 80007e0:	f643 2098 	movw	r0, #15000	; 0x3a98
 80007e4:	f7ff fdaa 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fee1 	bl	80005b0 <isButtonPressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d132      	bne.n	800085a <fsm_automatic_run+0x14e>
				press_ped_lag();
 80007f4:	f7ff ff72 	bl	80006dc <press_ped_lag>
			}
			break;
 80007f8:	e02f      	b.n	800085a <fsm_automatic_run+0x14e>
		case AUTO_YELLOW:
			Display_Led_Yellow1();
 80007fa:	f7ff fd25 	bl	8000248 <Display_Led_Yellow1>
			//dat gia tri bien dem time_value de hien thi tren terminal
			set_time_value(Time_Auto_Yellow);
 80007fe:	4b51      	ldr	r3, [pc, #324]	; (8000944 <fsm_automatic_run+0x238>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f942 	bl	8000a8c <set_time_value>
			//chuyen trang thai co dk
			if(timer1_flag==1){
 8000808:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <fsm_automatic_run+0x22c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d107      	bne.n	8000820 <fsm_automatic_run+0x114>
				status_col=AUTO_RED;
 8000810:	4b47      	ldr	r3, [pc, #284]	; (8000930 <fsm_automatic_run+0x224>)
 8000812:	2202      	movs	r2, #2
 8000814:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Red);
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <fsm_automatic_run+0x228>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd8e 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(0)==1){
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fec5 	bl	80005b0 <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d109      	bne.n	8000840 <fsm_automatic_run+0x134>
				status_col=MAN_YELLOW;
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <fsm_automatic_run+0x224>)
 800082e:	220e      	movs	r2, #14
 8000830:	601a      	str	r2, [r3, #0]
				status_row=MAN_YELLOW;
 8000832:	4b43      	ldr	r3, [pc, #268]	; (8000940 <fsm_automatic_run+0x234>)
 8000834:	220e      	movs	r2, #14
 8000836:	601a      	str	r2, [r3, #0]

				setTimer1(MODE_TIME);
 8000838:	f643 2098 	movw	r0, #15000	; 0x3a98
 800083c:	f7ff fd7e 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 8000840:	2003      	movs	r0, #3
 8000842:	f7ff feb5 	bl	80005b0 <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d108      	bne.n	800085e <fsm_automatic_run+0x152>
				press_ped_lag();
 800084c:	f7ff ff46 	bl	80006dc <press_ped_lag>
			}
			break;
 8000850:	e005      	b.n	800085e <fsm_automatic_run+0x152>
//					status_row=INIT;
//				}
//			}
//			break;
		default:
			break;
 8000852:	bf00      	nop
 8000854:	e004      	b.n	8000860 <fsm_automatic_run+0x154>
			break;
 8000856:	bf00      	nop
 8000858:	e002      	b.n	8000860 <fsm_automatic_run+0x154>
			break;
 800085a:	bf00      	nop
 800085c:	e000      	b.n	8000860 <fsm_automatic_run+0x154>
			break;
 800085e:	bf00      	nop
	}
///////////////////////////////////////////////////////////////////////
	//quan ly den tin hieu hang ngang
	switch(status_row){
 8000860:	4b37      	ldr	r3, [pc, #220]	; (8000940 <fsm_automatic_run+0x234>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	2b03      	cmp	r3, #3
 8000868:	d858      	bhi.n	800091c <fsm_automatic_run+0x210>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <fsm_automatic_run+0x164>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000881 	.word	0x08000881
 8000874:	08000897 	.word	0x08000897
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008f3 	.word	0x080008f3
		case INIT:
			Display_Init();
 8000880:	f7ff fc9c 	bl	80001bc <Display_Init>

			//chuyen trang thai ko dk
			status_row=AUTO_GREEN;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <fsm_automatic_run+0x234>)
 8000886:	2203      	movs	r2, #3
 8000888:	601a      	str	r2, [r3, #0]
			setTimer4(Time_Auto_Green);
 800088a:	4b2c      	ldr	r3, [pc, #176]	; (800093c <fsm_automatic_run+0x230>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fda8 	bl	80003e4 <setTimer4>
			break;
 8000894:	e049      	b.n	800092a <fsm_automatic_run+0x21e>
		case AUTO_RED:
			if(flag_ped==1) Display_P_Led_Red1();
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <fsm_automatic_run+0x23c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <fsm_automatic_run+0x196>
 800089e:	f7ff fd29 	bl	80002f4 <Display_P_Led_Red1>

			Display_Led_Red2();
 80008a2:	f7ff fce5 	bl	8000270 <Display_Led_Red2>

			//chuyen trang thai co dk
			if(timer4_flag==1){
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <fsm_automatic_run+0x240>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d138      	bne.n	8000920 <fsm_automatic_run+0x214>
				status_row=AUTO_GREEN;
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <fsm_automatic_run+0x234>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Green);
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <fsm_automatic_run+0x230>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fd93 	bl	80003e4 <setTimer4>
			}
			break;
 80008be:	e02f      	b.n	8000920 <fsm_automatic_run+0x214>
		case AUTO_GREEN:
			if(flag_ped==1) {
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <fsm_automatic_run+0x23c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d103      	bne.n	80008d0 <fsm_automatic_run+0x1c4>
				Display_P_Led_Green1();
 80008c8:	f7ff fd26 	bl	8000318 <Display_P_Led_Green1>
				////////thuc hien buzzer
				//todo
				Buzzer();
 80008cc:	f000 f926 	bl	8000b1c <Buzzer>
			}
			Display_Led_Green2();
 80008d0:	f7ff fcde 	bl	8000290 <Display_Led_Green2>

			//chuyen trang thai co dk
			if(timer4_flag==1){
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <fsm_automatic_run+0x240>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d123      	bne.n	8000924 <fsm_automatic_run+0x218>
				reset_ped_led();//tat den cho nguoi di duong
 80008dc:	f7ff ff0a 	bl	80006f4 <reset_ped_led>
				status_row=AUTO_YELLOW;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <fsm_automatic_run+0x234>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Yellow);
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <fsm_automatic_run+0x238>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fd7a 	bl	80003e4 <setTimer4>
			}
			break;
 80008f0:	e018      	b.n	8000924 <fsm_automatic_run+0x218>
		case AUTO_YELLOW:
			Display_Led_Yellow2();
 80008f2:	f7ff fcdd 	bl	80002b0 <Display_Led_Yellow2>
			if(flag_ped==1) Display_P_Led_Red1();
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <fsm_automatic_run+0x23c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <fsm_automatic_run+0x1f6>
 80008fe:	f7ff fcf9 	bl	80002f4 <Display_P_Led_Red1>
			//chuyen trang thai c o dk
			if(timer4_flag==1){
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <fsm_automatic_run+0x240>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10e      	bne.n	8000928 <fsm_automatic_run+0x21c>
				status_row=AUTO_RED;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <fsm_automatic_run+0x234>)
 800090c:	2202      	movs	r2, #2
 800090e:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Red);
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <fsm_automatic_run+0x228>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fd65 	bl	80003e4 <setTimer4>
			}
			break;
 800091a:	e005      	b.n	8000928 <fsm_automatic_run+0x21c>
		default:
			break;
 800091c:	bf00      	nop
 800091e:	e004      	b.n	800092a <fsm_automatic_run+0x21e>
			break;
 8000920:	bf00      	nop
 8000922:	e002      	b.n	800092a <fsm_automatic_run+0x21e>
			break;
 8000924:	bf00      	nop
 8000926:	e000      	b.n	800092a <fsm_automatic_run+0x21e>
			break;
 8000928:	bf00      	nop
	}
	///////////////////////////////////////////////////////////////////


}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000c8 	.word	0x200000c8
 8000934:	20000004 	.word	0x20000004
 8000938:	200000a4 	.word	0x200000a4
 800093c:	20000008 	.word	0x20000008
 8000940:	200000cc 	.word	0x200000cc
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000000 	.word	0x20000000
 800094c:	200000bc 	.word	0x200000bc

08000950 <fsm_manial_run>:

// fsm_manial_run() thuc hien kiem tra khi nhan button1
// button1 duoc nhan thi chuyen sang trang thai MODE duy tri trong 1 khoang thoi gian(MODE_TIME)
// trong MODE_TIME co the tien hanh chinh sua thoi gian cac LEDs bang button2, button3(duoc hien thuc trong modification_mode.c)
// het MODE_TIME se chuyen lai trang thai 1(automatic)
void fsm_manial_run(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	switch(status_col){
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <fsm_manial_run+0xdc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b0e      	cmp	r3, #14
 800095a:	d040      	beq.n	80009de <fsm_manial_run+0x8e>
 800095c:	2b0e      	cmp	r3, #14
 800095e:	dc5b      	bgt.n	8000a18 <fsm_manial_run+0xc8>
 8000960:	2b0c      	cmp	r3, #12
 8000962:	d002      	beq.n	800096a <fsm_manial_run+0x1a>
 8000964:	2b0d      	cmp	r3, #13
 8000966:	d01d      	beq.n	80009a4 <fsm_manial_run+0x54>
				status_col=MAN_RED;
				setTimer1(MODE_TIME);
			}
			break;
		default:
			break;
 8000968:	e056      	b.n	8000a18 <fsm_manial_run+0xc8>
			BlinkLed(Red);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fbee 	bl	800014c <BlinkLed>
			modification_mode();
 8000970:	f000 fb04 	bl	8000f7c <modification_mode>
			if(timer1_flag==1){
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <fsm_manial_run+0xe0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d105      	bne.n	8000988 <fsm_manial_run+0x38>
				status_col=INIT;
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <fsm_manial_run+0xdc>)
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <fsm_manial_run+0xe4>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe11 	bl	80005b0 <isButtonPressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d143      	bne.n	8000a1c <fsm_manial_run+0xcc>
				status_col=MAN_GREEN;
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <fsm_manial_run+0xdc>)
 8000996:	220d      	movs	r2, #13
 8000998:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 800099a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800099e:	f7ff fccd 	bl	800033c <setTimer1>
			break;
 80009a2:	e03b      	b.n	8000a1c <fsm_manial_run+0xcc>
			BlinkLed(Green);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fbd1 	bl	800014c <BlinkLed>
			modification_mode();
 80009aa:	f000 fae7 	bl	8000f7c <modification_mode>
			if(timer1_flag==1){
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <fsm_manial_run+0xe0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d105      	bne.n	80009c2 <fsm_manial_run+0x72>
				status_col=INIT;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <fsm_manial_run+0xdc>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <fsm_manial_run+0xe4>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fdf4 	bl	80005b0 <isButtonPressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d128      	bne.n	8000a20 <fsm_manial_run+0xd0>
				status_col=MAN_YELLOW;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <fsm_manial_run+0xdc>)
 80009d0:	220e      	movs	r2, #14
 80009d2:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 80009d4:	f643 2098 	movw	r0, #15000	; 0x3a98
 80009d8:	f7ff fcb0 	bl	800033c <setTimer1>
			break;
 80009dc:	e020      	b.n	8000a20 <fsm_manial_run+0xd0>
			BlinkLed(Yellow);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff fbb4 	bl	800014c <BlinkLed>
			modification_mode();
 80009e4:	f000 faca 	bl	8000f7c <modification_mode>
			if(timer1_flag==1){
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <fsm_manial_run+0xe0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <fsm_manial_run+0xac>
				status_col=INIT;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <fsm_manial_run+0xdc>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <fsm_manial_run+0xe4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fdd7 	bl	80005b0 <isButtonPressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d10d      	bne.n	8000a24 <fsm_manial_run+0xd4>
				status_col=MAN_RED;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <fsm_manial_run+0xdc>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 8000a0e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000a12:	f7ff fc93 	bl	800033c <setTimer1>
			break;
 8000a16:	e005      	b.n	8000a24 <fsm_manial_run+0xd4>
			break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <fsm_manial_run+0xd6>
			break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <fsm_manial_run+0xd6>
			break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <fsm_manial_run+0xd6>
			break;
 8000a24:	bf00      	nop
	}
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000c8 	.word	0x200000c8
 8000a30:	200000a4 	.word	0x200000a4
 8000a34:	200000cc 	.word	0x200000cc

08000a38 <set_Time_Auto_Red>:
int Time_Auto_Red =5000;
int Time_Auto_Green =2000;
int Time_Auto_Yellow = 3000;


void set_Time_Auto_Red(int duration){
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	Time_Auto_Red = duration;
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <set_Time_Auto_Red+0x18>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000004 	.word	0x20000004

08000a54 <set_Time_Auto_Green>:
void set_Time_Auto_Green(int duration){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	Time_Auto_Green = duration;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <set_Time_Auto_Green+0x18>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000008 	.word	0x20000008

08000a70 <set_Time_Auto_Yellow>:
void set_Time_Auto_Yellow(int duration){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	Time_Auto_Yellow = duration;
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <set_Time_Auto_Yellow+0x18>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	2000000c 	.word	0x2000000c

08000a8c <set_time_value>:


int time_value=0;
void set_time_value(int duration){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	time_value=duration;
 8000a94:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <set_time_value+0x18>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	200000d0 	.word	0x200000d0

08000aa8 <HAL_UART_RxCpltCallback>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <HAL_UART_RxCpltCallback+0x5c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d11f      	bne.n	8000afa <HAL_UART_RxCpltCallback+0x52>

		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000aba:	2332      	movs	r3, #50	; 0x32
 8000abc:	2201      	movs	r2, #1
 8000abe:	4912      	ldr	r1, [pc, #72]	; (8000b08 <HAL_UART_RxCpltCallback+0x60>)
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <HAL_UART_RxCpltCallback+0x64>)
 8000ac2:	f002 fc04 	bl	80032ce <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_UART_RxCpltCallback+0x68>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	b2d1      	uxtb	r1, r2
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_RxCpltCallback+0x68>)
 8000ad0:	7011      	strb	r1, [r2, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_UART_RxCpltCallback+0x60>)
 8000ad6:	7819      	ldrb	r1, [r3, #0]
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ada:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_UART_RxCpltCallback+0x68>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b1e      	cmp	r3, #30
 8000ae2:	d102      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x42>
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_UART_RxCpltCallback+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_UART_RxCpltCallback+0x70>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4905      	ldr	r1, [pc, #20]	; (8000b08 <HAL_UART_RxCpltCallback+0x60>)
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_UART_RxCpltCallback+0x64>)
 8000af6:	f002 fc7c 	bl	80033f2 <HAL_UART_Receive_IT>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	200000d4 	.word	0x200000d4
 8000b0c:	200001f4 	.word	0x200001f4
 8000b10:	200000d5 	.word	0x200000d5
 8000b14:	2000018c 	.word	0x2000018c
 8000b18:	200000d6 	.word	0x200000d6

08000b1c <Buzzer>:


//int x=0;
void Buzzer(){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
//		setTimer2(1000);
//		x+=50;
//		if(x==550) _HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,x);
//	}
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fc35 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f875 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 f9a1 	bl	8000e7c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b3a:	f000 f8ff 	bl	8000d3c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b3e:	f000 f8b1 	bl	8000ca4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b42:	f000 f971 	bl	8000e28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b46:	2100      	movs	r1, #0
 8000b48:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <main+0xd0>)
 8000b4a:	f001 fd0f 	bl	800256c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b4e:	482b      	ldr	r0, [pc, #172]	; (8000bfc <main+0xd4>)
 8000b50:	f001 fc62 	bl	8002418 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8000b54:	2201      	movs	r2, #1
 8000b56:	492a      	ldr	r1, [pc, #168]	; (8000c00 <main+0xd8>)
 8000b58:	482a      	ldr	r0, [pc, #168]	; (8000c04 <main+0xdc>)
 8000b5a:	f002 fc4a 	bl	80033f2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status_col=INIT;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <main+0xe0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
  status_row=INIT;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <main+0xe4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]

  setTimer1(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f7ff fbe6 	bl	800033c <setTimer1>
  setTimer2(10);
 8000b70:	200a      	movs	r0, #10
 8000b72:	f7ff fbff 	bl	8000374 <setTimer2>
  setTimer3(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f7ff fc18 	bl	80003ac <setTimer3>
  setTimer5(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f7ff fc4d 	bl	800041c <setTimer5>

  char str[20];
  int speaker_intensity=0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
//  set_time_value() duoc dat trong fsm_automatic
  while (1)
  {
	  fsm_automatic_run();
 8000b86:	f7ff fdc1 	bl	800070c <fsm_automatic_run>
	  fsm_manial_run();
 8000b8a:	f7ff fee1 	bl	8000950 <fsm_manial_run>

//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,10);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100);
//	  HAL_Delay(1000);
	  if(timer2_flag==1){
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <main+0xe8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d113      	bne.n	8000bbe <main+0x96>
		setTimer2(1000);
 8000b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9a:	f7ff fbeb 	bl	8000374 <setTimer2>
		speaker_intensity+=50;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3332      	adds	r3, #50	; 0x32
 8000ba2:	617b      	str	r3, [r7, #20]
		if(speaker_intensity==550) __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f240 2226 	movw	r2, #550	; 0x226
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d103      	bne.n	8000bb6 <main+0x8e>
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <main+0xd0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,speaker_intensity);
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <main+0xd0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(timer3_flag==1){
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <main+0xec>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d1df      	bne.n	8000b86 <main+0x5e>
		setTimer3(1000);
 8000bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bca:	f7ff fbef 	bl	80003ac <setTimer3>
		time_value--;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <main+0xf0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <main+0xf0>)
 8000bd6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str,"%d\r\n",time_value), 1000);
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <main+0xf0>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	463b      	mov	r3, r7
 8000bde:	490f      	ldr	r1, [pc, #60]	; (8000c1c <main+0xf4>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f891 	bl	8003d08 <siprintf>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4639      	mov	r1, r7
 8000bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <main+0xdc>)
 8000bf2:	f002 fb6c 	bl	80032ce <HAL_UART_Transmit>
	  fsm_automatic_run();
 8000bf6:	e7c6      	b.n	8000b86 <main+0x5e>
 8000bf8:	20000144 	.word	0x20000144
 8000bfc:	200001ac 	.word	0x200001ac
 8000c00:	200000d4 	.word	0x200000d4
 8000c04:	200001f4 	.word	0x200001f4
 8000c08:	200000c8 	.word	0x200000c8
 8000c0c:	200000cc 	.word	0x200000cc
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	200000d0 	.word	0x200000d0
 8000c1c:	08004594 	.word	0x08004594

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	; 0x40
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	2228      	movs	r2, #40	; 0x28
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f862 	bl	8003cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c46:	2301      	movs	r3, #1
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c56:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 ff6f 	bl	8001b44 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c6c:	f000 f980 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f9da 	bl	8002044 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c96:	f000 f96b 	bl	8000f70 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3740      	adds	r7, #64	; 0x40
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cca:	223f      	movs	r2, #63	; 0x3f
 8000ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cea:	f001 fb45 	bl	8002378 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf4:	f000 f93c 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000d06:	f001 fe99 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d10:	f000 f92e 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000d22:	f002 fa17 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d2c:	f000 f920 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001ac 	.word	0x200001ac

08000d3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <MX_TIM3_Init+0xe8>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d74:	223f      	movs	r2, #63	; 0x3f
 8000d76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d92:	4823      	ldr	r0, [pc, #140]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000d94:	f001 faf0 	bl	8002378 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d9e:	f000 f8e7 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000db0:	f001 fe44 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dba:	f000 f8d9 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000dc0:	f001 fb7c 	bl	80024bc <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dca:	f000 f8d1 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000dde:	f002 f9b9 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000de8:	f000 f8c2 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000e04:	f001 fd5c 	bl	80028c0 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e0e:	f000 f8af 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MX_TIM3_Init+0xe4>)
 8000e14:	f000 f9a0 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000e18:	bf00      	nop
 8000e1a:	3738      	adds	r7, #56	; 0x38
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000144 	.word	0x20000144
 8000e24:	40000400 	.word	0x40000400

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_USART2_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f002 f9e8 	bl	8003234 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f881 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200001f4 	.word	0x200001f4
 8000e78:	40004400 	.word	0x40004400

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_GPIO_Init+0xd0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8000ec6:	4822      	ldr	r0, [pc, #136]	; (8000f50 <MX_GPIO_Init+0xd4>)
 8000ec8:	f000 fe23 	bl	8001b12 <HAL_GPIO_WritePin>
                          |pled1_Pin|pled2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <MX_GPIO_Init+0xd8>)
 8000ed4:	f000 fe1d 	bl	8001b12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8000ed8:	2313      	movs	r3, #19
 8000eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_GPIO_Init+0xd8>)
 8000eec:	f000 fc76 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	4813      	ldr	r0, [pc, #76]	; (8000f50 <MX_GPIO_Init+0xd4>)
 8000f04:	f000 fc6a 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED1_Pin LED2_Pin LED4_Pin LED3_Pin
                           pled1_Pin pled2_Pin */
  GPIO_InitStruct.Pin = P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8000f08:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8000f0c:	60bb      	str	r3, [r7, #8]
                          |pled1_Pin|pled2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2302      	movs	r3, #2
 8000f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <MX_GPIO_Init+0xd4>)
 8000f22:	f000 fc5b 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = P_LED2_Pin|LED1_Pin;
 8000f26:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0xd8>)
 8000f40:	f000 fc4c 	bl	80017dc <HAL_GPIO_Init>

}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010800 	.word	0x40010800

08000f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f60:	f7ff fa78 	bl	8000454 <timerRun>
	getKeyInput();
 8000f64:	f7ff fb3e 	bl	80005e4 <getKeyInput>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <modification_mode>:
#include "modification_mode.h"
#include "global.h"
#include "button.h"


void modification_mode(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	//cap nhat cac gia tri Time_Auto_... khi nhan button2
	switch(status_col){
 8000f80:	4b39      	ldr	r3, [pc, #228]	; (8001068 <modification_mode+0xec>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b0e      	cmp	r3, #14
 8000f86:	d03e      	beq.n	8001006 <modification_mode+0x8a>
 8000f88:	2b0e      	cmp	r3, #14
 8000f8a:	dc58      	bgt.n	800103e <modification_mode+0xc2>
 8000f8c:	2b0c      	cmp	r3, #12
 8000f8e:	d002      	beq.n	8000f96 <modification_mode+0x1a>
 8000f90:	2b0d      	cmp	r3, #13
 8000f92:	d01c      	beq.n	8000fce <modification_mode+0x52>
			}

			//updateClockBuffer(Time_Auto_Yellow/1000,4);
			break;
		default:
			break;
 8000f94:	e053      	b.n	800103e <modification_mode+0xc2>
			if(isButtonPressed(1)==1){
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fb0a 	bl	80005b0 <isButtonPressed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d14f      	bne.n	8001042 <modification_mode+0xc6>
				Time_Auto_Red = (Time_Auto_Red+1000)%100000;//ms
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <modification_mode+0xf0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <modification_mode+0xf4>)
 8000fac:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb0:	1359      	asrs	r1, r3, #13
 8000fb2:	17d3      	asrs	r3, r2, #31
 8000fb4:	1acb      	subs	r3, r1, r3
 8000fb6:	492f      	ldr	r1, [pc, #188]	; (8001074 <modification_mode+0xf8>)
 8000fb8:	fb01 f303 	mul.w	r3, r1, r3
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a2b      	ldr	r2, [pc, #172]	; (800106c <modification_mode+0xf0>)
 8000fc0:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Red(Time_Auto_Red);
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <modification_mode+0xf0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fd36 	bl	8000a38 <set_Time_Auto_Red>
			break;
 8000fcc:	e039      	b.n	8001042 <modification_mode+0xc6>
			if(isButtonPressed(1)==1){
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff faee 	bl	80005b0 <isButtonPressed>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d135      	bne.n	8001046 <modification_mode+0xca>
				Time_Auto_Green = (Time_Auto_Green+1000)%100000;//ms
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <modification_mode+0xfc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <modification_mode+0xf4>)
 8000fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe8:	1359      	asrs	r1, r3, #13
 8000fea:	17d3      	asrs	r3, r2, #31
 8000fec:	1acb      	subs	r3, r1, r3
 8000fee:	4921      	ldr	r1, [pc, #132]	; (8001074 <modification_mode+0xf8>)
 8000ff0:	fb01 f303 	mul.w	r3, r1, r3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <modification_mode+0xfc>)
 8000ff8:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Green(Time_Auto_Green);
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <modification_mode+0xfc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fd28 	bl	8000a54 <set_Time_Auto_Green>
			break;
 8001004:	e01f      	b.n	8001046 <modification_mode+0xca>
			if(isButtonPressed(1)==1){
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fad2 	bl	80005b0 <isButtonPressed>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d11b      	bne.n	800104a <modification_mode+0xce>
				Time_Auto_Yellow = (Time_Auto_Yellow+1000)%100000;//ms
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <modification_mode+0x100>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <modification_mode+0xf4>)
 800101c:	fb83 1302 	smull	r1, r3, r3, r2
 8001020:	1359      	asrs	r1, r3, #13
 8001022:	17d3      	asrs	r3, r2, #31
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	4913      	ldr	r1, [pc, #76]	; (8001074 <modification_mode+0xf8>)
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <modification_mode+0x100>)
 8001030:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Yellow(Time_Auto_Yellow);
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <modification_mode+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd1a 	bl	8000a70 <set_Time_Auto_Yellow>
			break;
 800103c:	e005      	b.n	800104a <modification_mode+0xce>
			break;
 800103e:	bf00      	nop
 8001040:	e004      	b.n	800104c <modification_mode+0xd0>
			break;
 8001042:	bf00      	nop
 8001044:	e002      	b.n	800104c <modification_mode+0xd0>
			break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <modification_mode+0xd0>
			break;
 800104a:	bf00      	nop
	}
	//nhan button3 de ket thuc mode va reset lại hệ thống
	if(isButtonPressed(2)==1){
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff faaf 	bl	80005b0 <isButtonPressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <modification_mode+0xe8>
		status_col=INIT;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <modification_mode+0xec>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
		status_row=INIT;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <modification_mode+0x104>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
	}
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000c8 	.word	0x200000c8
 800106c:	20000004 	.word	0x20000004
 8001070:	14f8b589 	.word	0x14f8b589
 8001074:	000186a0 	.word	0x000186a0
 8001078:	20000008 	.word	0x20000008
 800107c:	2000000c 	.word	0x2000000c
 8001080:	200000cc 	.word	0x200000cc

08001084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_MspInit+0x5c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_MspInit+0x60>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_MspInit+0x60>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d114      	bne.n	8001124 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201c      	movs	r0, #28
 8001118:	f000 fa79 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111c:	201c      	movs	r0, #28
 800111e:	f000 fa92 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001122:	e010      	b.n	8001146 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0x6c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d10b      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40000400 	.word	0x40000400

08001158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_TIM_MspPostInit+0x58>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d117      	bne.n	80011a8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_MspPostInit+0x5c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_TIM_MspPostInit+0x5c>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_TIM_MspPostInit+0x5c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_TIM_MspPostInit+0x60>)
 80011a4:	f000 fb1a 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40000400 	.word	0x40000400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010800 	.word	0x40010800

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d137      	bne.n	800124c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_UART_MspInit+0x9c>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_UART_MspInit+0x9c>)
 80011e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e6:	61d3      	str	r3, [r2, #28]
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_UART_MspInit+0x9c>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x9c>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x9c>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0x9c>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_UART_MspInit+0xa0>)
 8001220:	f000 fadc 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001224:	2308      	movs	r3, #8
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <HAL_UART_MspInit+0xa0>)
 8001238:	f000 fad0 	bl	80017dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2026      	movs	r0, #38	; 0x26
 8001242:	f000 f9e4 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001246:	2026      	movs	r0, #38	; 0x26
 8001248:	f000 f9fd 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40004400 	.word	0x40004400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010800 	.word	0x40010800

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8bf 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM2_IRQHandler+0x10>)
 80012b6:	f001 f9fb 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001ac 	.word	0x200001ac

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f002 f8c3 	bl	8003454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001f4 	.word	0x200001f4

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f002 fccc 	bl	8003ca4 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20005000 	.word	0x20005000
 8001338:	00000400 	.word	0x00000400
 800133c:	200000d8 	.word	0x200000d8
 8001340:	20000250 	.word	0x20000250

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001376:	f7ff ffe5 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f002 fc99 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff fbd3 	bl	8000b28 <main>
  bx lr
 8001382:	4770      	bx	lr
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800138c:	08004600 	.word	0x08004600
  ldr r2, =_sbss
 8001390:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001394:	2000024c 	.word	0x2000024c

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f923 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fe64 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93b 	bl	8001662 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f903 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000010 	.word	0x20000010
 8001420:	20000018 	.word	0x20000018
 8001424:	20000014 	.word	0x20000014

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000018 	.word	0x20000018
 8001448:	20000238 	.word	0x20000238

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000238 	.word	0x20000238

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2d 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff42 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff35 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168c:	2b02      	cmp	r3, #2
 800168e:	d008      	beq.n	80016a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e020      	b.n	80016e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 020e 	bic.w	r2, r2, #14
 80016b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001702:	2b02      	cmp	r3, #2
 8001704:	d005      	beq.n	8001712 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2204      	movs	r2, #4
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e051      	b.n	80017b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 020e 	bic.w	r2, r2, #14
 8001720:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <HAL_DMA_Abort_IT+0xd0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d029      	beq.n	8001790 <HAL_DMA_Abort_IT+0xa0>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <HAL_DMA_Abort_IT+0xd4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d022      	beq.n	800178c <HAL_DMA_Abort_IT+0x9c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_DMA_Abort_IT+0xd8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d01a      	beq.n	8001786 <HAL_DMA_Abort_IT+0x96>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_DMA_Abort_IT+0xdc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d012      	beq.n	8001780 <HAL_DMA_Abort_IT+0x90>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <HAL_DMA_Abort_IT+0xe0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00a      	beq.n	800177a <HAL_DMA_Abort_IT+0x8a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_DMA_Abort_IT+0xe4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d102      	bne.n	8001774 <HAL_DMA_Abort_IT+0x84>
 800176e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001772:	e00e      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 8001774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001778:	e00b      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 800177a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177e:	e008      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	e005      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	e002      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 800178c:	2310      	movs	r3, #16
 800178e:	e000      	b.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 8001790:	2301      	movs	r3, #1
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_DMA_Abort_IT+0xe8>)
 8001794:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	4798      	blx	r3
    } 
  }
  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020008 	.word	0x40020008
 80017c4:	4002001c 	.word	0x4002001c
 80017c8:	40020030 	.word	0x40020030
 80017cc:	40020044 	.word	0x40020044
 80017d0:	40020058 	.word	0x40020058
 80017d4:	4002006c 	.word	0x4002006c
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e169      	b.n	8001ac4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f0:	2201      	movs	r2, #1
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8158 	bne.w	8001abe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a9a      	ldr	r2, [pc, #616]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d05e      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001818:	4a98      	ldr	r2, [pc, #608]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d875      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800181e:	4a98      	ldr	r2, [pc, #608]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d058      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001824:	4a96      	ldr	r2, [pc, #600]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d86f      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800182a:	4a96      	ldr	r2, [pc, #600]	; (8001a84 <HAL_GPIO_Init+0x2a8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d052      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001830:	4a94      	ldr	r2, [pc, #592]	; (8001a84 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d869      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001836:	4a94      	ldr	r2, [pc, #592]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04c      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 800183c:	4a92      	ldr	r2, [pc, #584]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d863      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001842:	4a92      	ldr	r2, [pc, #584]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d046      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001848:	4a90      	ldr	r2, [pc, #576]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d85d      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d82a      	bhi.n	80018a8 <HAL_GPIO_Init+0xcc>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d859      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <HAL_GPIO_Init+0x80>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018b1 	.word	0x080018b1
 8001864:	080018c3 	.word	0x080018c3
 8001868:	08001905 	.word	0x08001905
 800186c:	0800190b 	.word	0x0800190b
 8001870:	0800190b 	.word	0x0800190b
 8001874:	0800190b 	.word	0x0800190b
 8001878:	0800190b 	.word	0x0800190b
 800187c:	0800190b 	.word	0x0800190b
 8001880:	0800190b 	.word	0x0800190b
 8001884:	0800190b 	.word	0x0800190b
 8001888:	0800190b 	.word	0x0800190b
 800188c:	0800190b 	.word	0x0800190b
 8001890:	0800190b 	.word	0x0800190b
 8001894:	0800190b 	.word	0x0800190b
 8001898:	0800190b 	.word	0x0800190b
 800189c:	0800190b 	.word	0x0800190b
 80018a0:	080018b9 	.word	0x080018b9
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	4a79      	ldr	r2, [pc, #484]	; (8001a90 <HAL_GPIO_Init+0x2b4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ae:	e02c      	b.n	800190a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e029      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	3304      	adds	r3, #4
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	e024      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	3308      	adds	r3, #8
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e01f      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	330c      	adds	r3, #12
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e01a      	b.n	800190c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018de:	2304      	movs	r3, #4
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e013      	b.n	800190c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ec:	2308      	movs	r3, #8
 80018ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	611a      	str	r2, [r3, #16]
          break;
 80018f6:	e009      	b.n	800190c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	615a      	str	r2, [r3, #20]
          break;
 8001902:	e003      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x130>
          break;
 800190a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d801      	bhi.n	8001916 <HAL_GPIO_Init+0x13a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <HAL_GPIO_Init+0x13e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d802      	bhi.n	8001928 <HAL_GPIO_Init+0x14c>
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x152>
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	3b08      	subs	r3, #8
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	210f      	movs	r1, #15
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b1 	beq.w	8001abe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_GPIO_Init+0x2b8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x2b8>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_GPIO_Init+0x2b8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001974:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a40      	ldr	r2, [pc, #256]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1ec>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3f      	ldr	r2, [pc, #252]	; (8001aa0 <HAL_GPIO_Init+0x2c4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1e8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <HAL_GPIO_Init+0x2c8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e0>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019bc:	2304      	movs	r3, #4
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c8:	2300      	movs	r3, #0
 80019ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019da:	492f      	ldr	r1, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	492c      	ldr	r1, [pc, #176]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4928      	ldr	r1, [pc, #160]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4922      	ldr	r1, [pc, #136]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	491e      	ldr	r1, [pc, #120]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4918      	ldr	r1, [pc, #96]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4914      	ldr	r1, [pc, #80]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
 8001a78:	e021      	b.n	8001abe <HAL_GPIO_Init+0x2e2>
 8001a7a:	bf00      	nop
 8001a7c:	10320000 	.word	0x10320000
 8001a80:	10310000 	.word	0x10310000
 8001a84:	10220000 	.word	0x10220000
 8001a88:	10210000 	.word	0x10210000
 8001a8c:	10120000 	.word	0x10120000
 8001a90:	10110000 	.word	0x10110000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40011400 	.word	0x40011400
 8001aac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_GPIO_Init+0x304>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	4909      	ldr	r1, [pc, #36]	; (8001ae0 <HAL_GPIO_Init+0x304>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f ae8e 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	372c      	adds	r7, #44	; 0x2c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b22:	787b      	ldrb	r3, [r7, #1]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2e:	e003      	b.n	8001b38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e26c      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8087 	beq.w	8001c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b64:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d00c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b70:	4b8f      	ldr	r3, [pc, #572]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d112      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
 8001b7c:	4b8c      	ldr	r3, [pc, #560]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d10b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d06c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x12c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d168      	bne.n	8001c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e246      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x76>
 8001bac:	4b80      	ldr	r3, [pc, #512]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7f      	ldr	r2, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e02e      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b7b      	ldr	r3, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7a      	ldr	r2, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0xbc>
 8001be6:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a71      	ldr	r2, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001c00:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a67      	ldr	r2, [pc, #412]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc14 	bl	800144c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc10 	bl	800144c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1fa      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe4>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc00 	bl	800144c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fbfc 	bl	800144c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1e6      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x10c>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x176>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1ba      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4939      	ldr	r1, [pc, #228]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fbb5 	bl	800144c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fbb1 	bl	800144c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e19b      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4927      	ldr	r1, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb94 	bl	800144c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb90 	bl	800144c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e17a      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d03a      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb74 	bl	800144c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb70 	bl	800144c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e15a      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 fad8 	bl	800233c <RCC_Delay>
 8001d8c:	e01c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fb5a 	bl	800144c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9a:	e00f      	b.n	8001dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fb56 	bl	800144c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d908      	bls.n	8001dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e140      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	42420000 	.word	0x42420000
 8001db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	4b9e      	ldr	r3, [pc, #632]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e9      	bne.n	8001d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a6 	beq.w	8001f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b97      	ldr	r3, [pc, #604]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a93      	ldr	r2, [pc, #588]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b91      	ldr	r3, [pc, #580]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b8e      	ldr	r3, [pc, #568]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a8a      	ldr	r2, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb17 	bl	800144c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff fb13 	bl	800144c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	; 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0fd      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x312>
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a7a      	ldr	r2, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e02d      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a72      	ldr	r2, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	e01c      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_OscConfig+0x356>
 8001e80:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a6c      	ldr	r2, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a69      	ldr	r2, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6213      	str	r3, [r2, #32]
 8001e98:	e00b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a63      	ldr	r2, [pc, #396]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d015      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fac7 	bl	800144c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fac3 	bl	800144c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0ab      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ee      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x37e>
 8001ee4:	e014      	b.n	8001f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fab1 	bl	800144c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff faad 	bl	800144c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e095      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1ee      	bne.n	8001eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8081 	beq.w	800202e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d061      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d146      	bne.n	8001fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fa81 	bl	800144c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fa7d 	bl	800144c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e067      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d108      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	492d      	ldr	r1, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a19      	ldr	r1, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	4927      	ldr	r1, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fa51 	bl	800144c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fa4d 	bl	800144c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e037      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x46a>
 8001fcc:	e02f      	b.n	800202e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fa3a 	bl	800144c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fa36 	bl	800144c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e020      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x498>
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e013      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	42420060 	.word	0x42420060

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4965      	ldr	r1, [pc, #404]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7ff f98a 	bl	800144c <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7ff f986 	bl	800144c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e053      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d210      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f8e8 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	080045ac 	.word	0x080045ac
 8002210:	20000010 	.word	0x20000010
 8002214:	20000014 	.word	0x20000014

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b490      	push	{r4, r7}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002220:	1d3c      	adds	r4, r7, #4
 8002222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002228:	f240 2301 	movw	r3, #513	; 0x201
 800222c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x40>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x46>
 8002256:	e02d      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	e02d      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800226a:	4413      	add	r3, r2
 800226c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002270:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	0c5b      	lsrs	r3, r3, #17
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800228a:	4413      	add	r3, r2
 800228c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002290:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002296:	fb02 f203 	mul.w	r2, r2, r3
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	e004      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	623b      	str	r3, [r7, #32]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b6:	623b      	str	r3, [r7, #32]
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc90      	pop	{r4, r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	0800459c 	.word	0x0800459c
 80022cc:	40021000 	.word	0x40021000
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000010 	.word	0x20000010

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	080045bc 	.word	0x080045bc

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffde 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	080045bc 	.word	0x080045bc

0800233c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <RCC_Delay+0x34>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <RCC_Delay+0x38>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002358:	bf00      	nop
  }
  while (Delay --);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <RCC_Delay+0x1c>
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000010 	.word	0x20000010
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fea2 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fc28 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e03a      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_Base_Start_IT+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d009      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d010      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	e007      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e041      	b.n	8002552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f839 	bl	800255a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 fb86 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x24>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e022      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d109      	bne.n	80025aa <HAL_TIM_PWM_Start+0x3e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e015      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d109      	bne.n	80025c4 <HAL_TIM_PWM_Start+0x58>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e05e      	b.n	800269c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	e013      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x92>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025fc:	e00b      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260c:	e003      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fd74 	bl	800310c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_TIM_PWM_Start+0x138>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d107      	bne.n	800263e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_TIM_PWM_Start+0x138>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_TIM_PWM_Start+0xfa>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d009      	beq.n	8002666 <HAL_TIM_PWM_Start+0xfa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_TIM_PWM_Start+0x13c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_TIM_PWM_Start+0xfa>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_TIM_PWM_Start+0x140>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b06      	cmp	r3, #6
 8002676:	d010      	beq.n	800269a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	e007      	b.n	800269a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa6f 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa62 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa71 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0204 	mvn.w	r2, #4
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa45 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa38 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fa47 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0208 	mvn.w	r2, #8
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2204      	movs	r2, #4
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa1b 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa0e 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa1d 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0210 	mvn.w	r2, #16
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9f1 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9e4 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f9f3 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0201 	mvn.w	r2, #1
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fb92 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fce1 	bl	8003222 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9b7 	bl	8002bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0220 	mvn.w	r2, #32
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fcac 	bl	8003210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0ac      	b.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0x174>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	f200 809f 	bhi.w	8002a28 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002925 	.word	0x08002925
 80028f4:	08002a29 	.word	0x08002a29
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	08002965 	.word	0x08002965
 8002904:	08002a29 	.word	0x08002a29
 8002908:	08002a29 	.word	0x08002a29
 800290c:	08002a29 	.word	0x08002a29
 8002910:	080029a7 	.word	0x080029a7
 8002914:	08002a29 	.word	0x08002a29
 8002918:	08002a29 	.word	0x08002a29
 800291c:	08002a29 	.word	0x08002a29
 8002920:	080029e7 	.word	0x080029e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f9d0 	bl	8002cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0208 	orr.w	r2, r2, #8
 800293e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
      break;
 8002962:	e062      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa16 	bl	8002d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6999      	ldr	r1, [r3, #24]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	021a      	lsls	r2, r3, #8
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	619a      	str	r2, [r3, #24]
      break;
 80029a4:	e041      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fa5f 	bl	8002e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0208 	orr.w	r2, r2, #8
 80029c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0204 	bic.w	r2, r2, #4
 80029d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69d9      	ldr	r1, [r3, #28]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
      break;
 80029e4:	e021      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 faa9 	bl	8002f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69d9      	ldr	r1, [r3, #28]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	61da      	str	r2, [r3, #28]
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIM_ConfigClockSource+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e0b3      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x180>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d03e      	beq.n	8002b0c <HAL_TIM_ConfigClockSource+0xd0>
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	f200 8087 	bhi.w	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9a:	f000 8085 	beq.w	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d87f      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002aa4:	2b70      	cmp	r3, #112	; 0x70
 8002aa6:	d01a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xa2>
 8002aa8:	2b70      	cmp	r3, #112	; 0x70
 8002aaa:	d87b      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002aac:	2b60      	cmp	r3, #96	; 0x60
 8002aae:	d050      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x116>
 8002ab0:	2b60      	cmp	r3, #96	; 0x60
 8002ab2:	d877      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002ab4:	2b50      	cmp	r3, #80	; 0x50
 8002ab6:	d03c      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0xf6>
 8002ab8:	2b50      	cmp	r3, #80	; 0x50
 8002aba:	d873      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d058      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x136>
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d86f      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d064      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x156>
 8002ac8:	2b30      	cmp	r3, #48	; 0x30
 8002aca:	d86b      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d060      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x156>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d867      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05c      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x156>
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d05a      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002adc:	e062      	b.n	8002ba4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f000 faee 	bl	80030ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	609a      	str	r2, [r3, #8]
      break;
 8002b0a:	e04e      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f000 fad7 	bl	80030ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	609a      	str	r2, [r3, #8]
      break;
 8002b30:	e03b      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 fa4e 	bl	8002fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2150      	movs	r1, #80	; 0x50
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 faa5 	bl	800309a <TIM_ITRx_SetConfig>
      break;
 8002b50:	e02b      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f000 fa6c 	bl	800303c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2160      	movs	r1, #96	; 0x60
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fa95 	bl	800309a <TIM_ITRx_SetConfig>
      break;
 8002b70:	e01b      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f000 fa2e 	bl	8002fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2140      	movs	r1, #64	; 0x40
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa85 	bl	800309a <TIM_ITRx_SetConfig>
      break;
 8002b90:	e00b      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f000 fa7c 	bl	800309a <TIM_ITRx_SetConfig>
        break;
 8002ba2:	e002      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 0302 	bic.w	r3, r3, #2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <TIM_OC1_SetConfig+0xc8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d10c      	bne.n	8002d46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0308 	bic.w	r3, r3, #8
 8002d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <TIM_OC1_SetConfig+0xc8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00

08002d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0210 	bic.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0320 	bic.w	r3, r3, #32
 8002de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <TIM_OC2_SetConfig+0xd0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10d      	bne.n	8002e18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <TIM_OC2_SetConfig+0xd0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d113      	bne.n	8002e48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00

08002e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <TIM_OC3_SetConfig+0xd0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10d      	bne.n	8002eea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <TIM_OC3_SetConfig+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d113      	bne.n	8002f1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	621a      	str	r2, [r3, #32]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <TIM_OC4_SetConfig+0x98>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d109      	bne.n	8002fb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	621a      	str	r2, [r3, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00

08002fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0201 	bic.w	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 030a 	bic.w	r3, r3, #10
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	621a      	str	r2, [r3, #32]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 0210 	bic.w	r2, r3, #16
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003066:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	031b      	lsls	r3, r3, #12
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003078:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	621a      	str	r2, [r3, #32]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f043 0307 	orr.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b087      	sub	sp, #28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	021a      	lsls	r2, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	609a      	str	r2, [r3, #8]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2201      	movs	r2, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	43db      	mvns	r3, r3
 800312e:	401a      	ands	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003168:	2302      	movs	r3, #2
 800316a:	e046      	b.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a16      	ldr	r2, [pc, #88]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d009      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10c      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800

08003210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e03f      	b.n	80032c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd ffae 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fc85 	bl	8003b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b08a      	sub	sp, #40	; 0x28
 80032d2:	af02      	add	r7, sp, #8
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d17c      	bne.n	80033e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_UART_Transmit+0x2c>
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e075      	b.n	80033ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_UART_Transmit+0x3e>
 8003308:	2302      	movs	r3, #2
 800330a:	e06e      	b.n	80033ea <HAL_UART_Transmit+0x11c>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2221      	movs	r2, #33	; 0x21
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003322:	f7fe f893 	bl	800144c <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d108      	bne.n	8003350 <HAL_UART_Transmit+0x82>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e003      	b.n	8003358 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003360:	e02a      	b.n	80033b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa38 	bl	80037e2 <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e036      	b.n	80033ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	3302      	adds	r3, #2
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e007      	b.n	80033aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1cf      	bne.n	8003362 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa08 	bl	80037e2 <UART_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e006      	b.n	80033ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d11d      	bne.n	8003448 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Receive_IT+0x26>
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e016      	b.n	800344a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_UART_Receive_IT+0x38>
 8003426:	2302      	movs	r3, #2
 8003428:	e00f      	b.n	800344a <HAL_UART_Receive_IT+0x58>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	461a      	mov	r2, r3
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa19 	bl	8003876 <UART_Start_Receive_IT>
 8003444:	4603      	mov	r3, r0
 8003446:	e000      	b.n	800344a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003448:	2302      	movs	r3, #2
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_UART_IRQHandler+0x52>
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fac9 	bl	8003a36 <UART_Receive_IT>
      return;
 80034a4:	e17b      	b.n	800379e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80b1 	beq.w	8003610 <HAL_UART_IRQHandler+0x1bc>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_UART_IRQHandler+0x70>
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a6 	beq.w	8003610 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_UART_IRQHandler+0x90>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_UART_IRQHandler+0xb0>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0202 	orr.w	r2, r3, #2
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_UART_IRQHandler+0xd0>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00f      	beq.n	800354e <HAL_UART_IRQHandler+0xfa>
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_UART_IRQHandler+0xee>
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0208 	orr.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 811e 	beq.w	8003794 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_UART_IRQHandler+0x11e>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fa62 	bl	8003a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <HAL_UART_IRQHandler+0x146>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d031      	beq.n	80035fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9a4 	bl	80038e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d023      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d013      	beq.n	80035ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4a76      	ldr	r2, [pc, #472]	; (80037a4 <HAL_UART_IRQHandler+0x350>)
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe f88c 	bl	80016f0 <HAL_DMA_Abort_IT>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e8:	4610      	mov	r0, r2
 80035ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	e00e      	b.n	800360c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8e3 	bl	80037ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	e00a      	b.n	800360c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8df 	bl	80037ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e006      	b.n	800360c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8db 	bl	80037ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800360a:	e0c3      	b.n	8003794 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	bf00      	nop
    return;
 800360e:	e0c1      	b.n	8003794 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 80a1 	bne.w	800375c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 809b 	beq.w	800375c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8095 	beq.w	800375c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04e      	beq.n	80036f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003660:	8a3b      	ldrh	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8098 	beq.w	8003798 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800366c:	8a3a      	ldrh	r2, [r7, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	f080 8092 	bcs.w	8003798 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8a3a      	ldrh	r2, [r7, #16]
 8003678:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b20      	cmp	r3, #32
 8003682:	d02b      	beq.n	80036dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003692:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0210 	bic.w	r2, r2, #16
 80036d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd ffcf 	bl	800167a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f86d 	bl	80037cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036f2:	e051      	b.n	8003798 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d047      	beq.n	800379c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003720:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0210 	bic.w	r2, r2, #16
 800374e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003750:	8a7b      	ldrh	r3, [r7, #18]
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f839 	bl	80037cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800375a:	e01f      	b.n	800379c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_UART_IRQHandler+0x324>
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8f9 	bl	8003968 <UART_Transmit_IT>
    return;
 8003776:	e012      	b.n	800379e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <HAL_UART_IRQHandler+0x34a>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f93a 	bl	8003a06 <UART_EndTransmit_IT>
    return;
 8003792:	e004      	b.n	800379e <HAL_UART_IRQHandler+0x34a>
    return;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_UART_IRQHandler+0x34a>
      return;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_UART_IRQHandler+0x34a>
      return;
 800379c:	bf00      	nop
  }
}
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	08003941 	.word	0x08003941

080037a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f2:	e02c      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d028      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x30>
 8003802:	f7fd fe23 	bl	800144c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	429a      	cmp	r2, r3
 8003810:	d21d      	bcs.n	800384e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003820:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00f      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0c3      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2222      	movs	r2, #34	; 0x22
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0220 	orr.w	r2, r2, #32
 80038da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0210 	bic.w	r2, r2, #16
 8003926:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff ff2d 	bl	80037ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b21      	cmp	r3, #33	; 0x21
 800397a:	d13e      	bne.n	80039fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d114      	bne.n	80039b0 <UART_Transmit_IT+0x48>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d110      	bne.n	80039b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]
 80039ae:	e008      	b.n	80039c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	1c59      	adds	r1, r3, #1
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6211      	str	r1, [r2, #32]
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4619      	mov	r1, r3
 80039d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff febe 	bl	80037a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	f040 8099 	bne.w	8003b7e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d117      	bne.n	8003a86 <UART_Receive_IT+0x50>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e026      	b.n	8003ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d007      	beq.n	8003aaa <UART_Receive_IT+0x74>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <UART_Receive_IT+0x82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e008      	b.n	8003aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d148      	bne.n	8003b7a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0220 	bic.w	r2, r2, #32
 8003af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d123      	bne.n	8003b70 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0210 	bic.w	r2, r2, #16
 8003b3c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d10a      	bne.n	8003b62 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fe2f 	bl	80037cc <HAL_UARTEx_RxEventCallback>
 8003b6e:	e002      	b.n	8003b76 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fc ff99 	bl	8000aa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e002      	b.n	8003b80 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bc2:	f023 030c 	bic.w	r3, r3, #12
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <UART_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7fe fb90 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	e002      	b.n	8003bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe fb78 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	0119      	lsls	r1, r3, #4
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <UART_SetConfig+0x118>)
 8003c36:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2064      	movs	r0, #100	; 0x64
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c54:	4419      	add	r1, r3
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009a      	lsls	r2, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <UART_SetConfig+0x118>)
 8003c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2064      	movs	r0, #100	; 0x64
 8003c76:	fb00 f303 	mul.w	r3, r0, r3
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	3332      	adds	r3, #50	; 0x32
 8003c80:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <UART_SetConfig+0x118>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	440a      	add	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	51eb851f 	.word	0x51eb851f

08003ca4 <__errno>:
 8003ca4:	4b01      	ldr	r3, [pc, #4]	; (8003cac <__errno+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	2000001c 	.word	0x2000001c

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	4d0c      	ldr	r5, [pc, #48]	; (8003ce8 <__libc_init_array+0x38>)
 8003cb6:	4c0d      	ldr	r4, [pc, #52]	; (8003cec <__libc_init_array+0x3c>)
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	f000 fc5c 	bl	800457c <_init>
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	4d0a      	ldr	r5, [pc, #40]	; (8003cf0 <__libc_init_array+0x40>)
 8003cc8:	4c0a      	ldr	r4, [pc, #40]	; (8003cf4 <__libc_init_array+0x44>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	080045f8 	.word	0x080045f8
 8003cec:	080045f8 	.word	0x080045f8
 8003cf0:	080045f8 	.word	0x080045f8
 8003cf4:	080045fc 	.word	0x080045fc

08003cf8 <memset>:
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4402      	add	r2, r0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <memset+0xa>
 8003d00:	4770      	bx	lr
 8003d02:	f803 1b01 	strb.w	r1, [r3], #1
 8003d06:	e7f9      	b.n	8003cfc <memset+0x4>

08003d08 <siprintf>:
 8003d08:	b40e      	push	{r1, r2, r3}
 8003d0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d0e:	b500      	push	{lr}
 8003d10:	b09c      	sub	sp, #112	; 0x70
 8003d12:	ab1d      	add	r3, sp, #116	; 0x74
 8003d14:	9002      	str	r0, [sp, #8]
 8003d16:	9006      	str	r0, [sp, #24]
 8003d18:	9107      	str	r1, [sp, #28]
 8003d1a:	9104      	str	r1, [sp, #16]
 8003d1c:	4808      	ldr	r0, [pc, #32]	; (8003d40 <siprintf+0x38>)
 8003d1e:	4909      	ldr	r1, [pc, #36]	; (8003d44 <siprintf+0x3c>)
 8003d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d24:	9105      	str	r1, [sp, #20]
 8003d26:	6800      	ldr	r0, [r0, #0]
 8003d28:	a902      	add	r1, sp, #8
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	f000 f868 	bl	8003e00 <_svfiprintf_r>
 8003d30:	2200      	movs	r2, #0
 8003d32:	9b02      	ldr	r3, [sp, #8]
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	b01c      	add	sp, #112	; 0x70
 8003d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d3c:	b003      	add	sp, #12
 8003d3e:	4770      	bx	lr
 8003d40:	2000001c 	.word	0x2000001c
 8003d44:	ffff0208 	.word	0xffff0208

08003d48 <__ssputs_r>:
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	688e      	ldr	r6, [r1, #8]
 8003d4e:	4682      	mov	sl, r0
 8003d50:	429e      	cmp	r6, r3
 8003d52:	460c      	mov	r4, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	461f      	mov	r7, r3
 8003d58:	d838      	bhi.n	8003dcc <__ssputs_r+0x84>
 8003d5a:	898a      	ldrh	r2, [r1, #12]
 8003d5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d60:	d032      	beq.n	8003dc8 <__ssputs_r+0x80>
 8003d62:	6825      	ldr	r5, [r4, #0]
 8003d64:	6909      	ldr	r1, [r1, #16]
 8003d66:	3301      	adds	r3, #1
 8003d68:	eba5 0901 	sub.w	r9, r5, r1
 8003d6c:	6965      	ldr	r5, [r4, #20]
 8003d6e:	444b      	add	r3, r9
 8003d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d78:	106d      	asrs	r5, r5, #1
 8003d7a:	429d      	cmp	r5, r3
 8003d7c:	bf38      	it	cc
 8003d7e:	461d      	movcc	r5, r3
 8003d80:	0553      	lsls	r3, r2, #21
 8003d82:	d531      	bpl.n	8003de8 <__ssputs_r+0xa0>
 8003d84:	4629      	mov	r1, r5
 8003d86:	f000 fb53 	bl	8004430 <_malloc_r>
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	b950      	cbnz	r0, 8003da4 <__ssputs_r+0x5c>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f8ca 3000 	str.w	r3, [sl]
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da4:	464a      	mov	r2, r9
 8003da6:	6921      	ldr	r1, [r4, #16]
 8003da8:	f000 face 	bl	8004348 <memcpy>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	6126      	str	r6, [r4, #16]
 8003dba:	444e      	add	r6, r9
 8003dbc:	6026      	str	r6, [r4, #0]
 8003dbe:	463e      	mov	r6, r7
 8003dc0:	6165      	str	r5, [r4, #20]
 8003dc2:	eba5 0509 	sub.w	r5, r5, r9
 8003dc6:	60a5      	str	r5, [r4, #8]
 8003dc8:	42be      	cmp	r6, r7
 8003dca:	d900      	bls.n	8003dce <__ssputs_r+0x86>
 8003dcc:	463e      	mov	r6, r7
 8003dce:	4632      	mov	r2, r6
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	f000 fac6 	bl	8004364 <memmove>
 8003dd8:	68a3      	ldr	r3, [r4, #8]
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	1b9b      	subs	r3, r3, r6
 8003dde:	4432      	add	r2, r6
 8003de0:	2000      	movs	r0, #0
 8003de2:	60a3      	str	r3, [r4, #8]
 8003de4:	6022      	str	r2, [r4, #0]
 8003de6:	e7db      	b.n	8003da0 <__ssputs_r+0x58>
 8003de8:	462a      	mov	r2, r5
 8003dea:	f000 fb7b 	bl	80044e4 <_realloc_r>
 8003dee:	4606      	mov	r6, r0
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d1e1      	bne.n	8003db8 <__ssputs_r+0x70>
 8003df4:	4650      	mov	r0, sl
 8003df6:	6921      	ldr	r1, [r4, #16]
 8003df8:	f000 face 	bl	8004398 <_free_r>
 8003dfc:	e7c7      	b.n	8003d8e <__ssputs_r+0x46>
	...

08003e00 <_svfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	4698      	mov	r8, r3
 8003e06:	898b      	ldrh	r3, [r1, #12]
 8003e08:	4607      	mov	r7, r0
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	4614      	mov	r4, r2
 8003e10:	b09d      	sub	sp, #116	; 0x74
 8003e12:	d50e      	bpl.n	8003e32 <_svfiprintf_r+0x32>
 8003e14:	690b      	ldr	r3, [r1, #16]
 8003e16:	b963      	cbnz	r3, 8003e32 <_svfiprintf_r+0x32>
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	f000 fb09 	bl	8004430 <_malloc_r>
 8003e1e:	6028      	str	r0, [r5, #0]
 8003e20:	6128      	str	r0, [r5, #16]
 8003e22:	b920      	cbnz	r0, 8003e2e <_svfiprintf_r+0x2e>
 8003e24:	230c      	movs	r3, #12
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	e0d1      	b.n	8003fd2 <_svfiprintf_r+0x1d2>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	616b      	str	r3, [r5, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9309      	str	r3, [sp, #36]	; 0x24
 8003e36:	2320      	movs	r3, #32
 8003e38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e3c:	2330      	movs	r3, #48	; 0x30
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fec <_svfiprintf_r+0x1ec>
 8003e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e4e:	4623      	mov	r3, r4
 8003e50:	469a      	mov	sl, r3
 8003e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e56:	b10a      	cbz	r2, 8003e5c <_svfiprintf_r+0x5c>
 8003e58:	2a25      	cmp	r2, #37	; 0x25
 8003e5a:	d1f9      	bne.n	8003e50 <_svfiprintf_r+0x50>
 8003e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e60:	d00b      	beq.n	8003e7a <_svfiprintf_r+0x7a>
 8003e62:	465b      	mov	r3, fp
 8003e64:	4622      	mov	r2, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	4638      	mov	r0, r7
 8003e6a:	f7ff ff6d 	bl	8003d48 <__ssputs_r>
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f000 80aa 	beq.w	8003fc8 <_svfiprintf_r+0x1c8>
 8003e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e76:	445a      	add	r2, fp
 8003e78:	9209      	str	r2, [sp, #36]	; 0x24
 8003e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80a2 	beq.w	8003fc8 <_svfiprintf_r+0x1c8>
 8003e84:	2300      	movs	r3, #0
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e8e:	f10a 0a01 	add.w	sl, sl, #1
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	9307      	str	r3, [sp, #28]
 8003e96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e9a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e9c:	4654      	mov	r4, sl
 8003e9e:	2205      	movs	r2, #5
 8003ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea4:	4851      	ldr	r0, [pc, #324]	; (8003fec <_svfiprintf_r+0x1ec>)
 8003ea6:	f000 fa41 	bl	800432c <memchr>
 8003eaa:	9a04      	ldr	r2, [sp, #16]
 8003eac:	b9d8      	cbnz	r0, 8003ee6 <_svfiprintf_r+0xe6>
 8003eae:	06d0      	lsls	r0, r2, #27
 8003eb0:	bf44      	itt	mi
 8003eb2:	2320      	movmi	r3, #32
 8003eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb8:	0711      	lsls	r1, r2, #28
 8003eba:	bf44      	itt	mi
 8003ebc:	232b      	movmi	r3, #43	; 0x2b
 8003ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec8:	d015      	beq.n	8003ef6 <_svfiprintf_r+0xf6>
 8003eca:	4654      	mov	r4, sl
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f04f 0c0a 	mov.w	ip, #10
 8003ed2:	9a07      	ldr	r2, [sp, #28]
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eda:	3b30      	subs	r3, #48	; 0x30
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	d94e      	bls.n	8003f7e <_svfiprintf_r+0x17e>
 8003ee0:	b1b0      	cbz	r0, 8003f10 <_svfiprintf_r+0x110>
 8003ee2:	9207      	str	r2, [sp, #28]
 8003ee4:	e014      	b.n	8003f10 <_svfiprintf_r+0x110>
 8003ee6:	eba0 0308 	sub.w	r3, r0, r8
 8003eea:	fa09 f303 	lsl.w	r3, r9, r3
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	46a2      	mov	sl, r4
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	e7d2      	b.n	8003e9c <_svfiprintf_r+0x9c>
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	1d19      	adds	r1, r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	9103      	str	r1, [sp, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bfbb      	ittet	lt
 8003f02:	425b      	neglt	r3, r3
 8003f04:	f042 0202 	orrlt.w	r2, r2, #2
 8003f08:	9307      	strge	r3, [sp, #28]
 8003f0a:	9307      	strlt	r3, [sp, #28]
 8003f0c:	bfb8      	it	lt
 8003f0e:	9204      	strlt	r2, [sp, #16]
 8003f10:	7823      	ldrb	r3, [r4, #0]
 8003f12:	2b2e      	cmp	r3, #46	; 0x2e
 8003f14:	d10c      	bne.n	8003f30 <_svfiprintf_r+0x130>
 8003f16:	7863      	ldrb	r3, [r4, #1]
 8003f18:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1a:	d135      	bne.n	8003f88 <_svfiprintf_r+0x188>
 8003f1c:	9b03      	ldr	r3, [sp, #12]
 8003f1e:	3402      	adds	r4, #2
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	9203      	str	r2, [sp, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bfb8      	it	lt
 8003f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f2e:	9305      	str	r3, [sp, #20]
 8003f30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ffc <_svfiprintf_r+0x1fc>
 8003f34:	2203      	movs	r2, #3
 8003f36:	4650      	mov	r0, sl
 8003f38:	7821      	ldrb	r1, [r4, #0]
 8003f3a:	f000 f9f7 	bl	800432c <memchr>
 8003f3e:	b140      	cbz	r0, 8003f52 <_svfiprintf_r+0x152>
 8003f40:	2340      	movs	r3, #64	; 0x40
 8003f42:	eba0 000a 	sub.w	r0, r0, sl
 8003f46:	fa03 f000 	lsl.w	r0, r3, r0
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	3401      	adds	r4, #1
 8003f4e:	4303      	orrs	r3, r0
 8003f50:	9304      	str	r3, [sp, #16]
 8003f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f56:	2206      	movs	r2, #6
 8003f58:	4825      	ldr	r0, [pc, #148]	; (8003ff0 <_svfiprintf_r+0x1f0>)
 8003f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f5e:	f000 f9e5 	bl	800432c <memchr>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d038      	beq.n	8003fd8 <_svfiprintf_r+0x1d8>
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <_svfiprintf_r+0x1f4>)
 8003f68:	bb1b      	cbnz	r3, 8003fb2 <_svfiprintf_r+0x1b2>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	3307      	adds	r3, #7
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	3308      	adds	r3, #8
 8003f74:	9303      	str	r3, [sp, #12]
 8003f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f78:	4433      	add	r3, r6
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	e767      	b.n	8003e4e <_svfiprintf_r+0x4e>
 8003f7e:	460c      	mov	r4, r1
 8003f80:	2001      	movs	r0, #1
 8003f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f86:	e7a5      	b.n	8003ed4 <_svfiprintf_r+0xd4>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f04f 0c0a 	mov.w	ip, #10
 8003f8e:	4619      	mov	r1, r3
 8003f90:	3401      	adds	r4, #1
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	4620      	mov	r0, r4
 8003f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f9a:	3a30      	subs	r2, #48	; 0x30
 8003f9c:	2a09      	cmp	r2, #9
 8003f9e:	d903      	bls.n	8003fa8 <_svfiprintf_r+0x1a8>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0c5      	beq.n	8003f30 <_svfiprintf_r+0x130>
 8003fa4:	9105      	str	r1, [sp, #20]
 8003fa6:	e7c3      	b.n	8003f30 <_svfiprintf_r+0x130>
 8003fa8:	4604      	mov	r4, r0
 8003faa:	2301      	movs	r3, #1
 8003fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb0:	e7f0      	b.n	8003f94 <_svfiprintf_r+0x194>
 8003fb2:	ab03      	add	r3, sp, #12
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <_svfiprintf_r+0x1f8>)
 8003fbc:	a904      	add	r1, sp, #16
 8003fbe:	f3af 8000 	nop.w
 8003fc2:	1c42      	adds	r2, r0, #1
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	d1d6      	bne.n	8003f76 <_svfiprintf_r+0x176>
 8003fc8:	89ab      	ldrh	r3, [r5, #12]
 8003fca:	065b      	lsls	r3, r3, #25
 8003fcc:	f53f af2c 	bmi.w	8003e28 <_svfiprintf_r+0x28>
 8003fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fd2:	b01d      	add	sp, #116	; 0x74
 8003fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	ab03      	add	r3, sp, #12
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4638      	mov	r0, r7
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_svfiprintf_r+0x1f8>)
 8003fe2:	a904      	add	r1, sp, #16
 8003fe4:	f000 f87c 	bl	80040e0 <_printf_i>
 8003fe8:	e7eb      	b.n	8003fc2 <_svfiprintf_r+0x1c2>
 8003fea:	bf00      	nop
 8003fec:	080045c4 	.word	0x080045c4
 8003ff0:	080045ce 	.word	0x080045ce
 8003ff4:	00000000 	.word	0x00000000
 8003ff8:	08003d49 	.word	0x08003d49
 8003ffc:	080045ca 	.word	0x080045ca

08004000 <_printf_common>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	4616      	mov	r6, r2
 8004006:	4699      	mov	r9, r3
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	690b      	ldr	r3, [r1, #16]
 800400c:	4607      	mov	r7, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	bfb8      	it	lt
 8004012:	4613      	movlt	r3, r2
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800401a:	460c      	mov	r4, r1
 800401c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004020:	b10a      	cbz	r2, 8004026 <_printf_common+0x26>
 8004022:	3301      	adds	r3, #1
 8004024:	6033      	str	r3, [r6, #0]
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	0699      	lsls	r1, r3, #26
 800402a:	bf42      	ittt	mi
 800402c:	6833      	ldrmi	r3, [r6, #0]
 800402e:	3302      	addmi	r3, #2
 8004030:	6033      	strmi	r3, [r6, #0]
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	f015 0506 	ands.w	r5, r5, #6
 8004038:	d106      	bne.n	8004048 <_printf_common+0x48>
 800403a:	f104 0a19 	add.w	sl, r4, #25
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	6832      	ldr	r2, [r6, #0]
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	42ab      	cmp	r3, r5
 8004046:	dc28      	bgt.n	800409a <_printf_common+0x9a>
 8004048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800404c:	1e13      	subs	r3, r2, #0
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	bf18      	it	ne
 8004052:	2301      	movne	r3, #1
 8004054:	0692      	lsls	r2, r2, #26
 8004056:	d42d      	bmi.n	80040b4 <_printf_common+0xb4>
 8004058:	4649      	mov	r1, r9
 800405a:	4638      	mov	r0, r7
 800405c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004060:	47c0      	blx	r8
 8004062:	3001      	adds	r0, #1
 8004064:	d020      	beq.n	80040a8 <_printf_common+0xa8>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	68e5      	ldr	r5, [r4, #12]
 800406a:	f003 0306 	and.w	r3, r3, #6
 800406e:	2b04      	cmp	r3, #4
 8004070:	bf18      	it	ne
 8004072:	2500      	movne	r5, #0
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	f04f 0600 	mov.w	r6, #0
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	bf08      	it	eq
 800407e:	1aad      	subeq	r5, r5, r2
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	bf08      	it	eq
 8004084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004088:	4293      	cmp	r3, r2
 800408a:	bfc4      	itt	gt
 800408c:	1a9b      	subgt	r3, r3, r2
 800408e:	18ed      	addgt	r5, r5, r3
 8004090:	341a      	adds	r4, #26
 8004092:	42b5      	cmp	r5, r6
 8004094:	d11a      	bne.n	80040cc <_printf_common+0xcc>
 8004096:	2000      	movs	r0, #0
 8004098:	e008      	b.n	80040ac <_printf_common+0xac>
 800409a:	2301      	movs	r3, #1
 800409c:	4652      	mov	r2, sl
 800409e:	4649      	mov	r1, r9
 80040a0:	4638      	mov	r0, r7
 80040a2:	47c0      	blx	r8
 80040a4:	3001      	adds	r0, #1
 80040a6:	d103      	bne.n	80040b0 <_printf_common+0xb0>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b0:	3501      	adds	r5, #1
 80040b2:	e7c4      	b.n	800403e <_printf_common+0x3e>
 80040b4:	2030      	movs	r0, #48	; 0x30
 80040b6:	18e1      	adds	r1, r4, r3
 80040b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c2:	4422      	add	r2, r4
 80040c4:	3302      	adds	r3, #2
 80040c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ca:	e7c5      	b.n	8004058 <_printf_common+0x58>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4622      	mov	r2, r4
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d0e6      	beq.n	80040a8 <_printf_common+0xa8>
 80040da:	3601      	adds	r6, #1
 80040dc:	e7d9      	b.n	8004092 <_printf_common+0x92>
	...

080040e0 <_printf_i>:
 80040e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	460c      	mov	r4, r1
 80040e6:	7e27      	ldrb	r7, [r4, #24]
 80040e8:	4691      	mov	r9, r2
 80040ea:	2f78      	cmp	r7, #120	; 0x78
 80040ec:	4680      	mov	r8, r0
 80040ee:	469a      	mov	sl, r3
 80040f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f6:	d807      	bhi.n	8004108 <_printf_i+0x28>
 80040f8:	2f62      	cmp	r7, #98	; 0x62
 80040fa:	d80a      	bhi.n	8004112 <_printf_i+0x32>
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	f000 80d9 	beq.w	80042b4 <_printf_i+0x1d4>
 8004102:	2f58      	cmp	r7, #88	; 0x58
 8004104:	f000 80a4 	beq.w	8004250 <_printf_i+0x170>
 8004108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800410c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004110:	e03a      	b.n	8004188 <_printf_i+0xa8>
 8004112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004116:	2b15      	cmp	r3, #21
 8004118:	d8f6      	bhi.n	8004108 <_printf_i+0x28>
 800411a:	a001      	add	r0, pc, #4	; (adr r0, 8004120 <_printf_i+0x40>)
 800411c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004120:	08004179 	.word	0x08004179
 8004124:	0800418d 	.word	0x0800418d
 8004128:	08004109 	.word	0x08004109
 800412c:	08004109 	.word	0x08004109
 8004130:	08004109 	.word	0x08004109
 8004134:	08004109 	.word	0x08004109
 8004138:	0800418d 	.word	0x0800418d
 800413c:	08004109 	.word	0x08004109
 8004140:	08004109 	.word	0x08004109
 8004144:	08004109 	.word	0x08004109
 8004148:	08004109 	.word	0x08004109
 800414c:	0800429b 	.word	0x0800429b
 8004150:	080041bd 	.word	0x080041bd
 8004154:	0800427d 	.word	0x0800427d
 8004158:	08004109 	.word	0x08004109
 800415c:	08004109 	.word	0x08004109
 8004160:	080042bd 	.word	0x080042bd
 8004164:	08004109 	.word	0x08004109
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004109 	.word	0x08004109
 8004170:	08004109 	.word	0x08004109
 8004174:	08004285 	.word	0x08004285
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800417e:	1d1a      	adds	r2, r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	600a      	str	r2, [r1, #0]
 8004184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004188:	2301      	movs	r3, #1
 800418a:	e0a4      	b.n	80042d6 <_printf_i+0x1f6>
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	6808      	ldr	r0, [r1, #0]
 8004190:	062e      	lsls	r6, r5, #24
 8004192:	f100 0304 	add.w	r3, r0, #4
 8004196:	d50a      	bpl.n	80041ae <_printf_i+0xce>
 8004198:	6805      	ldr	r5, [r0, #0]
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	2d00      	cmp	r5, #0
 800419e:	da03      	bge.n	80041a8 <_printf_i+0xc8>
 80041a0:	232d      	movs	r3, #45	; 0x2d
 80041a2:	426d      	negs	r5, r5
 80041a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a8:	230a      	movs	r3, #10
 80041aa:	485e      	ldr	r0, [pc, #376]	; (8004324 <_printf_i+0x244>)
 80041ac:	e019      	b.n	80041e2 <_printf_i+0x102>
 80041ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041b2:	6805      	ldr	r5, [r0, #0]
 80041b4:	600b      	str	r3, [r1, #0]
 80041b6:	bf18      	it	ne
 80041b8:	b22d      	sxthne	r5, r5
 80041ba:	e7ef      	b.n	800419c <_printf_i+0xbc>
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	1d18      	adds	r0, r3, #4
 80041c2:	6008      	str	r0, [r1, #0]
 80041c4:	0628      	lsls	r0, r5, #24
 80041c6:	d501      	bpl.n	80041cc <_printf_i+0xec>
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <_printf_i+0xf2>
 80041cc:	0669      	lsls	r1, r5, #25
 80041ce:	d5fb      	bpl.n	80041c8 <_printf_i+0xe8>
 80041d0:	881d      	ldrh	r5, [r3, #0]
 80041d2:	2f6f      	cmp	r7, #111	; 0x6f
 80041d4:	bf0c      	ite	eq
 80041d6:	2308      	moveq	r3, #8
 80041d8:	230a      	movne	r3, #10
 80041da:	4852      	ldr	r0, [pc, #328]	; (8004324 <_printf_i+0x244>)
 80041dc:	2100      	movs	r1, #0
 80041de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041e2:	6866      	ldr	r6, [r4, #4]
 80041e4:	2e00      	cmp	r6, #0
 80041e6:	bfa8      	it	ge
 80041e8:	6821      	ldrge	r1, [r4, #0]
 80041ea:	60a6      	str	r6, [r4, #8]
 80041ec:	bfa4      	itt	ge
 80041ee:	f021 0104 	bicge.w	r1, r1, #4
 80041f2:	6021      	strge	r1, [r4, #0]
 80041f4:	b90d      	cbnz	r5, 80041fa <_printf_i+0x11a>
 80041f6:	2e00      	cmp	r6, #0
 80041f8:	d04d      	beq.n	8004296 <_printf_i+0x1b6>
 80041fa:	4616      	mov	r6, r2
 80041fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004200:	fb03 5711 	mls	r7, r3, r1, r5
 8004204:	5dc7      	ldrb	r7, [r0, r7]
 8004206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800420a:	462f      	mov	r7, r5
 800420c:	42bb      	cmp	r3, r7
 800420e:	460d      	mov	r5, r1
 8004210:	d9f4      	bls.n	80041fc <_printf_i+0x11c>
 8004212:	2b08      	cmp	r3, #8
 8004214:	d10b      	bne.n	800422e <_printf_i+0x14e>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	07df      	lsls	r7, r3, #31
 800421a:	d508      	bpl.n	800422e <_printf_i+0x14e>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	6861      	ldr	r1, [r4, #4]
 8004220:	4299      	cmp	r1, r3
 8004222:	bfde      	ittt	le
 8004224:	2330      	movle	r3, #48	; 0x30
 8004226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800422a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800422e:	1b92      	subs	r2, r2, r6
 8004230:	6122      	str	r2, [r4, #16]
 8004232:	464b      	mov	r3, r9
 8004234:	4621      	mov	r1, r4
 8004236:	4640      	mov	r0, r8
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	aa03      	add	r2, sp, #12
 800423e:	f7ff fedf 	bl	8004000 <_printf_common>
 8004242:	3001      	adds	r0, #1
 8004244:	d14c      	bne.n	80042e0 <_printf_i+0x200>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	b004      	add	sp, #16
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	4834      	ldr	r0, [pc, #208]	; (8004324 <_printf_i+0x244>)
 8004252:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004256:	680e      	ldr	r6, [r1, #0]
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	f856 5b04 	ldr.w	r5, [r6], #4
 800425e:	061f      	lsls	r7, r3, #24
 8004260:	600e      	str	r6, [r1, #0]
 8004262:	d514      	bpl.n	800428e <_printf_i+0x1ae>
 8004264:	07d9      	lsls	r1, r3, #31
 8004266:	bf44      	itt	mi
 8004268:	f043 0320 	orrmi.w	r3, r3, #32
 800426c:	6023      	strmi	r3, [r4, #0]
 800426e:	b91d      	cbnz	r5, 8004278 <_printf_i+0x198>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	f023 0320 	bic.w	r3, r3, #32
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	2310      	movs	r3, #16
 800427a:	e7af      	b.n	80041dc <_printf_i+0xfc>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	2378      	movs	r3, #120	; 0x78
 8004286:	4828      	ldr	r0, [pc, #160]	; (8004328 <_printf_i+0x248>)
 8004288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800428c:	e7e3      	b.n	8004256 <_printf_i+0x176>
 800428e:	065e      	lsls	r6, r3, #25
 8004290:	bf48      	it	mi
 8004292:	b2ad      	uxthmi	r5, r5
 8004294:	e7e6      	b.n	8004264 <_printf_i+0x184>
 8004296:	4616      	mov	r6, r2
 8004298:	e7bb      	b.n	8004212 <_printf_i+0x132>
 800429a:	680b      	ldr	r3, [r1, #0]
 800429c:	6826      	ldr	r6, [r4, #0]
 800429e:	1d1d      	adds	r5, r3, #4
 80042a0:	6960      	ldr	r0, [r4, #20]
 80042a2:	600d      	str	r5, [r1, #0]
 80042a4:	0635      	lsls	r5, r6, #24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	d501      	bpl.n	80042ae <_printf_i+0x1ce>
 80042aa:	6018      	str	r0, [r3, #0]
 80042ac:	e002      	b.n	80042b4 <_printf_i+0x1d4>
 80042ae:	0671      	lsls	r1, r6, #25
 80042b0:	d5fb      	bpl.n	80042aa <_printf_i+0x1ca>
 80042b2:	8018      	strh	r0, [r3, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	4616      	mov	r6, r2
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	e7ba      	b.n	8004232 <_printf_i+0x152>
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	1d1a      	adds	r2, r3, #4
 80042c0:	600a      	str	r2, [r1, #0]
 80042c2:	681e      	ldr	r6, [r3, #0]
 80042c4:	2100      	movs	r1, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	6862      	ldr	r2, [r4, #4]
 80042ca:	f000 f82f 	bl	800432c <memchr>
 80042ce:	b108      	cbz	r0, 80042d4 <_printf_i+0x1f4>
 80042d0:	1b80      	subs	r0, r0, r6
 80042d2:	6060      	str	r0, [r4, #4]
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	2300      	movs	r3, #0
 80042da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042de:	e7a8      	b.n	8004232 <_printf_i+0x152>
 80042e0:	4632      	mov	r2, r6
 80042e2:	4649      	mov	r1, r9
 80042e4:	4640      	mov	r0, r8
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	47d0      	blx	sl
 80042ea:	3001      	adds	r0, #1
 80042ec:	d0ab      	beq.n	8004246 <_printf_i+0x166>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	079b      	lsls	r3, r3, #30
 80042f2:	d413      	bmi.n	800431c <_printf_i+0x23c>
 80042f4:	68e0      	ldr	r0, [r4, #12]
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	4298      	cmp	r0, r3
 80042fa:	bfb8      	it	lt
 80042fc:	4618      	movlt	r0, r3
 80042fe:	e7a4      	b.n	800424a <_printf_i+0x16a>
 8004300:	2301      	movs	r3, #1
 8004302:	4632      	mov	r2, r6
 8004304:	4649      	mov	r1, r9
 8004306:	4640      	mov	r0, r8
 8004308:	47d0      	blx	sl
 800430a:	3001      	adds	r0, #1
 800430c:	d09b      	beq.n	8004246 <_printf_i+0x166>
 800430e:	3501      	adds	r5, #1
 8004310:	68e3      	ldr	r3, [r4, #12]
 8004312:	9903      	ldr	r1, [sp, #12]
 8004314:	1a5b      	subs	r3, r3, r1
 8004316:	42ab      	cmp	r3, r5
 8004318:	dcf2      	bgt.n	8004300 <_printf_i+0x220>
 800431a:	e7eb      	b.n	80042f4 <_printf_i+0x214>
 800431c:	2500      	movs	r5, #0
 800431e:	f104 0619 	add.w	r6, r4, #25
 8004322:	e7f5      	b.n	8004310 <_printf_i+0x230>
 8004324:	080045d5 	.word	0x080045d5
 8004328:	080045e6 	.word	0x080045e6

0800432c <memchr>:
 800432c:	4603      	mov	r3, r0
 800432e:	b510      	push	{r4, lr}
 8004330:	b2c9      	uxtb	r1, r1
 8004332:	4402      	add	r2, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	4618      	mov	r0, r3
 8004338:	d101      	bne.n	800433e <memchr+0x12>
 800433a:	2000      	movs	r0, #0
 800433c:	e003      	b.n	8004346 <memchr+0x1a>
 800433e:	7804      	ldrb	r4, [r0, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	428c      	cmp	r4, r1
 8004344:	d1f6      	bne.n	8004334 <memchr+0x8>
 8004346:	bd10      	pop	{r4, pc}

08004348 <memcpy>:
 8004348:	440a      	add	r2, r1
 800434a:	4291      	cmp	r1, r2
 800434c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004350:	d100      	bne.n	8004354 <memcpy+0xc>
 8004352:	4770      	bx	lr
 8004354:	b510      	push	{r4, lr}
 8004356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435a:	4291      	cmp	r1, r2
 800435c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004360:	d1f9      	bne.n	8004356 <memcpy+0xe>
 8004362:	bd10      	pop	{r4, pc}

08004364 <memmove>:
 8004364:	4288      	cmp	r0, r1
 8004366:	b510      	push	{r4, lr}
 8004368:	eb01 0402 	add.w	r4, r1, r2
 800436c:	d902      	bls.n	8004374 <memmove+0x10>
 800436e:	4284      	cmp	r4, r0
 8004370:	4623      	mov	r3, r4
 8004372:	d807      	bhi.n	8004384 <memmove+0x20>
 8004374:	1e43      	subs	r3, r0, #1
 8004376:	42a1      	cmp	r1, r4
 8004378:	d008      	beq.n	800438c <memmove+0x28>
 800437a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800437e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004382:	e7f8      	b.n	8004376 <memmove+0x12>
 8004384:	4601      	mov	r1, r0
 8004386:	4402      	add	r2, r0
 8004388:	428a      	cmp	r2, r1
 800438a:	d100      	bne.n	800438e <memmove+0x2a>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004396:	e7f7      	b.n	8004388 <memmove+0x24>

08004398 <_free_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4605      	mov	r5, r0
 800439c:	2900      	cmp	r1, #0
 800439e:	d043      	beq.n	8004428 <_free_r+0x90>
 80043a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a4:	1f0c      	subs	r4, r1, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bfb8      	it	lt
 80043aa:	18e4      	addlt	r4, r4, r3
 80043ac:	f000 f8d0 	bl	8004550 <__malloc_lock>
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <_free_r+0x94>)
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	4610      	mov	r0, r2
 80043b6:	b933      	cbnz	r3, 80043c6 <_free_r+0x2e>
 80043b8:	6063      	str	r3, [r4, #4]
 80043ba:	6014      	str	r4, [r2, #0]
 80043bc:	4628      	mov	r0, r5
 80043be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043c2:	f000 b8cb 	b.w	800455c <__malloc_unlock>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	d90a      	bls.n	80043e0 <_free_r+0x48>
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	1862      	adds	r2, r4, r1
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bf01      	itttt	eq
 80043d2:	681a      	ldreq	r2, [r3, #0]
 80043d4:	685b      	ldreq	r3, [r3, #4]
 80043d6:	1852      	addeq	r2, r2, r1
 80043d8:	6022      	streq	r2, [r4, #0]
 80043da:	6063      	str	r3, [r4, #4]
 80043dc:	6004      	str	r4, [r0, #0]
 80043de:	e7ed      	b.n	80043bc <_free_r+0x24>
 80043e0:	461a      	mov	r2, r3
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	b10b      	cbz	r3, 80043ea <_free_r+0x52>
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d9fa      	bls.n	80043e0 <_free_r+0x48>
 80043ea:	6811      	ldr	r1, [r2, #0]
 80043ec:	1850      	adds	r0, r2, r1
 80043ee:	42a0      	cmp	r0, r4
 80043f0:	d10b      	bne.n	800440a <_free_r+0x72>
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	4401      	add	r1, r0
 80043f6:	1850      	adds	r0, r2, r1
 80043f8:	4283      	cmp	r3, r0
 80043fa:	6011      	str	r1, [r2, #0]
 80043fc:	d1de      	bne.n	80043bc <_free_r+0x24>
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4401      	add	r1, r0
 8004404:	6011      	str	r1, [r2, #0]
 8004406:	6053      	str	r3, [r2, #4]
 8004408:	e7d8      	b.n	80043bc <_free_r+0x24>
 800440a:	d902      	bls.n	8004412 <_free_r+0x7a>
 800440c:	230c      	movs	r3, #12
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	e7d4      	b.n	80043bc <_free_r+0x24>
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1821      	adds	r1, r4, r0
 8004416:	428b      	cmp	r3, r1
 8004418:	bf01      	itttt	eq
 800441a:	6819      	ldreq	r1, [r3, #0]
 800441c:	685b      	ldreq	r3, [r3, #4]
 800441e:	1809      	addeq	r1, r1, r0
 8004420:	6021      	streq	r1, [r4, #0]
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	6054      	str	r4, [r2, #4]
 8004426:	e7c9      	b.n	80043bc <_free_r+0x24>
 8004428:	bd38      	pop	{r3, r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	200000dc 	.word	0x200000dc

08004430 <_malloc_r>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	1ccd      	adds	r5, r1, #3
 8004434:	f025 0503 	bic.w	r5, r5, #3
 8004438:	3508      	adds	r5, #8
 800443a:	2d0c      	cmp	r5, #12
 800443c:	bf38      	it	cc
 800443e:	250c      	movcc	r5, #12
 8004440:	2d00      	cmp	r5, #0
 8004442:	4606      	mov	r6, r0
 8004444:	db01      	blt.n	800444a <_malloc_r+0x1a>
 8004446:	42a9      	cmp	r1, r5
 8004448:	d903      	bls.n	8004452 <_malloc_r+0x22>
 800444a:	230c      	movs	r3, #12
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	2000      	movs	r0, #0
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	f000 f87d 	bl	8004550 <__malloc_lock>
 8004456:	4921      	ldr	r1, [pc, #132]	; (80044dc <_malloc_r+0xac>)
 8004458:	680a      	ldr	r2, [r1, #0]
 800445a:	4614      	mov	r4, r2
 800445c:	b99c      	cbnz	r4, 8004486 <_malloc_r+0x56>
 800445e:	4f20      	ldr	r7, [pc, #128]	; (80044e0 <_malloc_r+0xb0>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b923      	cbnz	r3, 800446e <_malloc_r+0x3e>
 8004464:	4621      	mov	r1, r4
 8004466:	4630      	mov	r0, r6
 8004468:	f000 f862 	bl	8004530 <_sbrk_r>
 800446c:	6038      	str	r0, [r7, #0]
 800446e:	4629      	mov	r1, r5
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f85d 	bl	8004530 <_sbrk_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d123      	bne.n	80044c2 <_malloc_r+0x92>
 800447a:	230c      	movs	r3, #12
 800447c:	4630      	mov	r0, r6
 800447e:	6033      	str	r3, [r6, #0]
 8004480:	f000 f86c 	bl	800455c <__malloc_unlock>
 8004484:	e7e3      	b.n	800444e <_malloc_r+0x1e>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	1b5b      	subs	r3, r3, r5
 800448a:	d417      	bmi.n	80044bc <_malloc_r+0x8c>
 800448c:	2b0b      	cmp	r3, #11
 800448e:	d903      	bls.n	8004498 <_malloc_r+0x68>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	441c      	add	r4, r3
 8004494:	6025      	str	r5, [r4, #0]
 8004496:	e004      	b.n	80044a2 <_malloc_r+0x72>
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	42a2      	cmp	r2, r4
 800449c:	bf0c      	ite	eq
 800449e:	600b      	streq	r3, [r1, #0]
 80044a0:	6053      	strne	r3, [r2, #4]
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f85a 	bl	800455c <__malloc_unlock>
 80044a8:	f104 000b 	add.w	r0, r4, #11
 80044ac:	1d23      	adds	r3, r4, #4
 80044ae:	f020 0007 	bic.w	r0, r0, #7
 80044b2:	1ac2      	subs	r2, r0, r3
 80044b4:	d0cc      	beq.n	8004450 <_malloc_r+0x20>
 80044b6:	1a1b      	subs	r3, r3, r0
 80044b8:	50a3      	str	r3, [r4, r2]
 80044ba:	e7c9      	b.n	8004450 <_malloc_r+0x20>
 80044bc:	4622      	mov	r2, r4
 80044be:	6864      	ldr	r4, [r4, #4]
 80044c0:	e7cc      	b.n	800445c <_malloc_r+0x2c>
 80044c2:	1cc4      	adds	r4, r0, #3
 80044c4:	f024 0403 	bic.w	r4, r4, #3
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d0e3      	beq.n	8004494 <_malloc_r+0x64>
 80044cc:	1a21      	subs	r1, r4, r0
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 f82e 	bl	8004530 <_sbrk_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d1dd      	bne.n	8004494 <_malloc_r+0x64>
 80044d8:	e7cf      	b.n	800447a <_malloc_r+0x4a>
 80044da:	bf00      	nop
 80044dc:	200000dc 	.word	0x200000dc
 80044e0:	200000e0 	.word	0x200000e0

080044e4 <_realloc_r>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	4607      	mov	r7, r0
 80044e8:	4614      	mov	r4, r2
 80044ea:	460e      	mov	r6, r1
 80044ec:	b921      	cbnz	r1, 80044f8 <_realloc_r+0x14>
 80044ee:	4611      	mov	r1, r2
 80044f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044f4:	f7ff bf9c 	b.w	8004430 <_malloc_r>
 80044f8:	b922      	cbnz	r2, 8004504 <_realloc_r+0x20>
 80044fa:	f7ff ff4d 	bl	8004398 <_free_r>
 80044fe:	4625      	mov	r5, r4
 8004500:	4628      	mov	r0, r5
 8004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004504:	f000 f830 	bl	8004568 <_malloc_usable_size_r>
 8004508:	42a0      	cmp	r0, r4
 800450a:	d20f      	bcs.n	800452c <_realloc_r+0x48>
 800450c:	4621      	mov	r1, r4
 800450e:	4638      	mov	r0, r7
 8004510:	f7ff ff8e 	bl	8004430 <_malloc_r>
 8004514:	4605      	mov	r5, r0
 8004516:	2800      	cmp	r0, #0
 8004518:	d0f2      	beq.n	8004500 <_realloc_r+0x1c>
 800451a:	4631      	mov	r1, r6
 800451c:	4622      	mov	r2, r4
 800451e:	f7ff ff13 	bl	8004348 <memcpy>
 8004522:	4631      	mov	r1, r6
 8004524:	4638      	mov	r0, r7
 8004526:	f7ff ff37 	bl	8004398 <_free_r>
 800452a:	e7e9      	b.n	8004500 <_realloc_r+0x1c>
 800452c:	4635      	mov	r5, r6
 800452e:	e7e7      	b.n	8004500 <_realloc_r+0x1c>

08004530 <_sbrk_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	2300      	movs	r3, #0
 8004534:	4d05      	ldr	r5, [pc, #20]	; (800454c <_sbrk_r+0x1c>)
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc fecc 	bl	80012d8 <_sbrk>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_sbrk_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_sbrk_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	2000023c 	.word	0x2000023c

08004550 <__malloc_lock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_lock+0x8>)
 8004552:	f000 b811 	b.w	8004578 <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	20000244 	.word	0x20000244

0800455c <__malloc_unlock>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__malloc_unlock+0x8>)
 800455e:	f000 b80c 	b.w	800457a <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	20000244 	.word	0x20000244

08004568 <_malloc_usable_size_r>:
 8004568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456c:	1f18      	subs	r0, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbc      	itt	lt
 8004572:	580b      	ldrlt	r3, [r1, r0]
 8004574:	18c0      	addlt	r0, r0, r3
 8004576:	4770      	bx	lr

08004578 <__retarget_lock_acquire_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_release_recursive>:
 800457a:	4770      	bx	lr

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
