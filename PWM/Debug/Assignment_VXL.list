
Assignment_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000001c  08002ed4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002ed4  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009739  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4f  00000000  00000000  0002977e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001720c  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd45  00000000  00000000  00043a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084578  00000000  00000000  000517c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000d5d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e78 	.word	0x08002e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002e78 	.word	0x08002e78

0800014c <BlinkLed>:
#include "global.h"
#include "Software_timer.h"

//ham BkinkLed() de thuc hien nhap nhau 4 den cung mau trong trang thai MODE
int status1=0;
void BlinkLed(enum TypeLed L){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(timer5_flag==1){
 8000156:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <BlinkLed+0x68>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d126      	bne.n	80001ac <BlinkLed+0x60>
		setTimer5(250);
 800015e:	20fa      	movs	r0, #250	; 0xfa
 8000160:	f000 f95c 	bl	800041c <setTimer5>
		if(status1==1){
 8000164:	4b14      	ldr	r3, [pc, #80]	; (80001b8 <BlinkLed+0x6c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d117      	bne.n	800019c <BlinkLed+0x50>
			if(L == Red){
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d104      	bne.n	800017c <BlinkLed+0x30>
				Display_Led_Red1();
 8000172:	f000 f841 	bl	80001f8 <Display_Led_Red1>
				Display_Led_Red2();
 8000176:	f000 f87b 	bl	8000270 <Display_Led_Red2>
 800017a:	e011      	b.n	80001a0 <BlinkLed+0x54>
			}
			else if(L == Green){
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d104      	bne.n	800018c <BlinkLed+0x40>
				Display_Led_Green1();
 8000182:	f000 f84d 	bl	8000220 <Display_Led_Green1>
				Display_Led_Green2();
 8000186:	f000 f883 	bl	8000290 <Display_Led_Green2>
 800018a:	e009      	b.n	80001a0 <BlinkLed+0x54>
			}
			else if(L == Yellow){
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d106      	bne.n	80001a0 <BlinkLed+0x54>
				Display_Led_Yellow1();
 8000192:	f000 f859 	bl	8000248 <Display_Led_Yellow1>
				Display_Led_Yellow2();
 8000196:	f000 f88b 	bl	80002b0 <Display_Led_Yellow2>
 800019a:	e001      	b.n	80001a0 <BlinkLed+0x54>
			}
		}
		else{
			Display_Init();
 800019c:	f000 f80e 	bl	80001bc <Display_Init>
		}
		status1=1 - status1;
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <BlinkLed+0x6c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f1c3 0301 	rsb	r3, r3, #1
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <BlinkLed+0x6c>)
 80001aa:	6013      	str	r3, [r2, #0]
	}
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000060 	.word	0x20000060
 80001b8:	20000038 	.word	0x20000038

080001bc <Display_Init>:


void Display_Init(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c6:	480a      	ldr	r0, [pc, #40]	; (80001f0 <Display_Init+0x34>)
 80001c8:	f001 facb 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <Display_Init+0x38>)
 80001d2:	f001 fac6 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2120      	movs	r1, #32
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <Display_Init+0x38>)
 80001dc:	f001 fac1 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2110      	movs	r1, #16
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <Display_Init+0x38>)
 80001e6:	f001 fabc 	bl	8001762 <HAL_GPIO_WritePin>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010800 	.word	0x40010800
 80001f4:	40010c00 	.word	0x40010c00

080001f8 <Display_Led_Red1>:


void Display_Led_Red1(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000202:	4805      	ldr	r0, [pc, #20]	; (8000218 <Display_Led_Red1+0x20>)
 8000204:	f001 faad 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <Display_Led_Red1+0x24>)
 800020e:	f001 faa8 	bl	8001762 <HAL_GPIO_WritePin>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010800 	.word	0x40010800
 800021c:	40010c00 	.word	0x40010c00

08000220 <Display_Led_Green1>:
void Display_Led_Green1(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <Display_Led_Green1+0x20>)
 800022c:	f001 fa99 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2108      	movs	r1, #8
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <Display_Led_Green1+0x24>)
 8000236:	f001 fa94 	bl	8001762 <HAL_GPIO_WritePin>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010800 	.word	0x40010800
 8000244:	40010c00 	.word	0x40010c00

08000248 <Display_Led_Yellow1>:
void Display_Led_Yellow1(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <Display_Led_Yellow1+0x20>)
 8000254:	f001 fa85 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2108      	movs	r1, #8
 800025c:	4803      	ldr	r0, [pc, #12]	; (800026c <Display_Led_Yellow1+0x24>)
 800025e:	f001 fa80 	bl	8001762 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	40010c00 	.word	0x40010c00

08000270 <Display_Led_Red2>:

void Display_Led_Red2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2120      	movs	r1, #32
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <Display_Led_Red2+0x1c>)
 800027a:	f001 fa72 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2110      	movs	r1, #16
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <Display_Led_Red2+0x1c>)
 8000284:	f001 fa6d 	bl	8001762 <HAL_GPIO_WritePin>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010c00 	.word	0x40010c00

08000290 <Display_Led_Green2>:
void Display_Led_Green2(){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2120      	movs	r1, #32
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <Display_Led_Green2+0x1c>)
 800029a:	f001 fa62 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2110      	movs	r1, #16
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <Display_Led_Green2+0x1c>)
 80002a4:	f001 fa5d 	bl	8001762 <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <Display_Led_Yellow2>:
void Display_Led_Yellow2(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <Display_Led_Yellow2+0x1c>)
 80002ba:	f001 fa52 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2110      	movs	r1, #16
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <Display_Led_Yellow2+0x1c>)
 80002c4:	f001 fa4d 	bl	8001762 <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <Display_P_Led_Reset>:
//}
//void Display_P_Led_Green1(){
//	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_SET);
//}
void Display_P_Led_Reset(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <Display_P_Led_Reset+0x20>)
 80002dc:	f001 fa41 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e6:	4802      	ldr	r0, [pc, #8]	; (80002f0 <Display_P_Led_Reset+0x20>)
 80002e8:	f001 fa3b 	bl	8001762 <HAL_GPIO_WritePin>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <Display_P_Led_Red1>:
void Display_P_Led_Red1(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <Display_P_Led_Red1+0x20>)
 8000300:	f001 fa2f 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <Display_P_Led_Red1+0x20>)
 800030c:	f001 fa29 	bl	8001762 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010c00 	.word	0x40010c00

08000318 <Display_P_Led_Green1>:
void Display_P_Led_Green1(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <Display_P_Led_Green1+0x20>)
 8000324:	f001 fa1d 	bl	8001762 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <Display_P_Led_Green1+0x20>)
 8000330:	f001 fa17 	bl	8001762 <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010c00 	.word	0x40010c00

0800033c <setTimer1>:
int timer4_flag = 0;

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer1(int duration){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <setTimer1+0x2c>)
 8000348:	fb82 1203 	smull	r1, r2, r2, r3
 800034c:	1092      	asrs	r2, r2, #2
 800034e:	17db      	asrs	r3, r3, #31
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	4a06      	ldr	r2, [pc, #24]	; (800036c <setTimer1+0x30>)
 8000354:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <setTimer1+0x34>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	66666667 	.word	0x66666667
 800036c:	2000003c 	.word	0x2000003c
 8000370:	20000040 	.word	0x20000040

08000374 <setTimer2>:

void setTimer2(int duration){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <setTimer2+0x2c>)
 8000380:	fb82 1203 	smull	r1, r2, r2, r3
 8000384:	1092      	asrs	r2, r2, #2
 8000386:	17db      	asrs	r3, r3, #31
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <setTimer2+0x30>)
 800038c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <setTimer2+0x34>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	66666667 	.word	0x66666667
 80003a4:	20000044 	.word	0x20000044
 80003a8:	20000048 	.word	0x20000048

080003ac <setTimer3>:

void setTimer3(int duration){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <setTimer3+0x2c>)
 80003b8:	fb82 1203 	smull	r1, r2, r2, r3
 80003bc:	1092      	asrs	r2, r2, #2
 80003be:	17db      	asrs	r3, r3, #31
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <setTimer3+0x30>)
 80003c4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <setTimer3+0x34>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	66666667 	.word	0x66666667
 80003dc:	2000004c 	.word	0x2000004c
 80003e0:	20000050 	.word	0x20000050

080003e4 <setTimer4>:

void setTimer4(int duration){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <setTimer4+0x2c>)
 80003f0:	fb82 1203 	smull	r1, r2, r2, r3
 80003f4:	1092      	asrs	r2, r2, #2
 80003f6:	17db      	asrs	r3, r3, #31
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <setTimer4+0x30>)
 80003fc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <setTimer4+0x34>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	66666667 	.word	0x66666667
 8000414:	20000054 	.word	0x20000054
 8000418:	20000058 	.word	0x20000058

0800041c <setTimer5>:

void setTimer5(int duration){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <setTimer5+0x2c>)
 8000428:	fb82 1203 	smull	r1, r2, r2, r3
 800042c:	1092      	asrs	r2, r2, #2
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <setTimer5+0x30>)
 8000434:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <setTimer5+0x34>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	66666667 	.word	0x66666667
 800044c:	2000005c 	.word	0x2000005c
 8000450:	20000060 	.word	0x20000060

08000454 <timerRun>:

void timerRun(){
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <timerRun+0xac>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	dd0b      	ble.n	8000478 <timerRun+0x24>
		timer1_counter--;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <timerRun+0xac>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	4a26      	ldr	r2, [pc, #152]	; (8000500 <timerRun+0xac>)
 8000468:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <timerRun+0xac>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d102      	bne.n	8000478 <timerRun+0x24>
			timer1_flag = 1;
 8000472:	4b24      	ldr	r3, [pc, #144]	; (8000504 <timerRun+0xb0>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <timerRun+0xb4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	dd0b      	ble.n	8000498 <timerRun+0x44>
		timer2_counter--;
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <timerRun+0xb4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a20      	ldr	r2, [pc, #128]	; (8000508 <timerRun+0xb4>)
 8000488:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <timerRun+0xb4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d102      	bne.n	8000498 <timerRun+0x44>
			timer2_flag = 1;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <timerRun+0xb8>)
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <timerRun+0xbc>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	dd0b      	ble.n	80004b8 <timerRun+0x64>
		timer3_counter--;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <timerRun+0xbc>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <timerRun+0xbc>)
 80004a8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <timerRun+0xbc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d102      	bne.n	80004b8 <timerRun+0x64>
			timer3_flag = 1;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <timerRun+0xc0>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <timerRun+0xc4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dd0b      	ble.n	80004d8 <timerRun+0x84>
		timer4_counter--;
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <timerRun+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <timerRun+0xc4>)
 80004c8:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <timerRun+0xc4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <timerRun+0x84>
			timer4_flag = 1;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <timerRun+0xc8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <timerRun+0xcc>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd0b      	ble.n	80004f8 <timerRun+0xa4>
		timer5_counter--;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <timerRun+0xcc>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <timerRun+0xcc>)
 80004e8:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <timerRun+0xcc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <timerRun+0xa4>
			timer5_flag = 1;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <timerRun+0xd0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	2000003c 	.word	0x2000003c
 8000504:	20000040 	.word	0x20000040
 8000508:	20000044 	.word	0x20000044
 800050c:	20000048 	.word	0x20000048
 8000510:	2000004c 	.word	0x2000004c
 8000514:	20000050 	.word	0x20000050
 8000518:	20000054 	.word	0x20000054
 800051c:	20000058 	.word	0x20000058
 8000520:	2000005c 	.word	0x2000005c
 8000524:	20000060 	.word	0x20000060

08000528 <ReadButton>:
#include "button.h"
#include "main.h"

//add more case if you have more buttons
int ReadButton(int i){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	d822      	bhi.n	800057c <ReadButton+0x54>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <ReadButton+0x14>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000559 	.word	0x08000559
 8000544:	08000565 	.word	0x08000565
 8000548:	08000571 	.word	0x08000571
	switch(i){
		case 0:
			return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800054c:	2102      	movs	r1, #2
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <ReadButton+0x60>)
 8000550:	f001 f8f0 	bl	8001734 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	e013      	b.n	8000580 <ReadButton+0x58>
		case 1:
			return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000558:	2110      	movs	r1, #16
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <ReadButton+0x60>)
 800055c:	f001 f8ea 	bl	8001734 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	e00d      	b.n	8000580 <ReadButton+0x58>
		case 2:
			return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000564:	2101      	movs	r1, #1
 8000566:	4809      	ldr	r0, [pc, #36]	; (800058c <ReadButton+0x64>)
 8000568:	f001 f8e4 	bl	8001734 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	e007      	b.n	8000580 <ReadButton+0x58>
		case 3:
			return HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 8000570:	2101      	movs	r1, #1
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <ReadButton+0x60>)
 8000574:	f001 f8de 	bl	8001734 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	e001      	b.n	8000580 <ReadButton+0x58>
		default:
			break;
 800057c:	bf00      	nop
	}
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <subKeyProcess>:
		KeyReg3[i]= NORMAL_STATE;
		TimeForKeyPress[i]= 200;
	}
}

void subKeyProcess(int i){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <subKeyProcess+0x1c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2101      	movs	r1, #1
 800059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	2000009c 	.word	0x2000009c

080005b0 <isButtonPressed>:

int isButtonPressed(int i){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <isButtonPressed+0x30>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d106      	bne.n	80005d2 <isButtonPressed+0x22>
		button_flag[i]=0;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <isButtonPressed+0x30>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2100      	movs	r1, #0
 80005ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <isButtonPressed+0x24>
	}
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c

080005e4 <getKeyInput>:


void getKeyInput(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e063      	b.n	80006b8 <getKeyInput+0xd4>
		KeyReg0[i]= KeyReg1[i];
 80005f0:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <getKeyInput+0xe4>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	4934      	ldr	r1, [pc, #208]	; (80006cc <getKeyInput+0xe8>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i]= KeyReg2[i];
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <getKeyInput+0xec>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	492f      	ldr	r1, [pc, #188]	; (80006c8 <getKeyInput+0xe4>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i]= ReadButton(i);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff89 	bl	8000528 <ReadButton>
 8000616:	4602      	mov	r2, r0
 8000618:	492d      	ldr	r1, [pc, #180]	; (80006d0 <getKeyInput+0xec>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <getKeyInput+0xe4>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000628:	4928      	ldr	r1, [pc, #160]	; (80006cc <getKeyInput+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000630:	429a      	cmp	r2, r3
 8000632:	d13e      	bne.n	80006b2 <getKeyInput+0xce>
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <getKeyInput+0xe4>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800063c:	4924      	ldr	r1, [pc, #144]	; (80006d0 <getKeyInput+0xec>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000644:	429a      	cmp	r2, r3
 8000646:	d134      	bne.n	80006b2 <getKeyInput+0xce>
			if (KeyReg3[i] != KeyReg2[i]){
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <getKeyInput+0xf0>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000650:	491f      	ldr	r1, [pc, #124]	; (80006d0 <getKeyInput+0xec>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000658:	429a      	cmp	r2, r3
 800065a:	d016      	beq.n	800068a <getKeyInput+0xa6>
			  KeyReg3[i] = KeyReg2[i];
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <getKeyInput+0xec>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000664:	491b      	ldr	r1, [pc, #108]	; (80006d4 <getKeyInput+0xf0>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <getKeyInput+0xec>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d11c      	bne.n	80006b2 <getKeyInput+0xce>
				  TimeForKeyPress[i] = 200;
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <getKeyInput+0xf4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	21c8      	movs	r1, #200	; 0xc8
 800067e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  //TODO
				  subKeyProcess(i);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff84 	bl	8000590 <subKeyProcess>
 8000688:	e013      	b.n	80006b2 <getKeyInput+0xce>
			  }
			} else {
				TimeForKeyPress[i]--;
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <getKeyInput+0xf4>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	4910      	ldr	r1, [pc, #64]	; (80006d8 <getKeyInput+0xf4>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeForKeyPress[i] == 0){
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <getKeyInput+0xf4>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d104      	bne.n	80006b2 <getKeyInput+0xce>
					//TODO
					KeyReg3[i]= NORMAL_STATE;
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <getKeyInput+0xf0>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2101      	movs	r1, #1
 80006ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	dd98      	ble.n	80005f0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	2000006c 	.word	0x2000006c
 80006d8:	200000bc 	.word	0x200000bc

080006dc <press_ped_lag>:
#include "Display.h"
#include "global.h"
#include "fsm_automatic.h"
#include "main.h"

void press_ped_lag(){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	flag_ped=1;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <press_ped_lag+0x14>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <reset_ped_led>:
void reset_ped_led(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	flag_ped=0;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <reset_ped_led+0x14>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	Display_P_Led_Reset();
 80006fe:	f7ff fde7 	bl	80002d0 <Display_P_Led_Reset>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <fsm_automatic_run>:


void fsm_automatic_run(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	//quan ly den tin hieu hang doc
	switch(status_col){
 8000710:	4b80      	ldr	r3, [pc, #512]	; (8000914 <fsm_automatic_run+0x208>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	2b03      	cmp	r3, #3
 8000718:	f200 808c 	bhi.w	8000834 <fsm_automatic_run+0x128>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm_automatic_run+0x18>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074b 	.word	0x0800074b
 800072c:	08000799 	.word	0x08000799
 8000730:	080007e7 	.word	0x080007e7
		case INIT:
			Display_Init();
 8000734:	f7ff fd42 	bl	80001bc <Display_Init>
			//chuyen trang thai ko dk
			status_col=AUTO_RED;
 8000738:	4b76      	ldr	r3, [pc, #472]	; (8000914 <fsm_automatic_run+0x208>)
 800073a:	2202      	movs	r2, #2
 800073c:	601a      	str	r2, [r3, #0]
			setTimer1(Time_Auto_Red);
 800073e:	4b76      	ldr	r3, [pc, #472]	; (8000918 <fsm_automatic_run+0x20c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fdfa 	bl	800033c <setTimer1>
			break;
 8000748:	e07b      	b.n	8000842 <fsm_automatic_run+0x136>
		case AUTO_RED:
			Display_Led_Red1();
 800074a:	f7ff fd55 	bl	80001f8 <Display_Led_Red1>
			//chuyen trang thai co dk
			if(timer1_flag==1){
 800074e:	4b73      	ldr	r3, [pc, #460]	; (800091c <fsm_automatic_run+0x210>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d107      	bne.n	8000766 <fsm_automatic_run+0x5a>
				status_col=AUTO_GREEN;
 8000756:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <fsm_automatic_run+0x208>)
 8000758:	2203      	movs	r2, #3
 800075a:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Green);
 800075c:	4b70      	ldr	r3, [pc, #448]	; (8000920 <fsm_automatic_run+0x214>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdeb 	bl	800033c <setTimer1>
			}
			//trang thai mode 2
			if(isButtonPressed(0)==1){
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff22 	bl	80005b0 <isButtonPressed>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d109      	bne.n	8000786 <fsm_automatic_run+0x7a>
				status_col=MAN_RED;
 8000772:	4b68      	ldr	r3, [pc, #416]	; (8000914 <fsm_automatic_run+0x208>)
 8000774:	220c      	movs	r2, #12
 8000776:	601a      	str	r2, [r3, #0]
				status_row=MAN_RED;
 8000778:	4b6a      	ldr	r3, [pc, #424]	; (8000924 <fsm_automatic_run+0x218>)
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 800077e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000782:	f7ff fddb 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 8000786:	2003      	movs	r0, #3
 8000788:	f7ff ff12 	bl	80005b0 <isButtonPressed>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d152      	bne.n	8000838 <fsm_automatic_run+0x12c>
				press_ped_lag();
 8000792:	f7ff ffa3 	bl	80006dc <press_ped_lag>
			}
			break;
 8000796:	e04f      	b.n	8000838 <fsm_automatic_run+0x12c>
		case AUTO_GREEN:
			Display_Led_Green1();
 8000798:	f7ff fd42 	bl	8000220 <Display_Led_Green1>
			//chuyen trang thai co dk
			if(timer1_flag==1){
 800079c:	4b5f      	ldr	r3, [pc, #380]	; (800091c <fsm_automatic_run+0x210>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d107      	bne.n	80007b4 <fsm_automatic_run+0xa8>
				status_col=AUTO_YELLOW;
 80007a4:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <fsm_automatic_run+0x208>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Yellow);
 80007aa:	4b5f      	ldr	r3, [pc, #380]	; (8000928 <fsm_automatic_run+0x21c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fdc4 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(0)==1){
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fefb 	bl	80005b0 <isButtonPressed>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d109      	bne.n	80007d4 <fsm_automatic_run+0xc8>
				status_col=MAN_GREEN;
 80007c0:	4b54      	ldr	r3, [pc, #336]	; (8000914 <fsm_automatic_run+0x208>)
 80007c2:	220d      	movs	r2, #13
 80007c4:	601a      	str	r2, [r3, #0]
				status_row=MAN_GREEN;
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <fsm_automatic_run+0x218>)
 80007c8:	220d      	movs	r2, #13
 80007ca:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 80007cc:	f643 2098 	movw	r0, #15000	; 0x3a98
 80007d0:	f7ff fdb4 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 80007d4:	2003      	movs	r0, #3
 80007d6:	f7ff feeb 	bl	80005b0 <isButtonPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d12d      	bne.n	800083c <fsm_automatic_run+0x130>
				press_ped_lag();
 80007e0:	f7ff ff7c 	bl	80006dc <press_ped_lag>
			}
			break;
 80007e4:	e02a      	b.n	800083c <fsm_automatic_run+0x130>
		case AUTO_YELLOW:
			Display_Led_Yellow1();
 80007e6:	f7ff fd2f 	bl	8000248 <Display_Led_Yellow1>
			//chuyen trang thai co dk
			if(timer1_flag==1){
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <fsm_automatic_run+0x210>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d107      	bne.n	8000802 <fsm_automatic_run+0xf6>
				status_col=AUTO_RED;
 80007f2:	4b48      	ldr	r3, [pc, #288]	; (8000914 <fsm_automatic_run+0x208>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
				setTimer1(Time_Auto_Red);
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <fsm_automatic_run+0x20c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd9d 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(0)==1){
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fed4 	bl	80005b0 <isButtonPressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d109      	bne.n	8000822 <fsm_automatic_run+0x116>
				status_col=MAN_YELLOW;
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <fsm_automatic_run+0x208>)
 8000810:	220e      	movs	r2, #14
 8000812:	601a      	str	r2, [r3, #0]
				status_row=MAN_YELLOW;
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <fsm_automatic_run+0x218>)
 8000816:	220e      	movs	r2, #14
 8000818:	601a      	str	r2, [r3, #0]

				setTimer1(MODE_TIME);
 800081a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800081e:	f7ff fd8d 	bl	800033c <setTimer1>
			}
			if(isButtonPressed(3)==1){
 8000822:	2003      	movs	r0, #3
 8000824:	f7ff fec4 	bl	80005b0 <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d108      	bne.n	8000840 <fsm_automatic_run+0x134>
				press_ped_lag();
 800082e:	f7ff ff55 	bl	80006dc <press_ped_lag>
			}
			break;
 8000832:	e005      	b.n	8000840 <fsm_automatic_run+0x134>
//					status_row=INIT;
//				}
//			}
//			break;
		default:
			break;
 8000834:	bf00      	nop
 8000836:	e004      	b.n	8000842 <fsm_automatic_run+0x136>
			break;
 8000838:	bf00      	nop
 800083a:	e002      	b.n	8000842 <fsm_automatic_run+0x136>
			break;
 800083c:	bf00      	nop
 800083e:	e000      	b.n	8000842 <fsm_automatic_run+0x136>
			break;
 8000840:	bf00      	nop
	}
///////////////////////////////////////////////////////////////////////
	//quan ly den tin hieu hang ngang
	switch(status_row){
 8000842:	4b38      	ldr	r3, [pc, #224]	; (8000924 <fsm_automatic_run+0x218>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	2b03      	cmp	r3, #3
 800084a:	d859      	bhi.n	8000900 <fsm_automatic_run+0x1f4>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <fsm_automatic_run+0x148>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000865 	.word	0x08000865
 8000858:	0800087b 	.word	0x0800087b
 800085c:	080008a5 	.word	0x080008a5
 8000860:	080008d7 	.word	0x080008d7
		case INIT:
			Display_Init();
 8000864:	f7ff fcaa 	bl	80001bc <Display_Init>

			//chuyen trang thai ko dk
			status_row=AUTO_GREEN;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <fsm_automatic_run+0x218>)
 800086a:	2203      	movs	r2, #3
 800086c:	601a      	str	r2, [r3, #0]
			setTimer4(Time_Auto_Green);
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <fsm_automatic_run+0x214>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdb6 	bl	80003e4 <setTimer4>
			break;
 8000878:	e049      	b.n	800090e <fsm_automatic_run+0x202>
		case AUTO_RED:
			if(flag_ped==1) Display_P_Led_Red1();
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <fsm_automatic_run+0x220>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d101      	bne.n	8000886 <fsm_automatic_run+0x17a>
 8000882:	f7ff fd37 	bl	80002f4 <Display_P_Led_Red1>

			Display_Led_Red2();
 8000886:	f7ff fcf3 	bl	8000270 <Display_Led_Red2>

			//chuyen trang thai co dk
			if(timer4_flag==1){
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <fsm_automatic_run+0x224>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d138      	bne.n	8000904 <fsm_automatic_run+0x1f8>
				status_row=AUTO_GREEN;
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <fsm_automatic_run+0x218>)
 8000894:	2203      	movs	r2, #3
 8000896:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Green);
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <fsm_automatic_run+0x214>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fda1 	bl	80003e4 <setTimer4>
			}
			break;
 80008a2:	e02f      	b.n	8000904 <fsm_automatic_run+0x1f8>
		case AUTO_GREEN:
			if(flag_ped==1) {
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <fsm_automatic_run+0x220>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d103      	bne.n	80008b4 <fsm_automatic_run+0x1a8>
				Display_P_Led_Green1();
 80008ac:	f7ff fd34 	bl	8000318 <Display_P_Led_Green1>
				////////thuc hien buzzer
				//todo
				Buzzer();
 80008b0:	f000 f8de 	bl	8000a70 <Buzzer>
			}
			Display_Led_Green2();
 80008b4:	f7ff fcec 	bl	8000290 <Display_Led_Green2>

			//chuyen trang thai co dk
			if(timer4_flag==1){
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <fsm_automatic_run+0x224>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d123      	bne.n	8000908 <fsm_automatic_run+0x1fc>
				reset_ped_led();//tat den cho nguoi di duong
 80008c0:	f7ff ff18 	bl	80006f4 <reset_ped_led>
				status_row=AUTO_YELLOW;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <fsm_automatic_run+0x218>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Yellow);
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <fsm_automatic_run+0x21c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd88 	bl	80003e4 <setTimer4>
			}
			break;
 80008d4:	e018      	b.n	8000908 <fsm_automatic_run+0x1fc>
		case AUTO_YELLOW:
			Display_Led_Yellow2();
 80008d6:	f7ff fceb 	bl	80002b0 <Display_Led_Yellow2>
			if(flag_ped==1) Display_P_Led_Red1();
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <fsm_automatic_run+0x220>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <fsm_automatic_run+0x1da>
 80008e2:	f7ff fd07 	bl	80002f4 <Display_P_Led_Red1>
			//chuyen trang thai c o dk
			if(timer4_flag==1){
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <fsm_automatic_run+0x224>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d10e      	bne.n	800090c <fsm_automatic_run+0x200>
				status_row=AUTO_RED;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <fsm_automatic_run+0x218>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	601a      	str	r2, [r3, #0]
				setTimer4(Time_Auto_Red);
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <fsm_automatic_run+0x20c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fd73 	bl	80003e4 <setTimer4>
			}
			break;
 80008fe:	e005      	b.n	800090c <fsm_automatic_run+0x200>
		default:
			break;
 8000900:	bf00      	nop
 8000902:	e004      	b.n	800090e <fsm_automatic_run+0x202>
			break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <fsm_automatic_run+0x202>
			break;
 8000908:	bf00      	nop
 800090a:	e000      	b.n	800090e <fsm_automatic_run+0x202>
			break;
 800090c:	bf00      	nop
	}
	///////////////////////////////////////////////////////////////////


}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000064 	.word	0x20000064
 8000918:	20000004 	.word	0x20000004
 800091c:	20000040 	.word	0x20000040
 8000920:	20000008 	.word	0x20000008
 8000924:	20000068 	.word	0x20000068
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000000 	.word	0x20000000
 8000930:	20000058 	.word	0x20000058

08000934 <fsm_manial_run>:

// fsm_manial_run() thuc hien kiem tra khi nhan button1
// button1 duoc nhan thi chuyen sang trang thai MODE duy tri trong 1 khoang thoi gian(MODE_TIME)
// trong MODE_TIME co the tien hanh chinh sua thoi gian cac LEDs bang button2, button3(duoc hien thuc trong modification_mode.c)
// het MODE_TIME se chuyen lai trang thai 1(automatic)
void fsm_manial_run(){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	switch(status_col){
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <fsm_manial_run+0xdc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b0e      	cmp	r3, #14
 800093e:	d040      	beq.n	80009c2 <fsm_manial_run+0x8e>
 8000940:	2b0e      	cmp	r3, #14
 8000942:	dc5b      	bgt.n	80009fc <fsm_manial_run+0xc8>
 8000944:	2b0c      	cmp	r3, #12
 8000946:	d002      	beq.n	800094e <fsm_manial_run+0x1a>
 8000948:	2b0d      	cmp	r3, #13
 800094a:	d01d      	beq.n	8000988 <fsm_manial_run+0x54>
				status_col=MAN_RED;
				setTimer1(MODE_TIME);
			}
			break;
		default:
			break;
 800094c:	e056      	b.n	80009fc <fsm_manial_run+0xc8>
			BlinkLed(Red);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fbfc 	bl	800014c <BlinkLed>
			modification_mode();
 8000954:	f000 fa58 	bl	8000e08 <modification_mode>
			if(timer1_flag==1){
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <fsm_manial_run+0xe0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d105      	bne.n	800096c <fsm_manial_run+0x38>
				status_col=INIT;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <fsm_manial_run+0xdc>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <fsm_manial_run+0xe4>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fe1f 	bl	80005b0 <isButtonPressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d143      	bne.n	8000a00 <fsm_manial_run+0xcc>
				status_col=MAN_GREEN;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <fsm_manial_run+0xdc>)
 800097a:	220d      	movs	r2, #13
 800097c:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 800097e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000982:	f7ff fcdb 	bl	800033c <setTimer1>
			break;
 8000986:	e03b      	b.n	8000a00 <fsm_manial_run+0xcc>
			BlinkLed(Green);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fbdf 	bl	800014c <BlinkLed>
			modification_mode();
 800098e:	f000 fa3b 	bl	8000e08 <modification_mode>
			if(timer1_flag==1){
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <fsm_manial_run+0xe0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d105      	bne.n	80009a6 <fsm_manial_run+0x72>
				status_col=INIT;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <fsm_manial_run+0xdc>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <fsm_manial_run+0xe4>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe02 	bl	80005b0 <isButtonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d128      	bne.n	8000a04 <fsm_manial_run+0xd0>
				status_col=MAN_YELLOW;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <fsm_manial_run+0xdc>)
 80009b4:	220e      	movs	r2, #14
 80009b6:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 80009b8:	f643 2098 	movw	r0, #15000	; 0x3a98
 80009bc:	f7ff fcbe 	bl	800033c <setTimer1>
			break;
 80009c0:	e020      	b.n	8000a04 <fsm_manial_run+0xd0>
			BlinkLed(Yellow);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fbc2 	bl	800014c <BlinkLed>
			modification_mode();
 80009c8:	f000 fa1e 	bl	8000e08 <modification_mode>
			if(timer1_flag==1){
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <fsm_manial_run+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d105      	bne.n	80009e0 <fsm_manial_run+0xac>
				status_col=INIT;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <fsm_manial_run+0xdc>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <fsm_manial_run+0xe4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fde5 	bl	80005b0 <isButtonPressed>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10d      	bne.n	8000a08 <fsm_manial_run+0xd4>
				status_col=MAN_RED;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <fsm_manial_run+0xdc>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
				setTimer1(MODE_TIME);
 80009f2:	f643 2098 	movw	r0, #15000	; 0x3a98
 80009f6:	f7ff fca1 	bl	800033c <setTimer1>
			break;
 80009fa:	e005      	b.n	8000a08 <fsm_manial_run+0xd4>
			break;
 80009fc:	bf00      	nop
 80009fe:	e004      	b.n	8000a0a <fsm_manial_run+0xd6>
			break;
 8000a00:	bf00      	nop
 8000a02:	e002      	b.n	8000a0a <fsm_manial_run+0xd6>
			break;
 8000a04:	bf00      	nop
 8000a06:	e000      	b.n	8000a0a <fsm_manial_run+0xd6>
			break;
 8000a08:	bf00      	nop
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000064 	.word	0x20000064
 8000a14:	20000040 	.word	0x20000040
 8000a18:	20000068 	.word	0x20000068

08000a1c <set_Time_Auto_Red>:
int Time_Auto_Red =5000;
int Time_Auto_Green =2000;
int Time_Auto_Yellow = 3000;


void set_Time_Auto_Red(int duration){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	Time_Auto_Red = duration;
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <set_Time_Auto_Red+0x18>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000004 	.word	0x20000004

08000a38 <set_Time_Auto_Green>:
void set_Time_Auto_Green(int duration){
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	Time_Auto_Green = duration;
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <set_Time_Auto_Green+0x18>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008

08000a54 <set_Time_Auto_Yellow>:
void set_Time_Auto_Yellow(int duration){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	Time_Auto_Yellow = duration;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <set_Time_Auto_Yellow+0x18>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	2000000c 	.word	0x2000000c

08000a70 <Buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Buzzer(){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100);
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <Buzzer+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2264      	movs	r2, #100	; 0x64
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f000 fba2 	bl	80011c8 <HAL_Delay>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,10);
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <Buzzer+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	220a      	movs	r2, #10
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f000 fb9a 	bl	80011c8 <HAL_Delay>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000cc 	.word	0x200000cc

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fb30 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f82c 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f92e 	bl	8000d08 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000aac:	f000 f8b6 	bl	8000c1c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ab0:	f000 f868 	bl	8000b84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480e      	ldr	r0, [pc, #56]	; (8000af0 <main+0x54>)
 8000ab8:	f001 fb4e 	bl	8002158 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <main+0x58>)
 8000abe:	f001 faa1 	bl	8002004 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status_col=INIT;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <main+0x5c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
  status_row=INIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <main+0x60>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]

  setTimer1(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f7ff fc34 	bl	800033c <setTimer1>
  setTimer2(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f7ff fc4d 	bl	8000374 <setTimer2>
  setTimer3(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f7ff fc66 	bl	80003ac <setTimer3>
  setTimer5(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f7ff fc9b 	bl	800041c <setTimer5>
  while (1)
  {
//	  Run_7SEG();
	  fsm_automatic_run();
 8000ae6:	f7ff fe11 	bl	800070c <fsm_automatic_run>
	  fsm_manial_run();
 8000aea:	f7ff ff23 	bl	8000934 <fsm_manial_run>
	  fsm_automatic_run();
 8000aee:	e7fa      	b.n	8000ae6 <main+0x4a>
 8000af0:	200000cc 	.word	0x200000cc
 8000af4:	20000114 	.word	0x20000114
 8000af8:	20000064 	.word	0x20000064
 8000afc:	20000068 	.word	0x20000068

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 f9aa 	bl	8002e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fe27 	bl	8001794 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b4c:	f000 f956 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f892 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b76:	f000 f941 	bl	8000dfc <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000baa:	223f      	movs	r2, #63	; 0x3f
 8000bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bca:	f001 f9cb 	bl	8001f64 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd4:	f000 f912 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000be6:	f001 fd1f 	bl	8002628 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f000 f904 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000c02:	f002 f89d 	bl	8002d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f8f6 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000114 	.word	0x20000114

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c4e:	4a2d      	ldr	r2, [pc, #180]	; (8000d04 <MX_TIM3_Init+0xe8>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c54:	223f      	movs	r2, #63	; 0x3f
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c74:	f001 f976 	bl	8001f64 <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c7e:	f000 f8bd 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c90:	f001 fcca 	bl	8002628 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c9a:	f000 f8af 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c9e:	4818      	ldr	r0, [pc, #96]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000ca0:	f001 fa02 	bl	80020a8 <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000caa:	f000 f8a7 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4810      	ldr	r0, [pc, #64]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000cbe:	f002 f83f 	bl	8002d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cc8:	f000 f898 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ccc:	2360      	movs	r3, #96	; 0x60
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000ce4:	f001 fbe2 	bl	80024ac <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cee:	f000 f885 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000cf4:	f000 f976 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000cf8:	bf00      	nop
 8000cfa:	3738      	adds	r7, #56	; 0x38
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000cc 	.word	0x200000cc
 8000d04:	40000400 	.word	0x40000400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8000d52:	4822      	ldr	r0, [pc, #136]	; (8000ddc <MX_GPIO_Init+0xd4>)
 8000d54:	f000 fd05 	bl	8001762 <HAL_GPIO_WritePin>
                          |pled1_Pin|pled2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <MX_GPIO_Init+0xd8>)
 8000d60:	f000 fcff 	bl	8001762 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8000d64:	2313      	movs	r3, #19
 8000d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0xd8>)
 8000d78:	f000 fb58 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_GPIO_Init+0xd4>)
 8000d90:	f000 fb4c 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED1_Pin LED2_Pin LED4_Pin LED3_Pin
                           pled1_Pin pled2_Pin */
  GPIO_InitStruct.Pin = P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8000d94:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8000d98:	60bb      	str	r3, [r7, #8]
                          |pled1_Pin|pled2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <MX_GPIO_Init+0xd4>)
 8000dae:	f000 fb3d 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = P_LED2_Pin|LED1_Pin;
 8000db2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_GPIO_Init+0xd8>)
 8000dcc:	f000 fb2e 	bl	800142c <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	timerRun();
 8000dec:	f7ff fb32 	bl	8000454 <timerRun>
	getKeyInput();
 8000df0:	f7ff fbf8 	bl	80005e4 <getKeyInput>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <modification_mode>:
#include "modification_mode.h"
#include "global.h"
#include "button.h"


void modification_mode(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	//cap nhat cac gia tri Time_Auto_... khi nhan button2
	switch(status_col){
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <modification_mode+0xec>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b0e      	cmp	r3, #14
 8000e12:	d03e      	beq.n	8000e92 <modification_mode+0x8a>
 8000e14:	2b0e      	cmp	r3, #14
 8000e16:	dc58      	bgt.n	8000eca <modification_mode+0xc2>
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	d002      	beq.n	8000e22 <modification_mode+0x1a>
 8000e1c:	2b0d      	cmp	r3, #13
 8000e1e:	d01c      	beq.n	8000e5a <modification_mode+0x52>
			}

			//updateClockBuffer(Time_Auto_Yellow/1000,4);
			break;
		default:
			break;
 8000e20:	e053      	b.n	8000eca <modification_mode+0xc2>
			if(isButtonPressed(1)==1){
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fbc4 	bl	80005b0 <isButtonPressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d14f      	bne.n	8000ece <modification_mode+0xc6>
				Time_Auto_Red = (Time_Auto_Red+1000)%100000;//ms
 8000e2e:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <modification_mode+0xf0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <modification_mode+0xf4>)
 8000e38:	fb83 1302 	smull	r1, r3, r3, r2
 8000e3c:	1359      	asrs	r1, r3, #13
 8000e3e:	17d3      	asrs	r3, r2, #31
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	492f      	ldr	r1, [pc, #188]	; (8000f00 <modification_mode+0xf8>)
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <modification_mode+0xf0>)
 8000e4c:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Red(Time_Auto_Red);
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <modification_mode+0xf0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fde2 	bl	8000a1c <set_Time_Auto_Red>
			break;
 8000e58:	e039      	b.n	8000ece <modification_mode+0xc6>
			if(isButtonPressed(1)==1){
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fba8 	bl	80005b0 <isButtonPressed>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d135      	bne.n	8000ed2 <modification_mode+0xca>
				Time_Auto_Green = (Time_Auto_Green+1000)%100000;//ms
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <modification_mode+0xfc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <modification_mode+0xf4>)
 8000e70:	fb83 1302 	smull	r1, r3, r3, r2
 8000e74:	1359      	asrs	r1, r3, #13
 8000e76:	17d3      	asrs	r3, r2, #31
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	4921      	ldr	r1, [pc, #132]	; (8000f00 <modification_mode+0xf8>)
 8000e7c:	fb01 f303 	mul.w	r3, r1, r3
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <modification_mode+0xfc>)
 8000e84:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Green(Time_Auto_Green);
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <modification_mode+0xfc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fdd4 	bl	8000a38 <set_Time_Auto_Green>
			break;
 8000e90:	e01f      	b.n	8000ed2 <modification_mode+0xca>
			if(isButtonPressed(1)==1){
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fb8c 	bl	80005b0 <isButtonPressed>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d11b      	bne.n	8000ed6 <modification_mode+0xce>
				Time_Auto_Yellow = (Time_Auto_Yellow+1000)%100000;//ms
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <modification_mode+0x100>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <modification_mode+0xf4>)
 8000ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8000eac:	1359      	asrs	r1, r3, #13
 8000eae:	17d3      	asrs	r3, r2, #31
 8000eb0:	1acb      	subs	r3, r1, r3
 8000eb2:	4913      	ldr	r1, [pc, #76]	; (8000f00 <modification_mode+0xf8>)
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <modification_mode+0x100>)
 8000ebc:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Yellow(Time_Auto_Yellow);
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <modification_mode+0x100>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fdc6 	bl	8000a54 <set_Time_Auto_Yellow>
			break;
 8000ec8:	e005      	b.n	8000ed6 <modification_mode+0xce>
			break;
 8000eca:	bf00      	nop
 8000ecc:	e004      	b.n	8000ed8 <modification_mode+0xd0>
			break;
 8000ece:	bf00      	nop
 8000ed0:	e002      	b.n	8000ed8 <modification_mode+0xd0>
			break;
 8000ed2:	bf00      	nop
 8000ed4:	e000      	b.n	8000ed8 <modification_mode+0xd0>
			break;
 8000ed6:	bf00      	nop
	}
	//nhan button3 de ket thuc mode va reset lại hệ thống
	if(isButtonPressed(2)==1){
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fb69 	bl	80005b0 <isButtonPressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <modification_mode+0xe8>
		status_col=INIT;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <modification_mode+0xec>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
		status_row=INIT;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <modification_mode+0x104>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000064 	.word	0x20000064
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	14f8b589 	.word	0x14f8b589
 8000f00:	000186a0 	.word	0x000186a0
 8000f04:	20000008 	.word	0x20000008
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000068 	.word	0x20000068

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_MspInit+0x60>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_MspInit+0x60>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d114      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f000 fa0b 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f000 fa24 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fae:	e010      	b.n	8000fd2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_TIM_MspPostInit+0x58>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d117      	bne.n	8001034 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_TIM_MspPostInit+0x5c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_TIM_MspPostInit+0x5c>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_TIM_MspPostInit+0x5c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_TIM_MspPostInit+0x60>)
 8001030:	f000 f9fc 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40000400 	.word	0x40000400
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108e:	f000 f87f 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM2_IRQHandler+0x10>)
 800109e:	f001 f8fd 	bl	800229c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000114 	.word	0x20000114

080010ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010de:	f7ff ffe5 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f001 fe9d 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff fcd9 	bl	8000a9c <main>
  bx lr
 80010ea:	4770      	bx	lr
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80010f4:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 80010f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80010fc:	20000160 	.word	0x20000160

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x28>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f947 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	200f      	movs	r0, #15
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fef6 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f95f 	bl	8001412 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f927 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000010 	.word	0x20000010
 8001188:	20000018 	.word	0x20000018
 800118c:	20000014 	.word	0x20000014

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x1c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_IncTick+0x20>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000018 	.word	0x20000018
 80011b0:	2000015c 	.word	0x2000015c

080011b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_GetTick+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	2000015c 	.word	0x2000015c

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff fff0 	bl	80011b4 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffe0 	bl	80011b4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000018 	.word	0x20000018

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4906      	ldr	r1, [pc, #24]	; (80012a8 <__NVIC_EnableIRQ+0x34>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff90 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff2d 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff42 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff90 	bl	8001300 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5f 	bl	80012ac <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff35 	bl	8001274 <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b08b      	sub	sp, #44	; 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e169      	b.n	8001714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001440:	2201      	movs	r2, #1
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8158 	bne.w	800170e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a9a      	ldr	r2, [pc, #616]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d05e      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d875      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800146e:	4a98      	ldr	r2, [pc, #608]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d058      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001474:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d86f      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800147a:	4a96      	ldr	r2, [pc, #600]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d052      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d869      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d04c      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d863      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d046      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d85d      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d82a      	bhi.n	80014f8 <HAL_GPIO_Init+0xcc>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d859      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_GPIO_Init+0x80>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001513 	.word	0x08001513
 80014b8:	08001555 	.word	0x08001555
 80014bc:	0800155b 	.word	0x0800155b
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	0800155b 	.word	0x0800155b
 80014cc:	0800155b 	.word	0x0800155b
 80014d0:	0800155b 	.word	0x0800155b
 80014d4:	0800155b 	.word	0x0800155b
 80014d8:	0800155b 	.word	0x0800155b
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	0800155b 	.word	0x0800155b
 80014e4:	0800155b 	.word	0x0800155b
 80014e8:	0800155b 	.word	0x0800155b
 80014ec:	0800155b 	.word	0x0800155b
 80014f0:	08001509 	.word	0x08001509
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	4a79      	ldr	r2, [pc, #484]	; (80016e0 <HAL_GPIO_Init+0x2b4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fe:	e02c      	b.n	800155a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e029      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e024      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	3308      	adds	r3, #8
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e01f      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	330c      	adds	r3, #12
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e01a      	b.n	800155c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152e:	2304      	movs	r3, #4
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e013      	b.n	800155c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	611a      	str	r2, [r3, #16]
          break;
 8001546:	e009      	b.n	800155c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	615a      	str	r2, [r3, #20]
          break;
 8001552:	e003      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x130>
          break;
 800155a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d801      	bhi.n	8001566 <HAL_GPIO_Init+0x13a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	e001      	b.n	800156a <HAL_GPIO_Init+0x13e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d802      	bhi.n	8001578 <HAL_GPIO_Init+0x14c>
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x152>
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3b08      	subs	r3, #8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	210f      	movs	r1, #15
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b1 	beq.w	800170e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x1ec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3f      	ldr	r2, [pc, #252]	; (80016f0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1e8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_GPIO_Init+0x2c8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1e0>
 8001608:	2303      	movs	r3, #3
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 800160c:	2304      	movs	r3, #4
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001610:	2302      	movs	r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001618:	2300      	movs	r3, #0
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	492c      	ldr	r1, [pc, #176]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4928      	ldr	r1, [pc, #160]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4922      	ldr	r1, [pc, #136]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	491e      	ldr	r1, [pc, #120]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4918      	ldr	r1, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4914      	ldr	r1, [pc, #80]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e021      	b.n	800170e <HAL_GPIO_Init+0x2e2>
 80016ca:	bf00      	nop
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	10210000 	.word	0x10210000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_GPIO_Init+0x304>)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	43db      	mvns	r3, r3
 8001708:	4909      	ldr	r1, [pc, #36]	; (8001730 <HAL_GPIO_Init+0x304>)
 800170a:	4013      	ands	r3, r2
 800170c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae8e 	bne.w	8001440 <HAL_GPIO_Init+0x14>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	; 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e001      	b.n	8001756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001772:	787b      	ldrb	r3, [r7, #1]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001778:	887a      	ldrh	r2, [r7, #2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177e:	e003      	b.n	8001788 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	041a      	lsls	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e26c      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8087 	beq.w	80018c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b4:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00c      	beq.n	80017da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c0:	4b8f      	ldr	r3, [pc, #572]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
 80017cc:	4b8c      	ldr	r3, [pc, #560]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b89      	ldr	r3, [pc, #548]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x12c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d168      	bne.n	80018c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e246      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x76>
 80017fc:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a7f      	ldr	r2, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e02e      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b78      	ldr	r3, [pc, #480]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a77      	ldr	r2, [pc, #476]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0xbc>
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a71      	ldr	r2, [pc, #452]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6a      	ldr	r2, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fca0 	bl	80011b4 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fc9c 	bl	80011b4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1fa      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xe4>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fc8c 	bl	80011b4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fc88 	bl	80011b4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1e6      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x10c>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e1ba      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4939      	ldr	r1, [pc, #228]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e03a      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fc41 	bl	80011b4 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fc3d 	bl	80011b4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e19b      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc20 	bl	80011b4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff fc1c 	bl	80011b4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e17a      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03a      	beq.n	8001a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fc00 	bl	80011b4 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbfc 	bl	80011b4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e15a      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 faa6 	bl	8001f28 <RCC_Delay>
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fbe6 	bl	80011b4 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ea:	e00f      	b.n	8001a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff fbe2 	bl	80011b4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e140      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	42420000 	.word	0x42420000
 8001a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b9e      	ldr	r3, [pc, #632]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e9      	bne.n	80019ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a6 	beq.w	8001b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b97      	ldr	r3, [pc, #604]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b94      	ldr	r3, [pc, #592]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a93      	ldr	r2, [pc, #588]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b91      	ldr	r3, [pc, #580]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b8e      	ldr	r3, [pc, #568]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a8a      	ldr	r2, [pc, #552]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fba3 	bl	80011b4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7ff fb9f 	bl	80011b4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0fd      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x312>
 8001a98:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e02d      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a72      	ldr	r2, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	e01c      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x356>
 8001ad0:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a6c      	ldr	r2, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a69      	ldr	r2, [pc, #420]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a66      	ldr	r2, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	4b64      	ldr	r3, [pc, #400]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a63      	ldr	r2, [pc, #396]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0304 	bic.w	r3, r3, #4
 8001b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fb53 	bl	80011b4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fb4f 	bl	80011b4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0ab      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ee      	beq.n	8001b12 <HAL_RCC_OscConfig+0x37e>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fb3d 	bl	80011b4 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fb39 	bl	80011b4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e095      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ee      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8081 	beq.w	8001c7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d061      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d146      	bne.n	8001c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_RCC_OscConfig+0x4fc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb0d 	bl	80011b4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb09 	bl	80011b4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e067      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	492d      	ldr	r1, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a19      	ldr	r1, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	430b      	orrs	r3, r1
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x4fc>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fadd 	bl	80011b4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff fad9 	bl	80011b4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e037      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46a>
 8001c1c:	e02f      	b.n	8001c7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_RCC_OscConfig+0x4fc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fac6 	bl	80011b4 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff fac2 	bl	80011b4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e020      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x498>
 8001c4a:	e018      	b.n	8001c7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e013      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42420060 	.word	0x42420060

08001c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d0      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4965      	ldr	r1, [pc, #404]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d040      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e073      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06b      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4936      	ldr	r1, [pc, #216]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff fa16 	bl	80011b4 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff fa12 	bl	80011b4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e053      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d210      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4922      	ldr	r1, [pc, #136]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1cc>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_ClockConfig+0x1d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f974 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002ea0 	.word	0x08002ea0
 8001e60:	20000010 	.word	0x20000010
 8001e64:	20000014 	.word	0x20000014

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b490      	push	{r4, r7}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e70:	1d3c      	adds	r4, r7, #4
 8001e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e78:	f240 2301 	movw	r3, #513	; 0x201
 8001e7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x46>
 8001ea6:	e02d      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eaa:	623b      	str	r3, [r7, #32]
      break;
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eba:	4413      	add	r3, r2
 8001ebc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ec0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0c5b      	lsrs	r3, r3, #17
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eda:	4413      	add	r3, r2
 8001edc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ee0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	fb02 f203 	mul.w	r2, r2, r3
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e004      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	623b      	str	r3, [r7, #32]
      break;
 8001f02:	e002      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f06:	623b      	str	r3, [r7, #32]
      break;
 8001f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc90      	pop	{r4, r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	08002e90 	.word	0x08002e90
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	007a1200 	.word	0x007a1200
 8001f24:	003d0900 	.word	0x003d0900

08001f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <RCC_Delay+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <RCC_Delay+0x38>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f44:	bf00      	nop
  }
  while (Delay --);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	60fa      	str	r2, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <RCC_Delay+0x1c>
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000010 	.word	0x20000010
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fff2 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fc28 	bl	80027f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d001      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e03a      	b.n	8002092 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_TIM_Base_Start_IT+0x98>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800

080020a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e041      	b.n	800213e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f839 	bl	8002146 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f000 fb86 	bl	80027f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_TIM_PWM_Start+0x24>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e022      	b.n	80021c2 <HAL_TIM_PWM_Start+0x6a>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b04      	cmp	r3, #4
 8002180:	d109      	bne.n	8002196 <HAL_TIM_PWM_Start+0x3e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e015      	b.n	80021c2 <HAL_TIM_PWM_Start+0x6a>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d109      	bne.n	80021b0 <HAL_TIM_PWM_Start+0x58>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e008      	b.n	80021c2 <HAL_TIM_PWM_Start+0x6a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e05e      	b.n	8002288 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <HAL_TIM_PWM_Start+0x82>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d8:	e013      	b.n	8002202 <HAL_TIM_PWM_Start+0xaa>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d104      	bne.n	80021ea <HAL_TIM_PWM_Start+0x92>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e8:	e00b      	b.n	8002202 <HAL_TIM_PWM_Start+0xaa>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d104      	bne.n	80021fa <HAL_TIM_PWM_Start+0xa2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	e003      	b.n	8002202 <HAL_TIM_PWM_Start+0xaa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fd74 	bl	8002cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_TIM_PWM_Start+0x138>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d107      	bne.n	800222a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_TIM_PWM_Start+0x138>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00e      	beq.n	8002252 <HAL_TIM_PWM_Start+0xfa>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d009      	beq.n	8002252 <HAL_TIM_PWM_Start+0xfa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_TIM_PWM_Start+0x13c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_TIM_PWM_Start+0xfa>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_TIM_PWM_Start+0x140>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d010      	beq.n	8002286 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	e007      	b.n	8002286 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40000400 	.word	0x40000400
 8002298:	40000800 	.word	0x40000800

0800229c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0202 	mvn.w	r2, #2
 80022c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa6f 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa62 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fa71 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0204 	mvn.w	r2, #4
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa45 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa38 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fa47 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0208 	mvn.w	r2, #8
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2204      	movs	r2, #4
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa1b 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa0e 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa1d 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2208      	movs	r2, #8
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f9f1 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f9e4 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f9f3 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0201 	mvn.w	r2, #1
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fce2 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fce1 	bl	8002e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f9b7 	bl	80027e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b20      	cmp	r3, #32
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0220 	mvn.w	r2, #32
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fcac 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0ac      	b.n	8002620 <HAL_TIM_PWM_ConfigChannel+0x174>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	f200 809f 	bhi.w	8002614 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002511 	.word	0x08002511
 80024e0:	08002615 	.word	0x08002615
 80024e4:	08002615 	.word	0x08002615
 80024e8:	08002615 	.word	0x08002615
 80024ec:	08002551 	.word	0x08002551
 80024f0:	08002615 	.word	0x08002615
 80024f4:	08002615 	.word	0x08002615
 80024f8:	08002615 	.word	0x08002615
 80024fc:	08002593 	.word	0x08002593
 8002500:	08002615 	.word	0x08002615
 8002504:	08002615 	.word	0x08002615
 8002508:	08002615 	.word	0x08002615
 800250c:	080025d3 	.word	0x080025d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f9d0 	bl	80028bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
      break;
 800254e:	e062      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa16 	bl	8002988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6999      	ldr	r1, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	619a      	str	r2, [r3, #24]
      break;
 8002590:	e041      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa5f 	bl	8002a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0208 	orr.w	r2, r2, #8
 80025ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0204 	bic.w	r2, r2, #4
 80025bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
      break;
 80025d0:	e021      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 faa9 	bl	8002b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69d9      	ldr	r1, [r3, #28]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	61da      	str	r2, [r3, #28]
      break;
 8002612:	e000      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x18>
 800263c:	2302      	movs	r3, #2
 800263e:	e0b3      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x180>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800265e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd0>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	f000 8085 	beq.w	8002794 <HAL_TIM_ConfigClockSource+0x16c>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xa2>
 8002694:	2b70      	cmp	r3, #112	; 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x116>
 800269c:	2b60      	cmp	r3, #96	; 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xf6>
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x136>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026b4:	2b30      	cmp	r3, #48	; 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f000 faee 	bl	8002cba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04e      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f000 fad7 	bl	8002cba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa4e 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	; 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 faa5 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fa6c 	bl	8002c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	; 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fa95 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f000 fa2e 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	; 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa85 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fa7c 	bl	8002c86 <TIM_ITRx_SetConfig>
        break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002794:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <TIM_Base_SetConfig+0xb8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x30>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x30>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <TIM_Base_SetConfig+0xbc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x30>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0xc0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <TIM_Base_SetConfig+0xb8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00b      	beq.n	800285a <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <TIM_Base_SetConfig+0xbc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <TIM_Base_SetConfig+0xc0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <TIM_Base_SetConfig+0xb8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	615a      	str	r2, [r3, #20]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <TIM_OC1_SetConfig+0xc8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10c      	bne.n	8002932 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f023 0308 	bic.w	r3, r3, #8
 800291e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <TIM_OC1_SetConfig+0xc8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00

08002988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0210 	bic.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0320 	bic.w	r3, r3, #32
 80029d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <TIM_OC2_SetConfig+0xd0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10d      	bne.n	8002a04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <TIM_OC2_SetConfig+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d113      	bne.n	8002a34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00

08002a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <TIM_OC3_SetConfig+0xd0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <TIM_OC3_SetConfig+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d113      	bne.n	8002b06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00

08002b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <TIM_OC4_SetConfig+0x98>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d109      	bne.n	8002ba4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	019b      	lsls	r3, r3, #6
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00

08002bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 030a 	bic.w	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 0210 	bic.w	r2, r3, #16
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	031b      	lsls	r3, r3, #12
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f043 0307 	orr.w	r3, r3, #7
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e046      	b.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00e      	beq.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d009      	beq.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10c      	bne.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 f822 	bl	8002e78 <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08002eb0 	.word	0x08002eb0
 8002e5c:	08002eb0 	.word	0x08002eb0
 8002e60:	08002eb0 	.word	0x08002eb0
 8002e64:	08002eb4 	.word	0x08002eb4

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
