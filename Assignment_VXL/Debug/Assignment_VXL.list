
Assignment_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b04  08004b04  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004b04  08004b04  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b04  08004b04  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000080  08004b8c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004b8c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a58  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002787  00000000  00000000  00030b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f7  00000000  00000000  00034cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f458  00000000  00000000  0004d5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b14b  00000000  00000000  0005ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  000e7be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a84 	.word	0x08004a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004a84 	.word	0x08004a84

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Init>:
 */

#include "Display.h"


void Init(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	status_col=INIT;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <Init+0x1c>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
	status_row=INIT;
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <Init+0x20>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]

	setTimerCol(10);
 800052c:	200a      	movs	r0, #10
 800052e:	f000 f91b 	bl	8000768 <setTimerCol>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000d0 	.word	0x200000d0
 800053c:	200000d4 	.word	0x200000d4

08000540 <BlinkLed>:

//ham BkinkLed() de thuc hien nhap nhau 4 den cung mau trong trang thai MODE
int status1=0;
void BlinkLed(enum TypeLed L){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	if(timer5_flag==1){
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <BlinkLed+0x68>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d126      	bne.n	80005a0 <BlinkLed+0x60>
		setTimer5(250);
 8000552:	20fa      	movs	r0, #250	; 0xfa
 8000554:	f000 f978 	bl	8000848 <setTimer5>
		if(status1==1){
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <BlinkLed+0x6c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d117      	bne.n	8000590 <BlinkLed+0x50>
			if(L == Red){
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d104      	bne.n	8000570 <BlinkLed+0x30>
				Display_Led_Red1();
 8000566:	f000 f841 	bl	80005ec <Display_Led_Red1>
				Display_Led_Red2();
 800056a:	f000 f87b 	bl	8000664 <Display_Led_Red2>
 800056e:	e011      	b.n	8000594 <BlinkLed+0x54>
			}
			else if(L == Green){
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <BlinkLed+0x40>
				Display_Led_Green1();
 8000576:	f000 f84d 	bl	8000614 <Display_Led_Green1>
				Display_Led_Green2();
 800057a:	f000 f883 	bl	8000684 <Display_Led_Green2>
 800057e:	e009      	b.n	8000594 <BlinkLed+0x54>
			}
			else if(L == Yellow){
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d106      	bne.n	8000594 <BlinkLed+0x54>
				Display_Led_Yellow1();
 8000586:	f000 f859 	bl	800063c <Display_Led_Yellow1>
				Display_Led_Yellow2();
 800058a:	f000 f88b 	bl	80006a4 <Display_Led_Yellow2>
 800058e:	e001      	b.n	8000594 <BlinkLed+0x54>
			}
		}
		else{
			Display_Init();
 8000590:	f000 f80e 	bl	80005b0 <Display_Init>
		}
		status1=1 - status1;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <BlinkLed+0x6c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1c3 0301 	rsb	r3, r3, #1
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <BlinkLed+0x6c>)
 800059e:	6013      	str	r3, [r2, #0]
	}
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000c4 	.word	0x200000c4
 80005ac:	2000009c 	.word	0x2000009c

080005b0 <Display_Init>:


void Display_Init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <Display_Init+0x34>)
 80005bc:	f001 fd2d 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2108      	movs	r1, #8
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <Display_Init+0x38>)
 80005c6:	f001 fd28 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <Display_Init+0x38>)
 80005d0:	f001 fd23 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <Display_Init+0x38>)
 80005da:	f001 fd1e 	bl	800201a <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00

080005ec <Display_Led_Red1>:


void Display_Led_Red1(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <Display_Led_Red1+0x20>)
 80005f8:	f001 fd0f 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <Display_Led_Red1+0x24>)
 8000602:	f001 fd0a 	bl	800201a <HAL_GPIO_WritePin>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010800 	.word	0x40010800
 8000610:	40010c00 	.word	0x40010c00

08000614 <Display_Led_Green1>:
void Display_Led_Green1(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <Display_Led_Green1+0x20>)
 8000620:	f001 fcfb 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2108      	movs	r1, #8
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <Display_Led_Green1+0x24>)
 800062a:	f001 fcf6 	bl	800201a <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <Display_Led_Yellow1>:
void Display_Led_Yellow1(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <Display_Led_Yellow1+0x20>)
 8000648:	f001 fce7 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <Display_Led_Yellow1+0x24>)
 8000652:	f001 fce2 	bl	800201a <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010800 	.word	0x40010800
 8000660:	40010c00 	.word	0x40010c00

08000664 <Display_Led_Red2>:

void Display_Led_Red2(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2120      	movs	r1, #32
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <Display_Led_Red2+0x1c>)
 800066e:	f001 fcd4 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	4802      	ldr	r0, [pc, #8]	; (8000680 <Display_Led_Red2+0x1c>)
 8000678:	f001 fccf 	bl	800201a <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010c00 	.word	0x40010c00

08000684 <Display_Led_Green2>:
void Display_Led_Green2(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <Display_Led_Green2+0x1c>)
 800068e:	f001 fcc4 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <Display_Led_Green2+0x1c>)
 8000698:	f001 fcbf 	bl	800201a <HAL_GPIO_WritePin>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010c00 	.word	0x40010c00

080006a4 <Display_Led_Yellow2>:
void Display_Led_Yellow2(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <Display_Led_Yellow2+0x1c>)
 80006ae:	f001 fcb4 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <Display_Led_Yellow2+0x1c>)
 80006b8:	f001 fcaf 	bl	800201a <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <Display_P_Led_Reset>:
//}
//void Display_P_Led_Green1(){
//	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_SET);
//}
void Display_P_Led_Reset(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <Display_P_Led_Reset+0x20>)
 80006d0:	f001 fca3 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <Display_P_Led_Reset+0x20>)
 80006dc:	f001 fc9d 	bl	800201a <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <Display_P_Led_Red1>:
void Display_P_Led_Red1(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <Display_P_Led_Red1+0x20>)
 80006f4:	f001 fc91 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <Display_P_Led_Red1+0x20>)
 8000700:	f001 fc8b 	bl	800201a <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010c00 	.word	0x40010c00

0800070c <Display_P_Led_Green1>:
void Display_P_Led_Green1(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <Display_P_Led_Green1+0x20>)
 8000718:	f001 fc7f 	bl	800201a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pled1_GPIO_Port, pled2_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <Display_P_Led_Green1+0x20>)
 8000724:	f001 fc79 	bl	800201a <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010c00 	.word	0x40010c00

08000730 <setTimerBuzzer>:
int timer5_flag = 0;

int timerBuzzer_counter = 0;
int timerBuzzer_flag = 0;

void setTimerBuzzer(int duration){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	timerBuzzer_counter = duration/TICK;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <setTimerBuzzer+0x2c>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1092      	asrs	r2, r2, #2
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4a06      	ldr	r2, [pc, #24]	; (8000760 <setTimerBuzzer+0x30>)
 8000748:	6013      	str	r3, [r2, #0]
	timerBuzzer_flag = 0;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <setTimerBuzzer+0x34>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	66666667 	.word	0x66666667
 8000760:	200000c8 	.word	0x200000c8
 8000764:	200000cc 	.word	0x200000cc

08000768 <setTimerCol>:

void setTimerCol(int duration){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	timerCol_counter = duration/TICK;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <setTimerCol+0x2c>)
 8000774:	fb82 1203 	smull	r1, r2, r2, r3
 8000778:	1092      	asrs	r2, r2, #2
 800077a:	17db      	asrs	r3, r3, #31
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <setTimerCol+0x30>)
 8000780:	6013      	str	r3, [r2, #0]
	timerCol_flag = 0;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <setTimerCol+0x34>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	66666667 	.word	0x66666667
 8000798:	200000a0 	.word	0x200000a0
 800079c:	200000a4 	.word	0x200000a4

080007a0 <setTimer2>:

void setTimer2(int duration){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <setTimer2+0x2c>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	1092      	asrs	r2, r2, #2
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <setTimer2+0x30>)
 80007b8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <setTimer2+0x34>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	66666667 	.word	0x66666667
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	200000ac 	.word	0x200000ac

080007d8 <setTimerUart>:

void setTimerUart(int duration){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	timerUart_counter = duration/TICK;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <setTimerUart+0x2c>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1092      	asrs	r2, r2, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <setTimerUart+0x30>)
 80007f0:	6013      	str	r3, [r2, #0]
	timerUart_flag = 0;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <setTimerUart+0x34>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	66666667 	.word	0x66666667
 8000808:	200000b0 	.word	0x200000b0
 800080c:	200000b4 	.word	0x200000b4

08000810 <setTimerRow>:

void setTimerRow(int duration){
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	timerRow_counter = duration/TICK;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <setTimerRow+0x2c>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1092      	asrs	r2, r2, #2
 8000822:	17db      	asrs	r3, r3, #31
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <setTimerRow+0x30>)
 8000828:	6013      	str	r3, [r2, #0]
	timerRow_flag = 0;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <setTimerRow+0x34>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	66666667 	.word	0x66666667
 8000840:	200000b8 	.word	0x200000b8
 8000844:	200000bc 	.word	0x200000bc

08000848 <setTimer5>:

void setTimer5(int duration){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <setTimer5+0x2c>)
 8000854:	fb82 1203 	smull	r1, r2, r2, r3
 8000858:	1092      	asrs	r2, r2, #2
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <setTimer5+0x30>)
 8000860:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <setTimer5+0x34>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	66666667 	.word	0x66666667
 8000878:	200000c0 	.word	0x200000c0
 800087c:	200000c4 	.word	0x200000c4

08000880 <timerRun>:

void timerRun(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	if(timerCol_counter > 0){
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <timerRun+0xcc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dd0b      	ble.n	80008a4 <timerRun+0x24>
		timerCol_counter--;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <timerRun+0xcc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <timerRun+0xcc>)
 8000894:	6013      	str	r3, [r2, #0]
		if(timerCol_counter == 0){
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <timerRun+0xcc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d102      	bne.n	80008a4 <timerRun+0x24>
			timerCol_flag = 1;
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <timerRun+0xd0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <timerRun+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dd0b      	ble.n	80008c4 <timerRun+0x44>
		timer2_counter--;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <timerRun+0xd4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	4a28      	ldr	r2, [pc, #160]	; (8000954 <timerRun+0xd4>)
 80008b4:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <timerRun+0xd4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <timerRun+0x44>
			timer2_flag = 1;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <timerRun+0xd8>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerUart_counter > 0){
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <timerRun+0xdc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dd0b      	ble.n	80008e4 <timerRun+0x64>
		timerUart_counter--;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <timerRun+0xdc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	4a22      	ldr	r2, [pc, #136]	; (800095c <timerRun+0xdc>)
 80008d4:	6013      	str	r3, [r2, #0]
		if(timerUart_counter == 0){
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <timerRun+0xdc>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <timerRun+0x64>
			timerUart_flag = 1;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <timerRun+0xe0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerRow_counter > 0){
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <timerRun+0xe4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dd0b      	ble.n	8000904 <timerRun+0x84>
		timerRow_counter--;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <timerRun+0xe4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <timerRun+0xe4>)
 80008f4:	6013      	str	r3, [r2, #0]
		if(timerRow_counter == 0){
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <timerRun+0xe4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <timerRun+0x84>
			timerRow_flag = 1;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <timerRun+0xe8>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <timerRun+0xec>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	dd0b      	ble.n	8000924 <timerRun+0xa4>
		timer5_counter--;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <timerRun+0xec>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <timerRun+0xec>)
 8000914:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <timerRun+0xec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <timerRun+0xa4>
			timer5_flag = 1;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <timerRun+0xf0>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerBuzzer_counter > 0){
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <timerRun+0xf4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd0b      	ble.n	8000944 <timerRun+0xc4>
		timerBuzzer_counter--;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <timerRun+0xf4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <timerRun+0xf4>)
 8000934:	6013      	str	r3, [r2, #0]
		if(timerBuzzer_counter == 0){
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <timerRun+0xf4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <timerRun+0xc4>
			timerBuzzer_flag = 1;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <timerRun+0xf8>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	200000a0 	.word	0x200000a0
 8000950:	200000a4 	.word	0x200000a4
 8000954:	200000a8 	.word	0x200000a8
 8000958:	200000ac 	.word	0x200000ac
 800095c:	200000b0 	.word	0x200000b0
 8000960:	200000b4 	.word	0x200000b4
 8000964:	200000b8 	.word	0x200000b8
 8000968:	200000bc 	.word	0x200000bc
 800096c:	200000c0 	.word	0x200000c0
 8000970:	200000c4 	.word	0x200000c4
 8000974:	200000c8 	.word	0x200000c8
 8000978:	200000cc 	.word	0x200000cc

0800097c <ReadButton>:
#include "button.h"
#include "main.h"

//add more case if you have more buttons
int ReadButton(int i){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d822      	bhi.n	80009d0 <ReadButton+0x54>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <ReadButton+0x14>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009ad 	.word	0x080009ad
 8000998:	080009b9 	.word	0x080009b9
 800099c:	080009c5 	.word	0x080009c5
	switch(i){
		case 0:
			return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009a0:	2102      	movs	r1, #2
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <ReadButton+0x60>)
 80009a4:	f001 fb22 	bl	8001fec <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	e013      	b.n	80009d4 <ReadButton+0x58>
		case 1:
			return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80009ac:	2110      	movs	r1, #16
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <ReadButton+0x60>)
 80009b0:	f001 fb1c 	bl	8001fec <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	e00d      	b.n	80009d4 <ReadButton+0x58>
		case 2:
			return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80009b8:	2101      	movs	r1, #1
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <ReadButton+0x64>)
 80009bc:	f001 fb16 	bl	8001fec <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	e007      	b.n	80009d4 <ReadButton+0x58>
		case 3:
			return HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	2101      	movs	r1, #1
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <ReadButton+0x60>)
 80009c8:	f001 fb10 	bl	8001fec <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	e001      	b.n	80009d4 <ReadButton+0x58>
		default:
			break;
 80009d0:	bf00      	nop
	}
	return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40010800 	.word	0x40010800
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <subKeyProcess>:
		KeyReg3[i]= NORMAL_STATE;
		TimeForKeyPress[i]= 200;
	}
}

void subKeyProcess(int i){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <subKeyProcess+0x1c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2101      	movs	r1, #1
 80009f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000120 	.word	0x20000120

08000a04 <isButtonPressed>:

int isButtonPressed(int i){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <isButtonPressed+0x30>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d106      	bne.n	8000a26 <isButtonPressed+0x22>
		button_flag[i]=0;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <isButtonPressed+0x30>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <isButtonPressed+0x24>
	}
	return 0;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000120 	.word	0x20000120

08000a38 <getKeyInput>:


void getKeyInput(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e063      	b.n	8000b0c <getKeyInput+0xd4>
		KeyReg0[i]= KeyReg1[i];
 8000a44:	4a35      	ldr	r2, [pc, #212]	; (8000b1c <getKeyInput+0xe4>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <getKeyInput+0xe8>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i]= KeyReg2[i];
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <getKeyInput+0xec>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5c:	492f      	ldr	r1, [pc, #188]	; (8000b1c <getKeyInput+0xe4>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i]= ReadButton(i);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff89 	bl	800097c <ReadButton>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	492d      	ldr	r1, [pc, #180]	; (8000b24 <getKeyInput+0xec>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a74:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <getKeyInput+0xe4>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a7c:	4928      	ldr	r1, [pc, #160]	; (8000b20 <getKeyInput+0xe8>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d13e      	bne.n	8000b06 <getKeyInput+0xce>
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <getKeyInput+0xe4>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a90:	4924      	ldr	r1, [pc, #144]	; (8000b24 <getKeyInput+0xec>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d134      	bne.n	8000b06 <getKeyInput+0xce>
			if (KeyReg3[i] != KeyReg2[i]){
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <getKeyInput+0xf0>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa4:	491f      	ldr	r1, [pc, #124]	; (8000b24 <getKeyInput+0xec>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d016      	beq.n	8000ade <getKeyInput+0xa6>
			  KeyReg3[i] = KeyReg2[i];
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <getKeyInput+0xec>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab8:	491b      	ldr	r1, [pc, #108]	; (8000b28 <getKeyInput+0xf0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <getKeyInput+0xec>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11c      	bne.n	8000b06 <getKeyInput+0xce>
				  TimeForKeyPress[i] = 200;
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <getKeyInput+0xf4>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	21c8      	movs	r1, #200	; 0xc8
 8000ad2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  //TODO
				  subKeyProcess(i);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff84 	bl	80009e4 <subKeyProcess>
 8000adc:	e013      	b.n	8000b06 <getKeyInput+0xce>
			  }
			} else {
				TimeForKeyPress[i]--;
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <getKeyInput+0xf4>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	4910      	ldr	r1, [pc, #64]	; (8000b2c <getKeyInput+0xf4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeForKeyPress[i] == 0){
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <getKeyInput+0xf4>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d104      	bne.n	8000b06 <getKeyInput+0xce>
					//TODO
					KeyReg3[i]= NORMAL_STATE;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <getKeyInput+0xf0>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2101      	movs	r1, #1
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	dd98      	ble.n	8000a44 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000110 	.word	0x20000110
 8000b20:	20000100 	.word	0x20000100
 8000b24:	20000130 	.word	0x20000130
 8000b28:	200000f0 	.word	0x200000f0
 8000b2c:	20000140 	.word	0x20000140

08000b30 <press_ped_lag>:
#include "fsm_automatic.h"

void press_ped_lag(){
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	flag_pad=1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <press_ped_lag+0x18>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
	cycle_pad = 0;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <press_ped_lag+0x1c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200000d8 	.word	0x200000d8

08000b50 <reset_pad_led>:
void reset_pad_led(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	flag_pad=0;
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <reset_pad_led+0x18>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
	cycle_pad=0;
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <reset_pad_led+0x1c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	Display_P_Led_Reset();
 8000b60:	f7ff fdb0 	bl	80006c4 <Display_P_Led_Reset>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200000d8 	.word	0x200000d8

08000b70 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	//quan ly den tin hieu hang doc
	switch(status_col){
 8000b76:	4ba6      	ldr	r3, [pc, #664]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f200 809a 	bhi.w	8000cb6 <fsm_automatic_run+0x146>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <fsm_automatic_run+0x18>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000b99 	.word	0x08000b99
 8000b8c:	08000bb9 	.word	0x08000bb9
 8000b90:	08000c11 	.word	0x08000c11
 8000b94:	08000c69 	.word	0x08000c69
		case INIT:
			Display_Init();
 8000b98:	f7ff fd0a 	bl	80005b0 <Display_Init>
			//chuyen trang thai ko dk
			status_col=AUTO_RED;
 8000b9c:	4b9c      	ldr	r3, [pc, #624]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	601a      	str	r2, [r3, #0]
			setTimerCol(Time_Auto_Red);
 8000ba2:	4b9c      	ldr	r3, [pc, #624]	; (8000e14 <fsm_automatic_run+0x2a4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fdde 	bl	8000768 <setTimerCol>
			//dat gia tri bien dem time_value de hien thi tren terminal
			set_time_value(Time_Auto_Red);
 8000bac:	4b99      	ldr	r3, [pc, #612]	; (8000e14 <fsm_automatic_run+0x2a4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f9f5 	bl	8000fa0 <set_time_value>
			break;
 8000bb6:	e085      	b.n	8000cc4 <fsm_automatic_run+0x154>
		case AUTO_RED:
			Display_Led_Red1();
 8000bb8:	f7ff fd18 	bl	80005ec <Display_Led_Red1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 8000bbc:	4b96      	ldr	r3, [pc, #600]	; (8000e18 <fsm_automatic_run+0x2a8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10c      	bne.n	8000bde <fsm_automatic_run+0x6e>
				status_col=AUTO_GREEN;
 8000bc4:	4b92      	ldr	r3, [pc, #584]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Green);
 8000bca:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <fsm_automatic_run+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fdca 	bl	8000768 <setTimerCol>
				//dat gia tri bien dem time_value de hien thi tren terminal
				set_time_value(Time_Auto_Green);
 8000bd4:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <fsm_automatic_run+0x2ac>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f9e1 	bl	8000fa0 <set_time_value>
			}
			//trang thai mode 2
			if(isButtonPressed(0)==1){
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff10 	bl	8000a04 <isButtonPressed>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d109      	bne.n	8000bfe <fsm_automatic_run+0x8e>
				status_col=MAN_RED;
 8000bea:	4b89      	ldr	r3, [pc, #548]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000bec:	220c      	movs	r2, #12
 8000bee:	601a      	str	r2, [r3, #0]
				status_row=MAN_RED;
 8000bf0:	4b8b      	ldr	r3, [pc, #556]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8000bf6:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000bfa:	f7ff fdb5 	bl	8000768 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f7ff ff00 	bl	8000a04 <isButtonPressed>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d157      	bne.n	8000cba <fsm_automatic_run+0x14a>
				press_ped_lag();
 8000c0a:	f7ff ff91 	bl	8000b30 <press_ped_lag>
			}
			break;
 8000c0e:	e054      	b.n	8000cba <fsm_automatic_run+0x14a>
		case AUTO_GREEN:
			Display_Led_Green1();
 8000c10:	f7ff fd00 	bl	8000614 <Display_Led_Green1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 8000c14:	4b80      	ldr	r3, [pc, #512]	; (8000e18 <fsm_automatic_run+0x2a8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d10c      	bne.n	8000c36 <fsm_automatic_run+0xc6>
				status_col=AUTO_YELLOW;
 8000c1c:	4b7c      	ldr	r3, [pc, #496]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Yellow);
 8000c22:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <fsm_automatic_run+0x2b4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd9e 	bl	8000768 <setTimerCol>
				//dat gia tri bien dem time_value de hien thi tren terminal
				set_time_value(Time_Auto_Yellow);
 8000c2c:	4b7d      	ldr	r3, [pc, #500]	; (8000e24 <fsm_automatic_run+0x2b4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f9b5 	bl	8000fa0 <set_time_value>
			}
			if(isButtonPressed(0)==1){
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fee4 	bl	8000a04 <isButtonPressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d109      	bne.n	8000c56 <fsm_automatic_run+0xe6>
				status_col=MAN_GREEN;
 8000c42:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000c44:	220d      	movs	r2, #13
 8000c46:	601a      	str	r2, [r3, #0]
				status_row=MAN_GREEN;
 8000c48:	4b75      	ldr	r3, [pc, #468]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000c4a:	220d      	movs	r2, #13
 8000c4c:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8000c4e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000c52:	f7ff fd89 	bl	8000768 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 8000c56:	2003      	movs	r0, #3
 8000c58:	f7ff fed4 	bl	8000a04 <isButtonPressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d12d      	bne.n	8000cbe <fsm_automatic_run+0x14e>
				press_ped_lag();
 8000c62:	f7ff ff65 	bl	8000b30 <press_ped_lag>
			}
			break;
 8000c66:	e02a      	b.n	8000cbe <fsm_automatic_run+0x14e>
		case AUTO_YELLOW:
			Display_Led_Yellow1();
 8000c68:	f7ff fce8 	bl	800063c <Display_Led_Yellow1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 8000c6c:	4b6a      	ldr	r3, [pc, #424]	; (8000e18 <fsm_automatic_run+0x2a8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d107      	bne.n	8000c84 <fsm_automatic_run+0x114>
				status_col=AUTO_RED;
 8000c74:	4b66      	ldr	r3, [pc, #408]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Red);
 8000c7a:	4b66      	ldr	r3, [pc, #408]	; (8000e14 <fsm_automatic_run+0x2a4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fd72 	bl	8000768 <setTimerCol>
			}
			if(isButtonPressed(0)==1){
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff febd 	bl	8000a04 <isButtonPressed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d109      	bne.n	8000ca4 <fsm_automatic_run+0x134>
				status_col=MAN_YELLOW;
 8000c90:	4b5f      	ldr	r3, [pc, #380]	; (8000e10 <fsm_automatic_run+0x2a0>)
 8000c92:	220e      	movs	r2, #14
 8000c94:	601a      	str	r2, [r3, #0]
				status_row=MAN_YELLOW;
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000c98:	220e      	movs	r2, #14
 8000c9a:	601a      	str	r2, [r3, #0]

				setTimerCol(MODE_TIME);
 8000c9c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000ca0:	f7ff fd62 	bl	8000768 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f7ff fead 	bl	8000a04 <isButtonPressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <fsm_automatic_run+0x152>
				press_ped_lag();
 8000cb0:	f7ff ff3e 	bl	8000b30 <press_ped_lag>
			}
			break;
 8000cb4:	e005      	b.n	8000cc2 <fsm_automatic_run+0x152>
//					status_row=INIT;
//				}
//			}
//			break;
		default:
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e004      	b.n	8000cc4 <fsm_automatic_run+0x154>
			break;
 8000cba:	bf00      	nop
 8000cbc:	e002      	b.n	8000cc4 <fsm_automatic_run+0x154>
			break;
 8000cbe:	bf00      	nop
 8000cc0:	e000      	b.n	8000cc4 <fsm_automatic_run+0x154>
			break;
 8000cc2:	bf00      	nop
	}
///////////////////////////////////////////////////////////////////////
	//quan ly den tin hieu hang ngang
	switch(status_row){
 8000cc4:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	f200 8094 	bhi.w	8000df8 <fsm_automatic_run+0x288>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <fsm_automatic_run+0x168>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000ce9 	.word	0x08000ce9
 8000cdc:	08000cff 	.word	0x08000cff
 8000ce0:	08000d2f 	.word	0x08000d2f
 8000ce4:	08000dcf 	.word	0x08000dcf
		case INIT:
			Display_Init();
 8000ce8:	f7ff fc62 	bl	80005b0 <Display_Init>

			//chuyen trang thai ko dk
			status_row=AUTO_GREEN;
 8000cec:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	601a      	str	r2, [r3, #0]
			setTimerRow(Time_Auto_Green);
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <fsm_automatic_run+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd8a 	bl	8000810 <setTimerRow>
			break;
 8000cfc:	e083      	b.n	8000e06 <fsm_automatic_run+0x296>
		case AUTO_RED:
			if(flag_pad==1) Display_P_Led_Red1();
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <fsm_automatic_run+0x2b8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <fsm_automatic_run+0x19a>
 8000d06:	f7ff fcef 	bl	80006e8 <Display_P_Led_Red1>

			Display_Led_Red2();
 8000d0a:	f7ff fcab 	bl	8000664 <Display_Led_Red2>

			//chuyen trang thai co dk
			if(timerRow_flag==1){
 8000d0e:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <fsm_automatic_run+0x2bc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d172      	bne.n	8000dfc <fsm_automatic_run+0x28c>
				status_row=AUTO_GREEN;
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Green);
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <fsm_automatic_run+0x2ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd75 	bl	8000810 <setTimerRow>
				setTimerBuzzer(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f7ff fd02 	bl	8000730 <setTimerBuzzer>
			}
			break;
 8000d2c:	e066      	b.n	8000dfc <fsm_automatic_run+0x28c>
		case AUTO_GREEN:
			if(flag_pad==1) {
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <fsm_automatic_run+0x2b8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d130      	bne.n	8000d98 <fsm_automatic_run+0x228>
				Display_P_Led_Green1();
 8000d36:	f7ff fce9 	bl	800070c <Display_P_Led_Green1>
				//thuc hien buzzer
				if (timerBuzzer_flag == 1){
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <fsm_automatic_run+0x2c0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d12a      	bne.n	8000d98 <fsm_automatic_run+0x228>
					float per = (float)(time_value / Time_Auto_Green);
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <fsm_automatic_run+0x2c4>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <fsm_automatic_run+0x2ac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb6a 	bl	8000428 <__aeabi_i2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	607b      	str	r3, [r7, #4]
					setTimerBuzzer((int)(3000 * per));
 8000d58:	4937      	ldr	r1, [pc, #220]	; (8000e38 <fsm_automatic_run+0x2c8>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff f9f6 	bl	800014c <__aeabi_fmul>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fbb4 	bl	80004d0 <__aeabi_f2iz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fce0 	bl	8000730 <setTimerBuzzer>
					Buzzer(100 - (int)(80 * (1 - per)));
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000d76:	f7ff faa1 	bl	80002bc <__aeabi_fsub>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	492f      	ldr	r1, [pc, #188]	; (8000e3c <fsm_automatic_run+0x2cc>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff f9e4 	bl	800014c <__aeabi_fmul>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fba2 	bl	80004d0 <__aeabi_f2iz>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f954 	bl	8001040 <Buzzer>
				}
			}
			Display_Led_Green2();
 8000d98:	f7ff fc74 	bl	8000684 <Display_Led_Green2>

			//chuyen trang thai co dk
			if(timerRow_flag==1){
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <fsm_automatic_run+0x2bc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d12d      	bne.n	8000e00 <fsm_automatic_run+0x290>
				if (cycle_pad >= 1){
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <fsm_automatic_run+0x2d0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	dd02      	ble.n	8000db2 <fsm_automatic_run+0x242>
					reset_pad_led();//tat den cho nguoi di duong
 8000dac:	f7ff fed0 	bl	8000b50 <reset_pad_led>
 8000db0:	e004      	b.n	8000dbc <fsm_automatic_run+0x24c>
				}
				else cycle_pad++;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <fsm_automatic_run+0x2d0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <fsm_automatic_run+0x2d0>)
 8000dba:	6013      	str	r3, [r2, #0]
				status_row=AUTO_YELLOW;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Yellow);
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <fsm_automatic_run+0x2b4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd22 	bl	8000810 <setTimerRow>
			}
			break;
 8000dcc:	e018      	b.n	8000e00 <fsm_automatic_run+0x290>
		case AUTO_YELLOW:
			Display_Led_Yellow2();
 8000dce:	f7ff fc69 	bl	80006a4 <Display_Led_Yellow2>
			if(flag_pad==1) Display_P_Led_Red1();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <fsm_automatic_run+0x2b8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <fsm_automatic_run+0x26e>
 8000dda:	f7ff fc85 	bl	80006e8 <Display_P_Led_Red1>
			//chuyen trang thai co dk
			if(timerRow_flag==1){
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <fsm_automatic_run+0x2bc>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d10e      	bne.n	8000e04 <fsm_automatic_run+0x294>
				status_row=AUTO_RED;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <fsm_automatic_run+0x2b0>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Red);
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <fsm_automatic_run+0x2a4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fd0d 	bl	8000810 <setTimerRow>
			}
			break;
 8000df6:	e005      	b.n	8000e04 <fsm_automatic_run+0x294>
		default:
			break;
 8000df8:	bf00      	nop
 8000dfa:	e004      	b.n	8000e06 <fsm_automatic_run+0x296>
			break;
 8000dfc:	bf00      	nop
 8000dfe:	e002      	b.n	8000e06 <fsm_automatic_run+0x296>
			break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <fsm_automatic_run+0x296>
			break;
 8000e04:	bf00      	nop
	}

	///////////////////////////////////////////////////////////////////


}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000d0 	.word	0x200000d0
 8000e14:	20000004 	.word	0x20000004
 8000e18:	200000a4 	.word	0x200000a4
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200000d4 	.word	0x200000d4
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	200000bc 	.word	0x200000bc
 8000e30:	200000cc 	.word	0x200000cc
 8000e34:	200000dc 	.word	0x200000dc
 8000e38:	453b8000 	.word	0x453b8000
 8000e3c:	42a00000 	.word	0x42a00000
 8000e40:	200000d8 	.word	0x200000d8

08000e44 <fsm_manual_run>:

// fsm_manial_run() thuc hien kiem tra khi nhan button1
// button1 duoc nhan thi chuyen sang trang thai MODE duy tri trong 1 khoang thoi gian(MODE_TIME)
// trong MODE_TIME co the tien hanh chinh sua thoi gian cac LEDs bang button2, button3(duoc hien thuc trong modification_mode.c)
// het MODE_TIME se chuyen lai trang thai 1(automatic)
void fsm_manual_run(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	switch(status_col){
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <fsm_manual_run+0xf0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b0e      	cmp	r3, #14
 8000e4e:	d046      	beq.n	8000ede <fsm_manual_run+0x9a>
 8000e50:	2b0e      	cmp	r3, #14
 8000e52:	dc66      	bgt.n	8000f22 <fsm_manual_run+0xde>
 8000e54:	2b0c      	cmp	r3, #12
 8000e56:	d002      	beq.n	8000e5e <fsm_manual_run+0x1a>
 8000e58:	2b0d      	cmp	r3, #13
 8000e5a:	d01e      	beq.n	8000e9a <fsm_manual_run+0x56>

				set_time_value(Time_Auto_Red);
			}
			break;
		default:
			break;
 8000e5c:	e061      	b.n	8000f22 <fsm_manual_run+0xde>
			BlinkLed(Red);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fb6e 	bl	8000540 <BlinkLed>
			modification_mode();
 8000e64:	f000 fb04 	bl	8001470 <modification_mode>
			if(timerCol_flag==1){
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <fsm_manual_run+0xf4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <fsm_manual_run+0x30>
				Init();
 8000e70:	f7ff fb54 	bl	800051c <Init>
			if(isButtonPressed(0)==1){
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fdc5 	bl	8000a04 <isButtonPressed>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d152      	bne.n	8000f26 <fsm_manual_run+0xe2>
				status_col=MAN_GREEN;
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <fsm_manual_run+0xf0>)
 8000e82:	220d      	movs	r2, #13
 8000e84:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8000e86:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000e8a:	f7ff fc6d 	bl	8000768 <setTimerCol>
				set_time_value(Time_Auto_Green);
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <fsm_manual_run+0xf8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f884 	bl	8000fa0 <set_time_value>
			break;
 8000e98:	e045      	b.n	8000f26 <fsm_manual_run+0xe2>
			BlinkLed(Green);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fb50 	bl	8000540 <BlinkLed>
			modification_mode();
 8000ea0:	f000 fae6 	bl	8001470 <modification_mode>
			if(timerCol_flag==1){
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <fsm_manual_run+0xf4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d105      	bne.n	8000eb8 <fsm_manual_run+0x74>
				status_col=INIT;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <fsm_manual_run+0xf0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <fsm_manual_run+0xfc>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fda3 	bl	8000a04 <isButtonPressed>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d132      	bne.n	8000f2a <fsm_manual_run+0xe6>
				status_col=MAN_YELLOW;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <fsm_manual_run+0xf0>)
 8000ec6:	220e      	movs	r2, #14
 8000ec8:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8000eca:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000ece:	f7ff fc4b 	bl	8000768 <setTimerCol>
				set_time_value(Time_Auto_Yellow);
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <fsm_manual_run+0x100>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f862 	bl	8000fa0 <set_time_value>
			break;
 8000edc:	e025      	b.n	8000f2a <fsm_manual_run+0xe6>
			BlinkLed(Yellow);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff fb2e 	bl	8000540 <BlinkLed>
			modification_mode();
 8000ee4:	f000 fac4 	bl	8001470 <modification_mode>
			if(timerCol_flag==1){
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <fsm_manual_run+0xf4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d105      	bne.n	8000efc <fsm_manual_run+0xb8>
				status_col=INIT;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <fsm_manual_run+0xf0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <fsm_manual_run+0xfc>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fd81 	bl	8000a04 <isButtonPressed>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d112      	bne.n	8000f2e <fsm_manual_run+0xea>
				status_col=MAN_RED;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <fsm_manual_run+0xf0>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8000f0e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000f12:	f7ff fc29 	bl	8000768 <setTimerCol>
				set_time_value(Time_Auto_Red);
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <fsm_manual_run+0x104>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f840 	bl	8000fa0 <set_time_value>
			break;
 8000f20:	e005      	b.n	8000f2e <fsm_manual_run+0xea>
			break;
 8000f22:	bf00      	nop
 8000f24:	e004      	b.n	8000f30 <fsm_manual_run+0xec>
			break;
 8000f26:	bf00      	nop
 8000f28:	e002      	b.n	8000f30 <fsm_manual_run+0xec>
			break;
 8000f2a:	bf00      	nop
 8000f2c:	e000      	b.n	8000f30 <fsm_manual_run+0xec>
			break;
 8000f2e:	bf00      	nop
	}
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000d0 	.word	0x200000d0
 8000f38:	200000a4 	.word	0x200000a4
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200000d4 	.word	0x200000d4
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000004 	.word	0x20000004

08000f4c <set_Time_Auto_Red>:
int Time_Auto_Red =5000;
int Time_Auto_Green =2000;
int Time_Auto_Yellow = 3000;


void set_Time_Auto_Red(int duration){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	Time_Auto_Red = duration;
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <set_Time_Auto_Red+0x18>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000004 	.word	0x20000004

08000f68 <set_Time_Auto_Green>:
void set_Time_Auto_Green(int duration){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	Time_Auto_Green = duration;
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <set_Time_Auto_Green+0x18>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000008 	.word	0x20000008

08000f84 <set_Time_Auto_Yellow>:
void set_Time_Auto_Yellow(int duration){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	Time_Auto_Yellow = duration;
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <set_Time_Auto_Yellow+0x18>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <set_time_value>:


int time_value=0;
void set_time_value(int duration){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	time_value=duration / 1000;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <set_time_value+0x24>)
 8000fac:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb0:	1192      	asrs	r2, r2, #6
 8000fb2:	17db      	asrs	r3, r3, #31
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <set_time_value+0x28>)
 8000fb8:	6013      	str	r3, [r2, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	10624dd3 	.word	0x10624dd3
 8000fc8:	200000dc 	.word	0x200000dc

08000fcc <HAL_UART_RxCpltCallback>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <HAL_UART_RxCpltCallback+0x5c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d11f      	bne.n	800101e <HAL_UART_RxCpltCallback+0x52>

		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000fde:	2332      	movs	r3, #50	; 0x32
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4912      	ldr	r1, [pc, #72]	; (800102c <HAL_UART_RxCpltCallback+0x60>)
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <HAL_UART_RxCpltCallback+0x64>)
 8000fe6:	f002 fbf6 	bl	80037d6 <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_UART_RxCpltCallback+0x68>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	b2d1      	uxtb	r1, r2
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_UART_RxCpltCallback+0x68>)
 8000ff4:	7011      	strb	r1, [r2, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_UART_RxCpltCallback+0x60>)
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_RxCpltCallback+0x6c>)
 8000ffe:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_UART_RxCpltCallback+0x68>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b1e      	cmp	r3, #30
 8001006:	d102      	bne.n	800100e <HAL_UART_RxCpltCallback+0x42>
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_UART_RxCpltCallback+0x68>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_UART_RxCpltCallback+0x70>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	4905      	ldr	r1, [pc, #20]	; (800102c <HAL_UART_RxCpltCallback+0x60>)
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_RxCpltCallback+0x64>)
 800101a:	f002 fc6e 	bl	80038fa <HAL_UART_Receive_IT>
	}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	200000e0 	.word	0x200000e0
 8001030:	20000200 	.word	0x20000200
 8001034:	200000e1 	.word	0x200000e1
 8001038:	20000198 	.word	0x20000198
 800103c:	200000e2 	.word	0x200000e2

08001040 <Buzzer>:


void Buzzer(int intensity){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, intensity);
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <Buzzer+0x24>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <Buzzer+0x24>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000150 	.word	0x20000150

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f000 fc19 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f84f 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f000 f97b 	bl	8001370 <MX_GPIO_Init>
  MX_TIM3_Init();
 800107a:	f000 f8d9 	bl	8001230 <MX_TIM3_Init>
  MX_TIM2_Init();
 800107e:	f000 f88b 	bl	8001198 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001082:	f000 f94b 	bl	800131c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001086:	2100      	movs	r1, #0
 8001088:	481b      	ldr	r0, [pc, #108]	; (80010f8 <main+0x90>)
 800108a:	f001 fcf3 	bl	8002a74 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800108e:	481b      	ldr	r0, [pc, #108]	; (80010fc <main+0x94>)
 8001090:	f001 fc46 	bl	8002920 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8001094:	2201      	movs	r2, #1
 8001096:	491a      	ldr	r1, [pc, #104]	; (8001100 <main+0x98>)
 8001098:	481a      	ldr	r0, [pc, #104]	; (8001104 <main+0x9c>)
 800109a:	f002 fc2e 	bl	80038fa <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init();
 800109e:	f7ff fa3d 	bl	800051c <Init>


  setTimer2(10);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f7ff fb7c 	bl	80007a0 <setTimer2>
  setTimerUart(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f7ff fb95 	bl	80007d8 <setTimerUart>
  setTimer5(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f7ff fbca 	bl	8000848 <setTimer5>
  char str[20];
//  int speaker_intensity=0;
//  set_time_value() duoc dat trong fsm_automatic
  while (1)
  {
	  fsm_automatic_run();
 80010b4:	f7ff fd5c 	bl	8000b70 <fsm_automatic_run>
	  fsm_manual_run();
 80010b8:	f7ff fec4 	bl	8000e44 <fsm_manual_run>

	if(timerUart_flag==1){
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0xa0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d1f7      	bne.n	80010b4 <main+0x4c>
		setTimerUart(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f7ff fb86 	bl	80007d8 <setTimerUart>
		time_value--;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <main+0xa4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <main+0xa4>)
 80010d4:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str,"!7SEG:%2d\n",time_value), 1000);
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <main+0xa4>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <main+0xa8>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f896 	bl	8004210 <siprintf>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	1d39      	adds	r1, r7, #4
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <main+0x9c>)
 80010f0:	f002 fb71 	bl	80037d6 <HAL_UART_Transmit>
	  fsm_automatic_run();
 80010f4:	e7de      	b.n	80010b4 <main+0x4c>
 80010f6:	bf00      	nop
 80010f8:	20000150 	.word	0x20000150
 80010fc:	200001b8 	.word	0x200001b8
 8001100:	200000e0 	.word	0x200000e0
 8001104:	20000200 	.word	0x20000200
 8001108:	200000b4 	.word	0x200000b4
 800110c:	200000dc 	.word	0x200000dc
 8001110:	08004a9c 	.word	0x08004a9c

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2228      	movs	r2, #40	; 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f86c 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113a:	2301      	movs	r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113e:	2310      	movs	r3, #16
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800114a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f000 ff79 	bl	800204c <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001160:	f000 f980 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9e4 	bl	800254c <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800118a:	f000 f96b 	bl	8001464 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	; 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM2_Init+0x94>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM2_Init+0x94>)
 80011be:	223f      	movs	r2, #63	; 0x3f
 80011c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM2_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM2_Init+0x94>)
 80011ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80011ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM2_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_TIM2_Init+0x94>)
 80011de:	f001 fb4f 	bl	8002880 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e8:	f000 f93c 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM2_Init+0x94>)
 80011fa:	f001 fea3 	bl	8002f44 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f92e 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0x94>)
 8001216:	f002 fa21 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f920 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001b8 	.word	0x200001b8

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001262:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_TIM3_Init+0xe8>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001268:	223f      	movs	r2, #63	; 0x3f
 800126a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_TIM3_Init+0xe4>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_TIM3_Init+0xe4>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001288:	f001 fafa 	bl	8002880 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001292:	f000 f8e7 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012a4:	f001 fe4e 	bl	8002f44 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ae:	f000 f8d9 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012b4:	f001 fb86 	bl	80029c4 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012be:	f000 f8d1 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012d2:	f002 f9c3 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012dc:	f000 f8c2 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012f8:	f001 fd66 	bl	8002dc8 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001302:	f000 f8af 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001308:	f000 f9aa 	bl	8001660 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000150 	.word	0x20000150
 8001318:	40000400 	.word	0x40000400

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 f9f2 	bl	800373c <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f881 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000200 	.word	0x20000200
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_GPIO_Init+0xd0>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_GPIO_Init+0xd0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013bc:	f000 fe2d 	bl	800201a <HAL_GPIO_WritePin>
                          |pled1_Pin|pled2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013c6:	4820      	ldr	r0, [pc, #128]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013c8:	f000 fe27 	bl	800201a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 80013cc:	2313      	movs	r3, #19
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013e0:	f000 fc80 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013f8:	f000 fc74 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED1_Pin LED2_Pin LED4_Pin LED3_Pin
                           pled1_Pin pled2_Pin */
  GPIO_InitStruct.Pin = P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 80013fc:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8001400:	60bb      	str	r3, [r7, #8]
                          |pled1_Pin|pled2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xd4>)
 8001416:	f000 fc65 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = P_LED2_Pin|LED1_Pin;
 800141a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0xd8>)
 8001434:	f000 fc56 	bl	8001ce4 <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40010800 	.word	0x40010800

0800144c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	timerRun();
 8001454:	f7ff fa14 	bl	8000880 <timerRun>
	getKeyInput();
 8001458:	f7ff faee 	bl	8000a38 <getKeyInput>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <modification_mode>:

#include "modification_mode.h"



void modification_mode(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	//cap nhat cac gia tri Time_Auto_... khi nhan button2
	switch(status_col){
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <modification_mode+0x104>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b0e      	cmp	r3, #14
 800147a:	d048      	beq.n	800150e <modification_mode+0x9e>
 800147c:	2b0e      	cmp	r3, #14
 800147e:	dc67      	bgt.n	8001550 <modification_mode+0xe0>
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d002      	beq.n	800148a <modification_mode+0x1a>
 8001484:	2b0d      	cmp	r3, #13
 8001486:	d021      	beq.n	80014cc <modification_mode+0x5c>
				set_Time_Auto_Yellow(Time_Auto_Yellow);
				set_time_value(Time_Auto_Yellow);
			}
			break;
		default:
			break;
 8001488:	e062      	b.n	8001550 <modification_mode+0xe0>
			if(isButtonPressed(1)==1){
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff faba 	bl	8000a04 <isButtonPressed>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d15e      	bne.n	8001554 <modification_mode+0xe4>
				Time_Auto_Red = (Time_Auto_Red+1000)%100000;//ms
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <modification_mode+0x108>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <modification_mode+0x10c>)
 80014a0:	fb83 1302 	smull	r1, r3, r3, r2
 80014a4:	1359      	asrs	r1, r3, #13
 80014a6:	17d3      	asrs	r3, r2, #31
 80014a8:	1acb      	subs	r3, r1, r3
 80014aa:	4935      	ldr	r1, [pc, #212]	; (8001580 <modification_mode+0x110>)
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <modification_mode+0x108>)
 80014b4:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Red(Time_Auto_Red);
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <modification_mode+0x108>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fd46 	bl	8000f4c <set_Time_Auto_Red>
				set_time_value(Time_Auto_Red);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <modification_mode+0x108>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fd6b 	bl	8000fa0 <set_time_value>
			break;
 80014ca:	e043      	b.n	8001554 <modification_mode+0xe4>
			if(isButtonPressed(1)==1){
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fa99 	bl	8000a04 <isButtonPressed>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d13f      	bne.n	8001558 <modification_mode+0xe8>
				Time_Auto_Green = (Time_Auto_Green+1000)%100000;//ms
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <modification_mode+0x114>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <modification_mode+0x10c>)
 80014e2:	fb83 1302 	smull	r1, r3, r3, r2
 80014e6:	1359      	asrs	r1, r3, #13
 80014e8:	17d3      	asrs	r3, r2, #31
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	4924      	ldr	r1, [pc, #144]	; (8001580 <modification_mode+0x110>)
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a23      	ldr	r2, [pc, #140]	; (8001584 <modification_mode+0x114>)
 80014f6:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Green(Time_Auto_Green);
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <modification_mode+0x114>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd33 	bl	8000f68 <set_Time_Auto_Green>
				set_time_value(Time_Auto_Green);
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <modification_mode+0x114>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd4a 	bl	8000fa0 <set_time_value>
			break;
 800150c:	e024      	b.n	8001558 <modification_mode+0xe8>
			if(isButtonPressed(1)==1){
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fa78 	bl	8000a04 <isButtonPressed>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d120      	bne.n	800155c <modification_mode+0xec>
				Time_Auto_Yellow = (Time_Auto_Yellow+1000)%100000;//ms
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <modification_mode+0x118>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <modification_mode+0x10c>)
 8001524:	fb83 1302 	smull	r1, r3, r3, r2
 8001528:	1359      	asrs	r1, r3, #13
 800152a:	17d3      	asrs	r3, r2, #31
 800152c:	1acb      	subs	r3, r1, r3
 800152e:	4914      	ldr	r1, [pc, #80]	; (8001580 <modification_mode+0x110>)
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <modification_mode+0x118>)
 8001538:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Yellow(Time_Auto_Yellow);
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <modification_mode+0x118>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd20 	bl	8000f84 <set_Time_Auto_Yellow>
				set_time_value(Time_Auto_Yellow);
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <modification_mode+0x118>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fd29 	bl	8000fa0 <set_time_value>
			break;
 800154e:	e005      	b.n	800155c <modification_mode+0xec>
			break;
 8001550:	bf00      	nop
 8001552:	e004      	b.n	800155e <modification_mode+0xee>
			break;
 8001554:	bf00      	nop
 8001556:	e002      	b.n	800155e <modification_mode+0xee>
			break;
 8001558:	bf00      	nop
 800155a:	e000      	b.n	800155e <modification_mode+0xee>
			break;
 800155c:	bf00      	nop
	}
	//nhan button3 de ket thuc mode va reset lại hệ thống
	if(isButtonPressed(2)==1){
 800155e:	2002      	movs	r0, #2
 8001560:	f7ff fa50 	bl	8000a04 <isButtonPressed>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <modification_mode+0xfe>
		Init();
 800156a:	f7fe ffd7 	bl	800051c <Init>
	}
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000d0 	.word	0x200000d0
 8001578:	20000004 	.word	0x20000004
 800157c:	14f8b589 	.word	0x14f8b589
 8001580:	000186a0 	.word	0x000186a0
 8001584:	20000008 	.word	0x20000008
 8001588:	2000000c 	.word	0x2000000c

0800158c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_MspInit+0x5c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x60>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_MspInit+0x60>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001600:	d114      	bne.n	800162c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201c      	movs	r0, #28
 8001620:	f000 fa79 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001624:	201c      	movs	r0, #28
 8001626:	f000 fa92 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800162a:	e010      	b.n	800164e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_TIM_Base_MspInit+0x6c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10b      	bne.n	800164e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_TIM_Base_MspInit+0x68>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_TIM_MspPostInit+0x58>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d117      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_TIM_MspPostInit+0x60>)
 80016ac:	f000 fb1a 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40000400 	.word	0x40000400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_UART_MspInit+0x98>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d137      	bne.n	8001754 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_UART_MspInit+0x9c>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_UART_MspInit+0x9c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001714:	2304      	movs	r3, #4
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <HAL_UART_MspInit+0xa0>)
 8001728:	f000 fadc 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172c:	2308      	movs	r3, #8
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <HAL_UART_MspInit+0xa0>)
 8001740:	f000 fad0 	bl	8001ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2026      	movs	r0, #38	; 0x26
 800174a:	f000 f9e4 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800174e:	2026      	movs	r0, #38	; 0x26
 8001750:	f000 f9fd 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40004400 	.word	0x40004400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f8bf 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f001 f9fb 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001b8 	.word	0x200001b8

080017cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART2_IRQHandler+0x10>)
 80017d2:	f002 f8c3 	bl	800395c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000200 	.word	0x20000200

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f002 fccc 	bl	80041ac <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20005000 	.word	0x20005000
 8001840:	00000400 	.word	0x00000400
 8001844:	200000e4 	.word	0x200000e4
 8001848:	20000258 	.word	0x20000258

0800184c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	; (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800187e:	f7ff ffe5 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f002 fc99 	bl	80041b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fbef 	bl	8001068 <main>
  bx lr
 800188a:	4770      	bx	lr
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001894:	08004b0c 	.word	0x08004b0c
  ldr r2, =_sbss
 8001898:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800189c:	20000258 	.word	0x20000258

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x28>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f923 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fe64 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f93b 	bl	8001b6a <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f903 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000010 	.word	0x20000010
 8001928:	20000018 	.word	0x20000018
 800192c:	20000014 	.word	0x20000014

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_IncTick+0x20>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000018 	.word	0x20000018
 8001950:	20000244 	.word	0x20000244

08001954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000244 	.word	0x20000244

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <__NVIC_EnableIRQ+0x34>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff2d 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff42 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff35 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e020      	b.n	8001bec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 020e 	bic.w	r2, r2, #14
 8001bb8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d005      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2204      	movs	r2, #4
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e051      	b.n	8001cbe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 020e 	bic.w	r2, r2, #14
 8001c28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_DMA_Abort_IT+0xd0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d029      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xa0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_DMA_Abort_IT+0xd4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x9c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_DMA_Abort_IT+0xd8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01a      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x96>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_DMA_Abort_IT+0xdc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x90>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_DMA_Abort_IT+0xe0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00a      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x8a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_DMA_Abort_IT+0xe4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d102      	bne.n	8001c7c <HAL_DMA_Abort_IT+0x84>
 8001c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c7a:	e00e      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c80:	e00b      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c86:	e008      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	e005      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c92:	e002      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c94:	2310      	movs	r3, #16
 8001c96:	e000      	b.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_DMA_Abort_IT+0xe8>)
 8001c9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    } 
  }
  return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40020008 	.word	0x40020008
 8001ccc:	4002001c 	.word	0x4002001c
 8001cd0:	40020030 	.word	0x40020030
 8001cd4:	40020044 	.word	0x40020044
 8001cd8:	40020058 	.word	0x40020058
 8001cdc:	4002006c 	.word	0x4002006c
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b08b      	sub	sp, #44	; 0x2c
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	e169      	b.n	8001fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8158 	bne.w	8001fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a9a      	ldr	r2, [pc, #616]	; (8001f84 <HAL_GPIO_Init+0x2a0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d05e      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
 8001d20:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_GPIO_Init+0x2a0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d875      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d26:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <HAL_GPIO_Init+0x2a4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d058      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
 8001d2c:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x2a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d86f      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d32:	4a96      	ldr	r2, [pc, #600]	; (8001f8c <HAL_GPIO_Init+0x2a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d052      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
 8001d38:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x2a8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d869      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d3e:	4a94      	ldr	r2, [pc, #592]	; (8001f90 <HAL_GPIO_Init+0x2ac>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04c      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
 8001d44:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x2ac>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d863      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d4a:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_GPIO_Init+0x2b0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d046      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
 8001d50:	4a90      	ldr	r2, [pc, #576]	; (8001f94 <HAL_GPIO_Init+0x2b0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d85d      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d82a      	bhi.n	8001db0 <HAL_GPIO_Init+0xcc>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d859      	bhi.n	8001e12 <HAL_GPIO_Init+0x12e>
 8001d5e:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <HAL_GPIO_Init+0x80>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001ddf 	.word	0x08001ddf
 8001d68:	08001db9 	.word	0x08001db9
 8001d6c:	08001dcb 	.word	0x08001dcb
 8001d70:	08001e0d 	.word	0x08001e0d
 8001d74:	08001e13 	.word	0x08001e13
 8001d78:	08001e13 	.word	0x08001e13
 8001d7c:	08001e13 	.word	0x08001e13
 8001d80:	08001e13 	.word	0x08001e13
 8001d84:	08001e13 	.word	0x08001e13
 8001d88:	08001e13 	.word	0x08001e13
 8001d8c:	08001e13 	.word	0x08001e13
 8001d90:	08001e13 	.word	0x08001e13
 8001d94:	08001e13 	.word	0x08001e13
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001e13 	.word	0x08001e13
 8001da0:	08001e13 	.word	0x08001e13
 8001da4:	08001e13 	.word	0x08001e13
 8001da8:	08001dc1 	.word	0x08001dc1
 8001dac:	08001dd5 	.word	0x08001dd5
 8001db0:	4a79      	ldr	r2, [pc, #484]	; (8001f98 <HAL_GPIO_Init+0x2b4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db6:	e02c      	b.n	8001e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e029      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	623b      	str	r3, [r7, #32]
          break;
 8001dc8:	e024      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e01f      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	330c      	adds	r3, #12
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e01a      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de6:	2304      	movs	r3, #4
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e013      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	611a      	str	r2, [r3, #16]
          break;
 8001dfe:	e009      	b.n	8001e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e00:	2308      	movs	r3, #8
 8001e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	615a      	str	r2, [r3, #20]
          break;
 8001e0a:	e003      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x130>
          break;
 8001e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2bff      	cmp	r3, #255	; 0xff
 8001e18:	d801      	bhi.n	8001e1e <HAL_GPIO_Init+0x13a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	e001      	b.n	8001e22 <HAL_GPIO_Init+0x13e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2bff      	cmp	r3, #255	; 0xff
 8001e28:	d802      	bhi.n	8001e30 <HAL_GPIO_Init+0x14c>
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x152>
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	3b08      	subs	r3, #8
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	6a39      	ldr	r1, [r7, #32]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80b1 	beq.w	8001fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e64:	4b4d      	ldr	r3, [pc, #308]	; (8001f9c <HAL_GPIO_Init+0x2b8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a4c      	ldr	r2, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x2b8>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_GPIO_Init+0x2b8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e7c:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <HAL_GPIO_Init+0x2bc>)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <HAL_GPIO_Init+0x2c0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_GPIO_Init+0x1ec>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_GPIO_Init+0x2c4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x1e8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <HAL_GPIO_Init+0x2c8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <HAL_GPIO_Init+0x2cc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x1e0>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	e004      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee2:	492f      	ldr	r1, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x2bc>)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	492c      	ldr	r1, [pc, #176]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4928      	ldr	r1, [pc, #160]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4922      	ldr	r1, [pc, #136]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	491e      	ldr	r1, [pc, #120]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4918      	ldr	r1, [pc, #96]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4914      	ldr	r1, [pc, #80]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d021      	beq.n	8001fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e021      	b.n	8001fc6 <HAL_GPIO_Init+0x2e2>
 8001f82:	bf00      	nop
 8001f84:	10320000 	.word	0x10320000
 8001f88:	10310000 	.word	0x10310000
 8001f8c:	10220000 	.word	0x10220000
 8001f90:	10210000 	.word	0x10210000
 8001f94:	10120000 	.word	0x10120000
 8001f98:	10110000 	.word	0x10110000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	40010c00 	.word	0x40010c00
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	40011400 	.word	0x40011400
 8001fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4909      	ldr	r1, [pc, #36]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	3301      	adds	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f47f ae8e 	bne.w	8001cf8 <HAL_GPIO_Init+0x14>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	372c      	adds	r7, #44	; 0x2c
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	807b      	strh	r3, [r7, #2]
 8002026:	4613      	mov	r3, r2
 8002028:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202a:	787b      	ldrb	r3, [r7, #1]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002036:	e003      	b.n	8002040 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	041a      	lsls	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	611a      	str	r2, [r3, #16]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
	...

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e26c      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00c      	beq.n	8002092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002078:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d112      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d10b      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06c      	beq.n	8002178 <HAL_RCC_OscConfig+0x12c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d168      	bne.n	8002178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e246      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76>
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7f      	ldr	r2, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e02e      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0xbc>
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fc14 	bl	8001954 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff fc10 	bl	8001954 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1fa      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xe4>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fc00 	bl	8001954 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fbfc 	bl	8001954 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1e6      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x10c>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002186:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1ba      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fbb5 	bl	8001954 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff fbb1 	bl	8001954 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e19b      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fb94 	bl	8001954 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff fb90 	bl	8001954 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e17a      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fb74 	bl	8001954 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff fb70 	bl	8001954 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e15a      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 fad8 	bl	8002844 <RCC_Delay>
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff fb5a 	bl	8001954 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff fb56 	bl	8001954 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e140      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	42420000 	.word	0x42420000
 80022c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b9e      	ldr	r3, [pc, #632]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e9      	bne.n	80022a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a6 	beq.w	800242a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b97      	ldr	r3, [pc, #604]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a93      	ldr	r2, [pc, #588]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b8e      	ldr	r3, [pc, #568]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b8b      	ldr	r3, [pc, #556]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8a      	ldr	r2, [pc, #552]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7ff fb17 	bl	8001954 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232a:	f7ff fb13 	bl	8001954 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0fd      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b81      	ldr	r3, [pc, #516]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
 8002350:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e02d      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x334>
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a72      	ldr	r2, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x356>
 8002388:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a6c      	ldr	r2, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a63      	ldr	r2, [pc, #396]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fac7 	bl	8001954 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff fac3 	bl	8001954 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0ab      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x37e>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7ff fab1 	bl	8001954 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7ff faad 	bl	8001954 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e095      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8081 	beq.w	8002536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d061      	beq.n	8002504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d146      	bne.n	80024d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7ff fa81 	bl	8001954 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7ff fa7d 	bl	8001954 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e067      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d108      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	492d      	ldr	r1, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a19      	ldr	r1, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	430b      	orrs	r3, r1
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff fa51 	bl	8001954 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff fa4d 	bl	8001954 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e037      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46a>
 80024d4:	e02f      	b.n	8002536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa3a 	bl	8001954 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff fa36 	bl	8001954 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e020      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x498>
 8002502:	e018      	b.n	8002536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e013      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060

0800254c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d0      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d910      	bls.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4965      	ldr	r1, [pc, #404]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0b8      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a8:	4b59      	ldr	r3, [pc, #356]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	494d      	ldr	r1, [pc, #308]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d040      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d115      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e07f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e073      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06b      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4936      	ldr	r1, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7ff f98a 	bl	8001954 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7ff f986 	bl	8001954 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e053      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d210      	bcs.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4922      	ldr	r1, [pc, #136]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e032      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4916      	ldr	r1, [pc, #88]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	490e      	ldr	r1, [pc, #56]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026da:	f000 f821 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	490a      	ldr	r1, [pc, #40]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	5ccb      	ldrb	r3, [r1, r3]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1cc>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f8e8 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	08004ab8 	.word	0x08004ab8
 8002718:	20000010 	.word	0x20000010
 800271c:	20000014 	.word	0x20000014

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b490      	push	{r4, r7}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002728:	1d3c      	adds	r4, r7, #4
 800272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002730:	f240 2301 	movw	r3, #513	; 0x201
 8002734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x40>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x46>
 800275e:	e02d      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002762:	623b      	str	r3, [r7, #32]
      break;
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	0c9b      	lsrs	r3, r3, #18
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002772:	4413      	add	r3, r2
 8002774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c5b      	lsrs	r3, r3, #17
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002792:	4413      	add	r3, r2
 8002794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	fb02 f203 	mul.w	r2, r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	623b      	str	r3, [r7, #32]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc90      	pop	{r4, r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08004aa8 	.word	0x08004aa8
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000010 	.word	0x20000010

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f8:	f7ff fff2 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	08004ac8 	.word	0x08004ac8

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002820:	f7ff ffde 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0adb      	lsrs	r3, r3, #11
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	08004ac8 	.word	0x08004ac8

08002844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCC_Delay+0x34>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <RCC_Delay+0x38>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002860:	bf00      	nop
  }
  while (Delay --);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	60fa      	str	r2, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <RCC_Delay+0x1c>
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000010 	.word	0x20000010
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e041      	b.n	8002916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fea2 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fc28 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e03a      	b.n	80029ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0x58>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d009      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0x58>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_TIM_Base_Start_IT+0x9c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0x58>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d111      	bne.n	800299c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d010      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	e007      	b.n	80029ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800

080029c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f839 	bl	8002a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 fb86 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_TIM_PWM_Start+0x24>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e022      	b.n	8002ade <HAL_TIM_PWM_Start+0x6a>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d109      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x3e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e015      	b.n	8002ade <HAL_TIM_PWM_Start+0x6a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d109      	bne.n	8002acc <HAL_TIM_PWM_Start+0x58>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e008      	b.n	8002ade <HAL_TIM_PWM_Start+0x6a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e05e      	b.n	8002ba4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x82>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	e013      	b.n	8002b1e <HAL_TIM_PWM_Start+0xaa>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x92>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	e00b      	b.n	8002b1e <HAL_TIM_PWM_Start+0xaa>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xa2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b14:	e003      	b.n	8002b1e <HAL_TIM_PWM_Start+0xaa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fd74 	bl	8003614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_TIM_PWM_Start+0x138>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_TIM_PWM_Start+0x138>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00e      	beq.n	8002b6e <HAL_TIM_PWM_Start+0xfa>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d009      	beq.n	8002b6e <HAL_TIM_PWM_Start+0xfa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_TIM_PWM_Start+0x13c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_TIM_PWM_Start+0xfa>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_TIM_PWM_Start+0x140>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d010      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b90:	e007      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa6f 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa62 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa71 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa45 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa38 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa47 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa1b 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa0e 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa1d 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9f1 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9e4 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9f3 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fb88 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fce1 	bl	800372a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9b7 	bl	8003102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0220 	mvn.w	r2, #32
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fcac 	bl	8003718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ac      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	f200 809f 	bhi.w	8002f30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002f31 	.word	0x08002f31
 8002e00:	08002f31 	.word	0x08002f31
 8002e04:	08002f31 	.word	0x08002f31
 8002e08:	08002e6d 	.word	0x08002e6d
 8002e0c:	08002f31 	.word	0x08002f31
 8002e10:	08002f31 	.word	0x08002f31
 8002e14:	08002f31 	.word	0x08002f31
 8002e18:	08002eaf 	.word	0x08002eaf
 8002e1c:	08002f31 	.word	0x08002f31
 8002e20:	08002f31 	.word	0x08002f31
 8002e24:	08002f31 	.word	0x08002f31
 8002e28:	08002eef 	.word	0x08002eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f9d0 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
      break;
 8002e6a:	e062      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa16 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6999      	ldr	r1, [r3, #24]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]
      break;
 8002eac:	e041      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa5f 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0208 	orr.w	r2, r2, #8
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0204 	bic.w	r2, r2, #4
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
      break;
 8002eec:	e021      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 faa9 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	021a      	lsls	r2, r3, #8
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	61da      	str	r2, [r3, #28]
      break;
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_ConfigClockSource+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0b3      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x180>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f94:	d03e      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0xd0>
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9a:	f200 8087 	bhi.w	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	f000 8085 	beq.w	80030b0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	d87f      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d01a      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0xa2>
 8002fb0:	2b70      	cmp	r3, #112	; 0x70
 8002fb2:	d87b      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d050      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x116>
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d877      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d03c      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xf6>
 8002fc0:	2b50      	cmp	r3, #80	; 0x50
 8002fc2:	d873      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d058      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x136>
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d86f      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d064      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fd0:	2b30      	cmp	r3, #48	; 0x30
 8002fd2:	d86b      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d060      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d867      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d05a      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fe4:	e062      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f000 faee 	bl	80035d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003008:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	609a      	str	r2, [r3, #8]
      break;
 8003012:	e04e      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f000 fad7 	bl	80035d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003036:	609a      	str	r2, [r3, #8]
      break;
 8003038:	e03b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	461a      	mov	r2, r3
 8003048:	f000 fa4e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2150      	movs	r1, #80	; 0x50
 8003052:	4618      	mov	r0, r3
 8003054:	f000 faa5 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003058:	e02b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	461a      	mov	r2, r3
 8003068:	f000 fa6c 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2160      	movs	r1, #96	; 0x60
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa95 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003078:	e01b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	461a      	mov	r2, r3
 8003088:	f000 fa2e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2140      	movs	r1, #64	; 0x40
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa85 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003098:	e00b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f000 fa7c 	bl	80035a2 <TIM_ITRx_SetConfig>
        break;
 80030aa:	e002      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030ac:	bf00      	nop
 80030ae:	e000      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0210 	bic.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e03f      	b.n	80037ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd ffae 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fc85 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b08a      	sub	sp, #40	; 0x28
 80037da:	af02      	add	r7, sp, #8
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d17c      	bne.n	80038f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_UART_Transmit+0x2c>
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e075      	b.n	80038f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UART_Transmit+0x3e>
 8003810:	2302      	movs	r3, #2
 8003812:	e06e      	b.n	80038f2 <HAL_UART_Transmit+0x11c>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fe f893 	bl	8001954 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d108      	bne.n	8003858 <HAL_UART_Transmit+0x82>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e003      	b.n	8003860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003868:	e02a      	b.n	80038c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa38 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e036      	b.n	80038f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e007      	b.n	80038b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1cf      	bne.n	800386a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fa08 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e006      	b.n	80038f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	4613      	mov	r3, r2
 8003906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	d11d      	bne.n	8003950 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Receive_IT+0x26>
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e016      	b.n	8003952 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive_IT+0x38>
 800392e:	2302      	movs	r3, #2
 8003930:	e00f      	b.n	8003952 <HAL_UART_Receive_IT+0x58>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	461a      	mov	r2, r3
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa19 	bl	8003d7e <UART_Start_Receive_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	e000      	b.n	8003952 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_UART_IRQHandler+0x52>
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fac9 	bl	8003f3e <UART_Receive_IT>
      return;
 80039ac:	e17b      	b.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80b1 	beq.w	8003b18 <HAL_UART_IRQHandler+0x1bc>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_UART_IRQHandler+0x70>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80a6 	beq.w	8003b18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_UART_IRQHandler+0x90>
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_UART_IRQHandler+0xb0>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f043 0202 	orr.w	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_UART_IRQHandler+0xd0>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00f      	beq.n	8003a56 <HAL_UART_IRQHandler+0xfa>
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_UART_IRQHandler+0xee>
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0208 	orr.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 811e 	beq.w	8003c9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_UART_IRQHandler+0x11e>
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fa62 	bl	8003f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x146>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d031      	beq.n	8003b06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9a4 	bl	8003df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d023      	beq.n	8003afe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d013      	beq.n	8003af6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4a76      	ldr	r2, [pc, #472]	; (8003cac <HAL_UART_IRQHandler+0x350>)
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe f88c 	bl	8001bf8 <HAL_DMA_Abort_IT>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af0:	4610      	mov	r0, r2
 8003af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00e      	b.n	8003b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8e3 	bl	8003cc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00a      	b.n	8003b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8df 	bl	8003cc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e006      	b.n	8003b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8db 	bl	8003cc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b12:	e0c3      	b.n	8003c9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	bf00      	nop
    return;
 8003b16:	e0c1      	b.n	8003c9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	f040 80a1 	bne.w	8003c64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 809b 	beq.w	8003c64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8095 	beq.w	8003c64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04e      	beq.n	8003bfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b68:	8a3b      	ldrh	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8098 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b74:	8a3a      	ldrh	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	f080 8092 	bcs.w	8003ca0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8a3a      	ldrh	r2, [r7, #16]
 8003b80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d02b      	beq.n	8003be4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0210 	bic.w	r2, r2, #16
 8003bd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd ffcf 	bl	8001b82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f86d 	bl	8003cd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bfa:	e051      	b.n	8003ca0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d047      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c14:	8a7b      	ldrh	r3, [r7, #18]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0210 	bic.w	r2, r2, #16
 8003c56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c58:	8a7b      	ldrh	r3, [r7, #18]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f839 	bl	8003cd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c62:	e01f      	b.n	8003ca4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_UART_IRQHandler+0x324>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8f9 	bl	8003e70 <UART_Transmit_IT>
    return;
 8003c7e:	e012      	b.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f93a 	bl	8003f0e <UART_EndTransmit_IT>
    return;
 8003c9a:	e004      	b.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c9c:	bf00      	nop
 8003c9e:	e002      	b.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca0:	bf00      	nop
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca4:	bf00      	nop
  }
}
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	08003e49 	.word	0x08003e49

08003cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	e02c      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d028      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0a:	f7fd fe23 	bl	8001954 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d21d      	bcs.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e00f      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d0c3      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2222      	movs	r2, #34	; 0x22
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0220 	orr.w	r2, r2, #32
 8003de2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff ff2d 	bl	8003cc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b21      	cmp	r3, #33	; 0x21
 8003e82:	d13e      	bne.n	8003f02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d114      	bne.n	8003eb8 <UART_Transmit_IT+0x48>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d110      	bne.n	8003eb8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eaa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]
 8003eb6:	e008      	b.n	8003eca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6211      	str	r1, [r2, #32]
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff febe 	bl	8003cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b22      	cmp	r3, #34	; 0x22
 8003f50:	f040 8099 	bne.w	8004086 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d117      	bne.n	8003f8e <UART_Receive_IT+0x50>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f8c:	e026      	b.n	8003fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d007      	beq.n	8003fb2 <UART_Receive_IT+0x74>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <UART_Receive_IT+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e008      	b.n	8003fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d148      	bne.n	8004082 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0220 	bic.w	r2, r2, #32
 8003ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d123      	bne.n	8004078 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0210 	bic.w	r2, r2, #16
 8004044:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d10a      	bne.n	800406a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fe2f 	bl	8003cd4 <HAL_UARTEx_RxEventCallback>
 8004076:	e002      	b.n	800407e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fc ffa7 	bl	8000fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ca:	f023 030c 	bic.w	r3, r3, #12
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <UART_SetConfig+0x114>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe fb90 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	e002      	b.n	8004106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fe fb78 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <UART_SetConfig+0x118>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	0119      	lsls	r1, r3, #4
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f2f3 	udiv	r2, r2, r3
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <UART_SetConfig+0x118>)
 800413e:	fba3 0302 	umull	r0, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <UART_SetConfig+0x118>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415c:	4419      	add	r1, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fbb2 f2f3 	udiv	r2, r2, r3
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <UART_SetConfig+0x118>)
 8004176:	fba3 0302 	umull	r0, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	fb00 f303 	mul.w	r3, r0, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <UART_SetConfig+0x118>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	440a      	add	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40013800 	.word	0x40013800
 80041a8:	51eb851f 	.word	0x51eb851f

080041ac <__errno>:
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <__errno+0x8>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000001c 	.word	0x2000001c

080041b8 <__libc_init_array>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	2600      	movs	r6, #0
 80041bc:	4d0c      	ldr	r5, [pc, #48]	; (80041f0 <__libc_init_array+0x38>)
 80041be:	4c0d      	ldr	r4, [pc, #52]	; (80041f4 <__libc_init_array+0x3c>)
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	42a6      	cmp	r6, r4
 80041c6:	d109      	bne.n	80041dc <__libc_init_array+0x24>
 80041c8:	f000 fc5c 	bl	8004a84 <_init>
 80041cc:	2600      	movs	r6, #0
 80041ce:	4d0a      	ldr	r5, [pc, #40]	; (80041f8 <__libc_init_array+0x40>)
 80041d0:	4c0a      	ldr	r4, [pc, #40]	; (80041fc <__libc_init_array+0x44>)
 80041d2:	1b64      	subs	r4, r4, r5
 80041d4:	10a4      	asrs	r4, r4, #2
 80041d6:	42a6      	cmp	r6, r4
 80041d8:	d105      	bne.n	80041e6 <__libc_init_array+0x2e>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e0:	4798      	blx	r3
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7ee      	b.n	80041c4 <__libc_init_array+0xc>
 80041e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ea:	4798      	blx	r3
 80041ec:	3601      	adds	r6, #1
 80041ee:	e7f2      	b.n	80041d6 <__libc_init_array+0x1e>
 80041f0:	08004b04 	.word	0x08004b04
 80041f4:	08004b04 	.word	0x08004b04
 80041f8:	08004b04 	.word	0x08004b04
 80041fc:	08004b08 	.word	0x08004b08

08004200 <memset>:
 8004200:	4603      	mov	r3, r0
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <siprintf>:
 8004210:	b40e      	push	{r1, r2, r3}
 8004212:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004216:	b500      	push	{lr}
 8004218:	b09c      	sub	sp, #112	; 0x70
 800421a:	ab1d      	add	r3, sp, #116	; 0x74
 800421c:	9002      	str	r0, [sp, #8]
 800421e:	9006      	str	r0, [sp, #24]
 8004220:	9107      	str	r1, [sp, #28]
 8004222:	9104      	str	r1, [sp, #16]
 8004224:	4808      	ldr	r0, [pc, #32]	; (8004248 <siprintf+0x38>)
 8004226:	4909      	ldr	r1, [pc, #36]	; (800424c <siprintf+0x3c>)
 8004228:	f853 2b04 	ldr.w	r2, [r3], #4
 800422c:	9105      	str	r1, [sp, #20]
 800422e:	6800      	ldr	r0, [r0, #0]
 8004230:	a902      	add	r1, sp, #8
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	f000 f868 	bl	8004308 <_svfiprintf_r>
 8004238:	2200      	movs	r2, #0
 800423a:	9b02      	ldr	r3, [sp, #8]
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	b01c      	add	sp, #112	; 0x70
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	b003      	add	sp, #12
 8004246:	4770      	bx	lr
 8004248:	2000001c 	.word	0x2000001c
 800424c:	ffff0208 	.word	0xffff0208

08004250 <__ssputs_r>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	688e      	ldr	r6, [r1, #8]
 8004256:	4682      	mov	sl, r0
 8004258:	429e      	cmp	r6, r3
 800425a:	460c      	mov	r4, r1
 800425c:	4690      	mov	r8, r2
 800425e:	461f      	mov	r7, r3
 8004260:	d838      	bhi.n	80042d4 <__ssputs_r+0x84>
 8004262:	898a      	ldrh	r2, [r1, #12]
 8004264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004268:	d032      	beq.n	80042d0 <__ssputs_r+0x80>
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	6909      	ldr	r1, [r1, #16]
 800426e:	3301      	adds	r3, #1
 8004270:	eba5 0901 	sub.w	r9, r5, r1
 8004274:	6965      	ldr	r5, [r4, #20]
 8004276:	444b      	add	r3, r9
 8004278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800427c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004280:	106d      	asrs	r5, r5, #1
 8004282:	429d      	cmp	r5, r3
 8004284:	bf38      	it	cc
 8004286:	461d      	movcc	r5, r3
 8004288:	0553      	lsls	r3, r2, #21
 800428a:	d531      	bpl.n	80042f0 <__ssputs_r+0xa0>
 800428c:	4629      	mov	r1, r5
 800428e:	f000 fb53 	bl	8004938 <_malloc_r>
 8004292:	4606      	mov	r6, r0
 8004294:	b950      	cbnz	r0, 80042ac <__ssputs_r+0x5c>
 8004296:	230c      	movs	r3, #12
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f8ca 3000 	str.w	r3, [sl]
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	464a      	mov	r2, r9
 80042ae:	6921      	ldr	r1, [r4, #16]
 80042b0:	f000 face 	bl	8004850 <memcpy>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	6126      	str	r6, [r4, #16]
 80042c2:	444e      	add	r6, r9
 80042c4:	6026      	str	r6, [r4, #0]
 80042c6:	463e      	mov	r6, r7
 80042c8:	6165      	str	r5, [r4, #20]
 80042ca:	eba5 0509 	sub.w	r5, r5, r9
 80042ce:	60a5      	str	r5, [r4, #8]
 80042d0:	42be      	cmp	r6, r7
 80042d2:	d900      	bls.n	80042d6 <__ssputs_r+0x86>
 80042d4:	463e      	mov	r6, r7
 80042d6:	4632      	mov	r2, r6
 80042d8:	4641      	mov	r1, r8
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	f000 fac6 	bl	800486c <memmove>
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	1b9b      	subs	r3, r3, r6
 80042e6:	4432      	add	r2, r6
 80042e8:	2000      	movs	r0, #0
 80042ea:	60a3      	str	r3, [r4, #8]
 80042ec:	6022      	str	r2, [r4, #0]
 80042ee:	e7db      	b.n	80042a8 <__ssputs_r+0x58>
 80042f0:	462a      	mov	r2, r5
 80042f2:	f000 fb7b 	bl	80049ec <_realloc_r>
 80042f6:	4606      	mov	r6, r0
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d1e1      	bne.n	80042c0 <__ssputs_r+0x70>
 80042fc:	4650      	mov	r0, sl
 80042fe:	6921      	ldr	r1, [r4, #16]
 8004300:	f000 face 	bl	80048a0 <_free_r>
 8004304:	e7c7      	b.n	8004296 <__ssputs_r+0x46>
	...

08004308 <_svfiprintf_r>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	4698      	mov	r8, r3
 800430e:	898b      	ldrh	r3, [r1, #12]
 8004310:	4607      	mov	r7, r0
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	460d      	mov	r5, r1
 8004316:	4614      	mov	r4, r2
 8004318:	b09d      	sub	sp, #116	; 0x74
 800431a:	d50e      	bpl.n	800433a <_svfiprintf_r+0x32>
 800431c:	690b      	ldr	r3, [r1, #16]
 800431e:	b963      	cbnz	r3, 800433a <_svfiprintf_r+0x32>
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	f000 fb09 	bl	8004938 <_malloc_r>
 8004326:	6028      	str	r0, [r5, #0]
 8004328:	6128      	str	r0, [r5, #16]
 800432a:	b920      	cbnz	r0, 8004336 <_svfiprintf_r+0x2e>
 800432c:	230c      	movs	r3, #12
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	e0d1      	b.n	80044da <_svfiprintf_r+0x1d2>
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	616b      	str	r3, [r5, #20]
 800433a:	2300      	movs	r3, #0
 800433c:	9309      	str	r3, [sp, #36]	; 0x24
 800433e:	2320      	movs	r3, #32
 8004340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004344:	2330      	movs	r3, #48	; 0x30
 8004346:	f04f 0901 	mov.w	r9, #1
 800434a:	f8cd 800c 	str.w	r8, [sp, #12]
 800434e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044f4 <_svfiprintf_r+0x1ec>
 8004352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004356:	4623      	mov	r3, r4
 8004358:	469a      	mov	sl, r3
 800435a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435e:	b10a      	cbz	r2, 8004364 <_svfiprintf_r+0x5c>
 8004360:	2a25      	cmp	r2, #37	; 0x25
 8004362:	d1f9      	bne.n	8004358 <_svfiprintf_r+0x50>
 8004364:	ebba 0b04 	subs.w	fp, sl, r4
 8004368:	d00b      	beq.n	8004382 <_svfiprintf_r+0x7a>
 800436a:	465b      	mov	r3, fp
 800436c:	4622      	mov	r2, r4
 800436e:	4629      	mov	r1, r5
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff ff6d 	bl	8004250 <__ssputs_r>
 8004376:	3001      	adds	r0, #1
 8004378:	f000 80aa 	beq.w	80044d0 <_svfiprintf_r+0x1c8>
 800437c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800437e:	445a      	add	r2, fp
 8004380:	9209      	str	r2, [sp, #36]	; 0x24
 8004382:	f89a 3000 	ldrb.w	r3, [sl]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a2 	beq.w	80044d0 <_svfiprintf_r+0x1c8>
 800438c:	2300      	movs	r3, #0
 800438e:	f04f 32ff 	mov.w	r2, #4294967295
 8004392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004396:	f10a 0a01 	add.w	sl, sl, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9307      	str	r3, [sp, #28]
 800439e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043a2:	931a      	str	r3, [sp, #104]	; 0x68
 80043a4:	4654      	mov	r4, sl
 80043a6:	2205      	movs	r2, #5
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	4851      	ldr	r0, [pc, #324]	; (80044f4 <_svfiprintf_r+0x1ec>)
 80043ae:	f000 fa41 	bl	8004834 <memchr>
 80043b2:	9a04      	ldr	r2, [sp, #16]
 80043b4:	b9d8      	cbnz	r0, 80043ee <_svfiprintf_r+0xe6>
 80043b6:	06d0      	lsls	r0, r2, #27
 80043b8:	bf44      	itt	mi
 80043ba:	2320      	movmi	r3, #32
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c0:	0711      	lsls	r1, r2, #28
 80043c2:	bf44      	itt	mi
 80043c4:	232b      	movmi	r3, #43	; 0x2b
 80043c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ca:	f89a 3000 	ldrb.w	r3, [sl]
 80043ce:	2b2a      	cmp	r3, #42	; 0x2a
 80043d0:	d015      	beq.n	80043fe <_svfiprintf_r+0xf6>
 80043d2:	4654      	mov	r4, sl
 80043d4:	2000      	movs	r0, #0
 80043d6:	f04f 0c0a 	mov.w	ip, #10
 80043da:	9a07      	ldr	r2, [sp, #28]
 80043dc:	4621      	mov	r1, r4
 80043de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043e2:	3b30      	subs	r3, #48	; 0x30
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	d94e      	bls.n	8004486 <_svfiprintf_r+0x17e>
 80043e8:	b1b0      	cbz	r0, 8004418 <_svfiprintf_r+0x110>
 80043ea:	9207      	str	r2, [sp, #28]
 80043ec:	e014      	b.n	8004418 <_svfiprintf_r+0x110>
 80043ee:	eba0 0308 	sub.w	r3, r0, r8
 80043f2:	fa09 f303 	lsl.w	r3, r9, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	46a2      	mov	sl, r4
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	e7d2      	b.n	80043a4 <_svfiprintf_r+0x9c>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	1d19      	adds	r1, r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	9103      	str	r1, [sp, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfbb      	ittet	lt
 800440a:	425b      	neglt	r3, r3
 800440c:	f042 0202 	orrlt.w	r2, r2, #2
 8004410:	9307      	strge	r3, [sp, #28]
 8004412:	9307      	strlt	r3, [sp, #28]
 8004414:	bfb8      	it	lt
 8004416:	9204      	strlt	r2, [sp, #16]
 8004418:	7823      	ldrb	r3, [r4, #0]
 800441a:	2b2e      	cmp	r3, #46	; 0x2e
 800441c:	d10c      	bne.n	8004438 <_svfiprintf_r+0x130>
 800441e:	7863      	ldrb	r3, [r4, #1]
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d135      	bne.n	8004490 <_svfiprintf_r+0x188>
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	3402      	adds	r4, #2
 8004428:	1d1a      	adds	r2, r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	9203      	str	r2, [sp, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	f04f 33ff 	movlt.w	r3, #4294967295
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004504 <_svfiprintf_r+0x1fc>
 800443c:	2203      	movs	r2, #3
 800443e:	4650      	mov	r0, sl
 8004440:	7821      	ldrb	r1, [r4, #0]
 8004442:	f000 f9f7 	bl	8004834 <memchr>
 8004446:	b140      	cbz	r0, 800445a <_svfiprintf_r+0x152>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	eba0 000a 	sub.w	r0, r0, sl
 800444e:	fa03 f000 	lsl.w	r0, r3, r0
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	3401      	adds	r4, #1
 8004456:	4303      	orrs	r3, r0
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445e:	2206      	movs	r2, #6
 8004460:	4825      	ldr	r0, [pc, #148]	; (80044f8 <_svfiprintf_r+0x1f0>)
 8004462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004466:	f000 f9e5 	bl	8004834 <memchr>
 800446a:	2800      	cmp	r0, #0
 800446c:	d038      	beq.n	80044e0 <_svfiprintf_r+0x1d8>
 800446e:	4b23      	ldr	r3, [pc, #140]	; (80044fc <_svfiprintf_r+0x1f4>)
 8004470:	bb1b      	cbnz	r3, 80044ba <_svfiprintf_r+0x1b2>
 8004472:	9b03      	ldr	r3, [sp, #12]
 8004474:	3307      	adds	r3, #7
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	3308      	adds	r3, #8
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004480:	4433      	add	r3, r6
 8004482:	9309      	str	r3, [sp, #36]	; 0x24
 8004484:	e767      	b.n	8004356 <_svfiprintf_r+0x4e>
 8004486:	460c      	mov	r4, r1
 8004488:	2001      	movs	r0, #1
 800448a:	fb0c 3202 	mla	r2, ip, r2, r3
 800448e:	e7a5      	b.n	80043dc <_svfiprintf_r+0xd4>
 8004490:	2300      	movs	r3, #0
 8004492:	f04f 0c0a 	mov.w	ip, #10
 8004496:	4619      	mov	r1, r3
 8004498:	3401      	adds	r4, #1
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	4620      	mov	r0, r4
 800449e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a2:	3a30      	subs	r2, #48	; 0x30
 80044a4:	2a09      	cmp	r2, #9
 80044a6:	d903      	bls.n	80044b0 <_svfiprintf_r+0x1a8>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0c5      	beq.n	8004438 <_svfiprintf_r+0x130>
 80044ac:	9105      	str	r1, [sp, #20]
 80044ae:	e7c3      	b.n	8004438 <_svfiprintf_r+0x130>
 80044b0:	4604      	mov	r4, r0
 80044b2:	2301      	movs	r3, #1
 80044b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b8:	e7f0      	b.n	800449c <_svfiprintf_r+0x194>
 80044ba:	ab03      	add	r3, sp, #12
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	462a      	mov	r2, r5
 80044c0:	4638      	mov	r0, r7
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044c4:	a904      	add	r1, sp, #16
 80044c6:	f3af 8000 	nop.w
 80044ca:	1c42      	adds	r2, r0, #1
 80044cc:	4606      	mov	r6, r0
 80044ce:	d1d6      	bne.n	800447e <_svfiprintf_r+0x176>
 80044d0:	89ab      	ldrh	r3, [r5, #12]
 80044d2:	065b      	lsls	r3, r3, #25
 80044d4:	f53f af2c 	bmi.w	8004330 <_svfiprintf_r+0x28>
 80044d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044da:	b01d      	add	sp, #116	; 0x74
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	ab03      	add	r3, sp, #12
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	462a      	mov	r2, r5
 80044e6:	4638      	mov	r0, r7
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044ea:	a904      	add	r1, sp, #16
 80044ec:	f000 f87c 	bl	80045e8 <_printf_i>
 80044f0:	e7eb      	b.n	80044ca <_svfiprintf_r+0x1c2>
 80044f2:	bf00      	nop
 80044f4:	08004ad0 	.word	0x08004ad0
 80044f8:	08004ada 	.word	0x08004ada
 80044fc:	00000000 	.word	0x00000000
 8004500:	08004251 	.word	0x08004251
 8004504:	08004ad6 	.word	0x08004ad6

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4699      	mov	r9, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	4607      	mov	r7, r0
 8004516:	4293      	cmp	r3, r2
 8004518:	bfb8      	it	lt
 800451a:	4613      	movlt	r3, r2
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004522:	460c      	mov	r4, r1
 8004524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc28      	bgt.n	80045a2 <_printf_common+0x9a>
 8004550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004554:	1e13      	subs	r3, r2, #0
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42d      	bmi.n	80045bc <_printf_common+0xb4>
 8004560:	4649      	mov	r1, r9
 8004562:	4638      	mov	r0, r7
 8004564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004568:	47c0      	blx	r8
 800456a:	3001      	adds	r0, #1
 800456c:	d020      	beq.n	80045b0 <_printf_common+0xa8>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	68e5      	ldr	r5, [r4, #12]
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf18      	it	ne
 800457a:	2500      	movne	r5, #0
 800457c:	6832      	ldr	r2, [r6, #0]
 800457e:	f04f 0600 	mov.w	r6, #0
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	bf08      	it	eq
 8004586:	1aad      	subeq	r5, r5, r2
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	bf08      	it	eq
 800458c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004590:	4293      	cmp	r3, r2
 8004592:	bfc4      	itt	gt
 8004594:	1a9b      	subgt	r3, r3, r2
 8004596:	18ed      	addgt	r5, r5, r3
 8004598:	341a      	adds	r4, #26
 800459a:	42b5      	cmp	r5, r6
 800459c:	d11a      	bne.n	80045d4 <_printf_common+0xcc>
 800459e:	2000      	movs	r0, #0
 80045a0:	e008      	b.n	80045b4 <_printf_common+0xac>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4652      	mov	r2, sl
 80045a6:	4649      	mov	r1, r9
 80045a8:	4638      	mov	r0, r7
 80045aa:	47c0      	blx	r8
 80045ac:	3001      	adds	r0, #1
 80045ae:	d103      	bne.n	80045b8 <_printf_common+0xb0>
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	3501      	adds	r5, #1
 80045ba:	e7c4      	b.n	8004546 <_printf_common+0x3e>
 80045bc:	2030      	movs	r0, #48	; 0x30
 80045be:	18e1      	adds	r1, r4, r3
 80045c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ca:	4422      	add	r2, r4
 80045cc:	3302      	adds	r3, #2
 80045ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d2:	e7c5      	b.n	8004560 <_printf_common+0x58>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4622      	mov	r2, r4
 80045d8:	4649      	mov	r1, r9
 80045da:	4638      	mov	r0, r7
 80045dc:	47c0      	blx	r8
 80045de:	3001      	adds	r0, #1
 80045e0:	d0e6      	beq.n	80045b0 <_printf_common+0xa8>
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7d9      	b.n	800459a <_printf_common+0x92>
	...

080045e8 <_printf_i>:
 80045e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	460c      	mov	r4, r1
 80045ee:	7e27      	ldrb	r7, [r4, #24]
 80045f0:	4691      	mov	r9, r2
 80045f2:	2f78      	cmp	r7, #120	; 0x78
 80045f4:	4680      	mov	r8, r0
 80045f6:	469a      	mov	sl, r3
 80045f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045fe:	d807      	bhi.n	8004610 <_printf_i+0x28>
 8004600:	2f62      	cmp	r7, #98	; 0x62
 8004602:	d80a      	bhi.n	800461a <_printf_i+0x32>
 8004604:	2f00      	cmp	r7, #0
 8004606:	f000 80d9 	beq.w	80047bc <_printf_i+0x1d4>
 800460a:	2f58      	cmp	r7, #88	; 0x58
 800460c:	f000 80a4 	beq.w	8004758 <_printf_i+0x170>
 8004610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004618:	e03a      	b.n	8004690 <_printf_i+0xa8>
 800461a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461e:	2b15      	cmp	r3, #21
 8004620:	d8f6      	bhi.n	8004610 <_printf_i+0x28>
 8004622:	a001      	add	r0, pc, #4	; (adr r0, 8004628 <_printf_i+0x40>)
 8004624:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004628:	08004681 	.word	0x08004681
 800462c:	08004695 	.word	0x08004695
 8004630:	08004611 	.word	0x08004611
 8004634:	08004611 	.word	0x08004611
 8004638:	08004611 	.word	0x08004611
 800463c:	08004611 	.word	0x08004611
 8004640:	08004695 	.word	0x08004695
 8004644:	08004611 	.word	0x08004611
 8004648:	08004611 	.word	0x08004611
 800464c:	08004611 	.word	0x08004611
 8004650:	08004611 	.word	0x08004611
 8004654:	080047a3 	.word	0x080047a3
 8004658:	080046c5 	.word	0x080046c5
 800465c:	08004785 	.word	0x08004785
 8004660:	08004611 	.word	0x08004611
 8004664:	08004611 	.word	0x08004611
 8004668:	080047c5 	.word	0x080047c5
 800466c:	08004611 	.word	0x08004611
 8004670:	080046c5 	.word	0x080046c5
 8004674:	08004611 	.word	0x08004611
 8004678:	08004611 	.word	0x08004611
 800467c:	0800478d 	.word	0x0800478d
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	600a      	str	r2, [r1, #0]
 800468c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004690:	2301      	movs	r3, #1
 8004692:	e0a4      	b.n	80047de <_printf_i+0x1f6>
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	6808      	ldr	r0, [r1, #0]
 8004698:	062e      	lsls	r6, r5, #24
 800469a:	f100 0304 	add.w	r3, r0, #4
 800469e:	d50a      	bpl.n	80046b6 <_printf_i+0xce>
 80046a0:	6805      	ldr	r5, [r0, #0]
 80046a2:	600b      	str	r3, [r1, #0]
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	da03      	bge.n	80046b0 <_printf_i+0xc8>
 80046a8:	232d      	movs	r3, #45	; 0x2d
 80046aa:	426d      	negs	r5, r5
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b0:	230a      	movs	r3, #10
 80046b2:	485e      	ldr	r0, [pc, #376]	; (800482c <_printf_i+0x244>)
 80046b4:	e019      	b.n	80046ea <_printf_i+0x102>
 80046b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046ba:	6805      	ldr	r5, [r0, #0]
 80046bc:	600b      	str	r3, [r1, #0]
 80046be:	bf18      	it	ne
 80046c0:	b22d      	sxthne	r5, r5
 80046c2:	e7ef      	b.n	80046a4 <_printf_i+0xbc>
 80046c4:	680b      	ldr	r3, [r1, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	1d18      	adds	r0, r3, #4
 80046ca:	6008      	str	r0, [r1, #0]
 80046cc:	0628      	lsls	r0, r5, #24
 80046ce:	d501      	bpl.n	80046d4 <_printf_i+0xec>
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	e002      	b.n	80046da <_printf_i+0xf2>
 80046d4:	0669      	lsls	r1, r5, #25
 80046d6:	d5fb      	bpl.n	80046d0 <_printf_i+0xe8>
 80046d8:	881d      	ldrh	r5, [r3, #0]
 80046da:	2f6f      	cmp	r7, #111	; 0x6f
 80046dc:	bf0c      	ite	eq
 80046de:	2308      	moveq	r3, #8
 80046e0:	230a      	movne	r3, #10
 80046e2:	4852      	ldr	r0, [pc, #328]	; (800482c <_printf_i+0x244>)
 80046e4:	2100      	movs	r1, #0
 80046e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ea:	6866      	ldr	r6, [r4, #4]
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	bfa8      	it	ge
 80046f0:	6821      	ldrge	r1, [r4, #0]
 80046f2:	60a6      	str	r6, [r4, #8]
 80046f4:	bfa4      	itt	ge
 80046f6:	f021 0104 	bicge.w	r1, r1, #4
 80046fa:	6021      	strge	r1, [r4, #0]
 80046fc:	b90d      	cbnz	r5, 8004702 <_printf_i+0x11a>
 80046fe:	2e00      	cmp	r6, #0
 8004700:	d04d      	beq.n	800479e <_printf_i+0x1b6>
 8004702:	4616      	mov	r6, r2
 8004704:	fbb5 f1f3 	udiv	r1, r5, r3
 8004708:	fb03 5711 	mls	r7, r3, r1, r5
 800470c:	5dc7      	ldrb	r7, [r0, r7]
 800470e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004712:	462f      	mov	r7, r5
 8004714:	42bb      	cmp	r3, r7
 8004716:	460d      	mov	r5, r1
 8004718:	d9f4      	bls.n	8004704 <_printf_i+0x11c>
 800471a:	2b08      	cmp	r3, #8
 800471c:	d10b      	bne.n	8004736 <_printf_i+0x14e>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	07df      	lsls	r7, r3, #31
 8004722:	d508      	bpl.n	8004736 <_printf_i+0x14e>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	6861      	ldr	r1, [r4, #4]
 8004728:	4299      	cmp	r1, r3
 800472a:	bfde      	ittt	le
 800472c:	2330      	movle	r3, #48	; 0x30
 800472e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004732:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004736:	1b92      	subs	r2, r2, r6
 8004738:	6122      	str	r2, [r4, #16]
 800473a:	464b      	mov	r3, r9
 800473c:	4621      	mov	r1, r4
 800473e:	4640      	mov	r0, r8
 8004740:	f8cd a000 	str.w	sl, [sp]
 8004744:	aa03      	add	r2, sp, #12
 8004746:	f7ff fedf 	bl	8004508 <_printf_common>
 800474a:	3001      	adds	r0, #1
 800474c:	d14c      	bne.n	80047e8 <_printf_i+0x200>
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	b004      	add	sp, #16
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	4834      	ldr	r0, [pc, #208]	; (800482c <_printf_i+0x244>)
 800475a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800475e:	680e      	ldr	r6, [r1, #0]
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	f856 5b04 	ldr.w	r5, [r6], #4
 8004766:	061f      	lsls	r7, r3, #24
 8004768:	600e      	str	r6, [r1, #0]
 800476a:	d514      	bpl.n	8004796 <_printf_i+0x1ae>
 800476c:	07d9      	lsls	r1, r3, #31
 800476e:	bf44      	itt	mi
 8004770:	f043 0320 	orrmi.w	r3, r3, #32
 8004774:	6023      	strmi	r3, [r4, #0]
 8004776:	b91d      	cbnz	r5, 8004780 <_printf_i+0x198>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f023 0320 	bic.w	r3, r3, #32
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	2310      	movs	r3, #16
 8004782:	e7af      	b.n	80046e4 <_printf_i+0xfc>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f043 0320 	orr.w	r3, r3, #32
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	2378      	movs	r3, #120	; 0x78
 800478e:	4828      	ldr	r0, [pc, #160]	; (8004830 <_printf_i+0x248>)
 8004790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004794:	e7e3      	b.n	800475e <_printf_i+0x176>
 8004796:	065e      	lsls	r6, r3, #25
 8004798:	bf48      	it	mi
 800479a:	b2ad      	uxthmi	r5, r5
 800479c:	e7e6      	b.n	800476c <_printf_i+0x184>
 800479e:	4616      	mov	r6, r2
 80047a0:	e7bb      	b.n	800471a <_printf_i+0x132>
 80047a2:	680b      	ldr	r3, [r1, #0]
 80047a4:	6826      	ldr	r6, [r4, #0]
 80047a6:	1d1d      	adds	r5, r3, #4
 80047a8:	6960      	ldr	r0, [r4, #20]
 80047aa:	600d      	str	r5, [r1, #0]
 80047ac:	0635      	lsls	r5, r6, #24
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	d501      	bpl.n	80047b6 <_printf_i+0x1ce>
 80047b2:	6018      	str	r0, [r3, #0]
 80047b4:	e002      	b.n	80047bc <_printf_i+0x1d4>
 80047b6:	0671      	lsls	r1, r6, #25
 80047b8:	d5fb      	bpl.n	80047b2 <_printf_i+0x1ca>
 80047ba:	8018      	strh	r0, [r3, #0]
 80047bc:	2300      	movs	r3, #0
 80047be:	4616      	mov	r6, r2
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	e7ba      	b.n	800473a <_printf_i+0x152>
 80047c4:	680b      	ldr	r3, [r1, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	600a      	str	r2, [r1, #0]
 80047ca:	681e      	ldr	r6, [r3, #0]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4630      	mov	r0, r6
 80047d0:	6862      	ldr	r2, [r4, #4]
 80047d2:	f000 f82f 	bl	8004834 <memchr>
 80047d6:	b108      	cbz	r0, 80047dc <_printf_i+0x1f4>
 80047d8:	1b80      	subs	r0, r0, r6
 80047da:	6060      	str	r0, [r4, #4]
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	2300      	movs	r3, #0
 80047e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e6:	e7a8      	b.n	800473a <_printf_i+0x152>
 80047e8:	4632      	mov	r2, r6
 80047ea:	4649      	mov	r1, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	47d0      	blx	sl
 80047f2:	3001      	adds	r0, #1
 80047f4:	d0ab      	beq.n	800474e <_printf_i+0x166>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	079b      	lsls	r3, r3, #30
 80047fa:	d413      	bmi.n	8004824 <_printf_i+0x23c>
 80047fc:	68e0      	ldr	r0, [r4, #12]
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	4298      	cmp	r0, r3
 8004802:	bfb8      	it	lt
 8004804:	4618      	movlt	r0, r3
 8004806:	e7a4      	b.n	8004752 <_printf_i+0x16a>
 8004808:	2301      	movs	r3, #1
 800480a:	4632      	mov	r2, r6
 800480c:	4649      	mov	r1, r9
 800480e:	4640      	mov	r0, r8
 8004810:	47d0      	blx	sl
 8004812:	3001      	adds	r0, #1
 8004814:	d09b      	beq.n	800474e <_printf_i+0x166>
 8004816:	3501      	adds	r5, #1
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	9903      	ldr	r1, [sp, #12]
 800481c:	1a5b      	subs	r3, r3, r1
 800481e:	42ab      	cmp	r3, r5
 8004820:	dcf2      	bgt.n	8004808 <_printf_i+0x220>
 8004822:	e7eb      	b.n	80047fc <_printf_i+0x214>
 8004824:	2500      	movs	r5, #0
 8004826:	f104 0619 	add.w	r6, r4, #25
 800482a:	e7f5      	b.n	8004818 <_printf_i+0x230>
 800482c:	08004ae1 	.word	0x08004ae1
 8004830:	08004af2 	.word	0x08004af2

08004834 <memchr>:
 8004834:	4603      	mov	r3, r0
 8004836:	b510      	push	{r4, lr}
 8004838:	b2c9      	uxtb	r1, r1
 800483a:	4402      	add	r2, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	4618      	mov	r0, r3
 8004840:	d101      	bne.n	8004846 <memchr+0x12>
 8004842:	2000      	movs	r0, #0
 8004844:	e003      	b.n	800484e <memchr+0x1a>
 8004846:	7804      	ldrb	r4, [r0, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	428c      	cmp	r4, r1
 800484c:	d1f6      	bne.n	800483c <memchr+0x8>
 800484e:	bd10      	pop	{r4, pc}

08004850 <memcpy>:
 8004850:	440a      	add	r2, r1
 8004852:	4291      	cmp	r1, r2
 8004854:	f100 33ff 	add.w	r3, r0, #4294967295
 8004858:	d100      	bne.n	800485c <memcpy+0xc>
 800485a:	4770      	bx	lr
 800485c:	b510      	push	{r4, lr}
 800485e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004862:	4291      	cmp	r1, r2
 8004864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004868:	d1f9      	bne.n	800485e <memcpy+0xe>
 800486a:	bd10      	pop	{r4, pc}

0800486c <memmove>:
 800486c:	4288      	cmp	r0, r1
 800486e:	b510      	push	{r4, lr}
 8004870:	eb01 0402 	add.w	r4, r1, r2
 8004874:	d902      	bls.n	800487c <memmove+0x10>
 8004876:	4284      	cmp	r4, r0
 8004878:	4623      	mov	r3, r4
 800487a:	d807      	bhi.n	800488c <memmove+0x20>
 800487c:	1e43      	subs	r3, r0, #1
 800487e:	42a1      	cmp	r1, r4
 8004880:	d008      	beq.n	8004894 <memmove+0x28>
 8004882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800488a:	e7f8      	b.n	800487e <memmove+0x12>
 800488c:	4601      	mov	r1, r0
 800488e:	4402      	add	r2, r0
 8004890:	428a      	cmp	r2, r1
 8004892:	d100      	bne.n	8004896 <memmove+0x2a>
 8004894:	bd10      	pop	{r4, pc}
 8004896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800489a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800489e:	e7f7      	b.n	8004890 <memmove+0x24>

080048a0 <_free_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d043      	beq.n	8004930 <_free_r+0x90>
 80048a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ac:	1f0c      	subs	r4, r1, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	18e4      	addlt	r4, r4, r3
 80048b4:	f000 f8d0 	bl	8004a58 <__malloc_lock>
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <_free_r+0x94>)
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	4610      	mov	r0, r2
 80048be:	b933      	cbnz	r3, 80048ce <_free_r+0x2e>
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	6014      	str	r4, [r2, #0]
 80048c4:	4628      	mov	r0, r5
 80048c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ca:	f000 b8cb 	b.w	8004a64 <__malloc_unlock>
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	d90a      	bls.n	80048e8 <_free_r+0x48>
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	1862      	adds	r2, r4, r1
 80048d6:	4293      	cmp	r3, r2
 80048d8:	bf01      	itttt	eq
 80048da:	681a      	ldreq	r2, [r3, #0]
 80048dc:	685b      	ldreq	r3, [r3, #4]
 80048de:	1852      	addeq	r2, r2, r1
 80048e0:	6022      	streq	r2, [r4, #0]
 80048e2:	6063      	str	r3, [r4, #4]
 80048e4:	6004      	str	r4, [r0, #0]
 80048e6:	e7ed      	b.n	80048c4 <_free_r+0x24>
 80048e8:	461a      	mov	r2, r3
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b10b      	cbz	r3, 80048f2 <_free_r+0x52>
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	d9fa      	bls.n	80048e8 <_free_r+0x48>
 80048f2:	6811      	ldr	r1, [r2, #0]
 80048f4:	1850      	adds	r0, r2, r1
 80048f6:	42a0      	cmp	r0, r4
 80048f8:	d10b      	bne.n	8004912 <_free_r+0x72>
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	4401      	add	r1, r0
 80048fe:	1850      	adds	r0, r2, r1
 8004900:	4283      	cmp	r3, r0
 8004902:	6011      	str	r1, [r2, #0]
 8004904:	d1de      	bne.n	80048c4 <_free_r+0x24>
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4401      	add	r1, r0
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	6053      	str	r3, [r2, #4]
 8004910:	e7d8      	b.n	80048c4 <_free_r+0x24>
 8004912:	d902      	bls.n	800491a <_free_r+0x7a>
 8004914:	230c      	movs	r3, #12
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	e7d4      	b.n	80048c4 <_free_r+0x24>
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	1821      	adds	r1, r4, r0
 800491e:	428b      	cmp	r3, r1
 8004920:	bf01      	itttt	eq
 8004922:	6819      	ldreq	r1, [r3, #0]
 8004924:	685b      	ldreq	r3, [r3, #4]
 8004926:	1809      	addeq	r1, r1, r0
 8004928:	6021      	streq	r1, [r4, #0]
 800492a:	6063      	str	r3, [r4, #4]
 800492c:	6054      	str	r4, [r2, #4]
 800492e:	e7c9      	b.n	80048c4 <_free_r+0x24>
 8004930:	bd38      	pop	{r3, r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	200000e8 	.word	0x200000e8

08004938 <_malloc_r>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	1ccd      	adds	r5, r1, #3
 800493c:	f025 0503 	bic.w	r5, r5, #3
 8004940:	3508      	adds	r5, #8
 8004942:	2d0c      	cmp	r5, #12
 8004944:	bf38      	it	cc
 8004946:	250c      	movcc	r5, #12
 8004948:	2d00      	cmp	r5, #0
 800494a:	4606      	mov	r6, r0
 800494c:	db01      	blt.n	8004952 <_malloc_r+0x1a>
 800494e:	42a9      	cmp	r1, r5
 8004950:	d903      	bls.n	800495a <_malloc_r+0x22>
 8004952:	230c      	movs	r3, #12
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	2000      	movs	r0, #0
 8004958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495a:	f000 f87d 	bl	8004a58 <__malloc_lock>
 800495e:	4921      	ldr	r1, [pc, #132]	; (80049e4 <_malloc_r+0xac>)
 8004960:	680a      	ldr	r2, [r1, #0]
 8004962:	4614      	mov	r4, r2
 8004964:	b99c      	cbnz	r4, 800498e <_malloc_r+0x56>
 8004966:	4f20      	ldr	r7, [pc, #128]	; (80049e8 <_malloc_r+0xb0>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	b923      	cbnz	r3, 8004976 <_malloc_r+0x3e>
 800496c:	4621      	mov	r1, r4
 800496e:	4630      	mov	r0, r6
 8004970:	f000 f862 	bl	8004a38 <_sbrk_r>
 8004974:	6038      	str	r0, [r7, #0]
 8004976:	4629      	mov	r1, r5
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f85d 	bl	8004a38 <_sbrk_r>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d123      	bne.n	80049ca <_malloc_r+0x92>
 8004982:	230c      	movs	r3, #12
 8004984:	4630      	mov	r0, r6
 8004986:	6033      	str	r3, [r6, #0]
 8004988:	f000 f86c 	bl	8004a64 <__malloc_unlock>
 800498c:	e7e3      	b.n	8004956 <_malloc_r+0x1e>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	1b5b      	subs	r3, r3, r5
 8004992:	d417      	bmi.n	80049c4 <_malloc_r+0x8c>
 8004994:	2b0b      	cmp	r3, #11
 8004996:	d903      	bls.n	80049a0 <_malloc_r+0x68>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	441c      	add	r4, r3
 800499c:	6025      	str	r5, [r4, #0]
 800499e:	e004      	b.n	80049aa <_malloc_r+0x72>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	42a2      	cmp	r2, r4
 80049a4:	bf0c      	ite	eq
 80049a6:	600b      	streq	r3, [r1, #0]
 80049a8:	6053      	strne	r3, [r2, #4]
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 f85a 	bl	8004a64 <__malloc_unlock>
 80049b0:	f104 000b 	add.w	r0, r4, #11
 80049b4:	1d23      	adds	r3, r4, #4
 80049b6:	f020 0007 	bic.w	r0, r0, #7
 80049ba:	1ac2      	subs	r2, r0, r3
 80049bc:	d0cc      	beq.n	8004958 <_malloc_r+0x20>
 80049be:	1a1b      	subs	r3, r3, r0
 80049c0:	50a3      	str	r3, [r4, r2]
 80049c2:	e7c9      	b.n	8004958 <_malloc_r+0x20>
 80049c4:	4622      	mov	r2, r4
 80049c6:	6864      	ldr	r4, [r4, #4]
 80049c8:	e7cc      	b.n	8004964 <_malloc_r+0x2c>
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d0e3      	beq.n	800499c <_malloc_r+0x64>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 f82e 	bl	8004a38 <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d1dd      	bne.n	800499c <_malloc_r+0x64>
 80049e0:	e7cf      	b.n	8004982 <_malloc_r+0x4a>
 80049e2:	bf00      	nop
 80049e4:	200000e8 	.word	0x200000e8
 80049e8:	200000ec 	.word	0x200000ec

080049ec <_realloc_r>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	4607      	mov	r7, r0
 80049f0:	4614      	mov	r4, r2
 80049f2:	460e      	mov	r6, r1
 80049f4:	b921      	cbnz	r1, 8004a00 <_realloc_r+0x14>
 80049f6:	4611      	mov	r1, r2
 80049f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049fc:	f7ff bf9c 	b.w	8004938 <_malloc_r>
 8004a00:	b922      	cbnz	r2, 8004a0c <_realloc_r+0x20>
 8004a02:	f7ff ff4d 	bl	80048a0 <_free_r>
 8004a06:	4625      	mov	r5, r4
 8004a08:	4628      	mov	r0, r5
 8004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a0c:	f000 f830 	bl	8004a70 <_malloc_usable_size_r>
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d20f      	bcs.n	8004a34 <_realloc_r+0x48>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4638      	mov	r0, r7
 8004a18:	f7ff ff8e 	bl	8004938 <_malloc_r>
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d0f2      	beq.n	8004a08 <_realloc_r+0x1c>
 8004a22:	4631      	mov	r1, r6
 8004a24:	4622      	mov	r2, r4
 8004a26:	f7ff ff13 	bl	8004850 <memcpy>
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ff37 	bl	80048a0 <_free_r>
 8004a32:	e7e9      	b.n	8004a08 <_realloc_r+0x1c>
 8004a34:	4635      	mov	r5, r6
 8004a36:	e7e7      	b.n	8004a08 <_realloc_r+0x1c>

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4d05      	ldr	r5, [pc, #20]	; (8004a54 <_sbrk_r+0x1c>)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fc fecc 	bl	80017e0 <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000248 	.word	0x20000248

08004a58 <__malloc_lock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_lock+0x8>)
 8004a5a:	f000 b811 	b.w	8004a80 <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20000250 	.word	0x20000250

08004a64 <__malloc_unlock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__malloc_unlock+0x8>)
 8004a66:	f000 b80c 	b.w	8004a82 <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000250 	.word	0x20000250

08004a70 <_malloc_usable_size_r>:
 8004a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a74:	1f18      	subs	r0, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbc      	itt	lt
 8004a7a:	580b      	ldrlt	r3, [r1, r0]
 8004a7c:	18c0      	addlt	r0, r0, r3
 8004a7e:	4770      	bx	lr

08004a80 <__retarget_lock_acquire_recursive>:
 8004a80:	4770      	bx	lr

08004a82 <__retarget_lock_release_recursive>:
 8004a82:	4770      	bx	lr

08004a84 <_init>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr

08004a90 <_fini>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr
